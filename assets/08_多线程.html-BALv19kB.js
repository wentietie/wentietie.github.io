import{_ as t,r as c,o as i,c as o,e as n,a as l,w as e,d as s,b as p}from"./app-CQavEA7Q.js";const u="/assets/08_%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-BRTyEy2w.png",k={},d=n("h1",{id:"_8-多线程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-多线程"},[n("span",null,"8 多线程")])],-1),r=n("h3",{id:"_8-1-基本概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-1-基本概念"},[n("span",null,"8.1 基本概念")])],-1),v=n("ul",null,[n("li",null,"程序是静态的，进程是动态的"),n("li",null,[s("进程作为"),n("span",{style:{color:"red"}},"资源分配的单位"),s("，系统在运行时会为每个进程分配不同的内存区域")])],-1),m=n("ul",null,[n("li",null,"若一个进程同一时间可以并行执行多个线程，那么这个进程就是支持多线程的"),n("li",null,[s("线程作为"),n("span",{style:{color:"red"}},"调度和执行的单位"),s("，"),n("span",{style:{color:"blue"}},[n("strong",null,"每个线程拥有独立的运行栈和程序计数器（pc）")]),s("，线程切换的开销小")]),n("li",null,[n("span",{style:{color:"blue"}},[n("strong",null,"一个进程中的多个线程共享相同的方法区、堆")]),s("，他们从同一堆中分配对象，可以访问相同的变量和对象。这使得线程间通信更简便、高效。但多个线程操作共享的系统资源就会带来安全隐患")])],-1),b=n("p",null,"一个Java应用程序java.exe，其实至少有3个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程",-1),y=n("ul",null,[n("li",null,"提高应用程序的相应。对图形化界面更有意义，可增强用户体验"),n("li",null,"提高计算机系统CPU的利用率"),n("li",null,"改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改")],-1),h=n("ul",null,[n("li",null,[n("p",null,"程序需要同时执行两个或多个任务")]),n("li",null,[n("p",null,"程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索。"),n("p",null,"比如点外卖时，手指上划，获取数据和图片加载就是两个线程")]),n("li",null,[n("p",null,"需要一些后台运行的程序时")])],-1),w=p('<h3 id="_8-2-线程的创建和使用" tabindex="-1"><a class="header-anchor" href="#_8-2-线程的创建和使用"><span>8.2 线程的创建和使用</span></a></h3><p>更深的课程：<a href="https://www.bilibili.com/video/BV18b411M7xz?p=45&amp;vd_source=555f33f5f6791940abce98aa27017451" target="_blank" rel="noopener noreferrer">45_Callable接口_哔哩哔哩_bilibili</a></p><blockquote><p>线程创建的方法</p></blockquote><ul><li>方法一：继承Thread类</li><li>方法二：实现Runnable接口</li><li>方法三：实现Callable接口（JDK5.0新增）</li><li>方法四：使用线程池（JDK5.0新增）</li></ul><blockquote><p>方式一：继承Thread类</p></blockquote>',5),_=n("li",null,[n("p",null,"创建一个继承Thread类的子类")],-1),g=n("li",null,[n("p",null,"在子类中重写Thread的run()方法"),n("p",null,"将线程需要执行的操作，声明在run()方法中")],-1),f=n("li",null,[n("p",null,"创建子类的实例对象")],-1),j=n("p",null,"调用子类实例对象的start()方法",-1),T=n("li",null,[s("start()方法的作用 "),n("ul",null,[n("li",null,"启动当前线程"),n("li",null,[s("调用"),n("strong",null,"当前线程"),s("的run()方法")])])],-1),q=n("blockquote",null,[n("p",null,"方式二：实现Runnable接口")],-1),x=n("ul",null,[n("li",null,"创建一个实现Runnable接口的类"),n("li",null,"实现类中去重写Runnable接口的抽象方法run()"),n("li",null,"创建实现类的对象"),n("li",null,"将次对象作为参数传递到Thread类的构造器中，创建Thread类对象"),n("li",null,"通过Thread类的对象调用run()")],-1),C=n("ul",null,[n("li",null,[s("二者的联系如下： "),n("ul",null,[n("li",null,"Thread本身也实现了Runnable接口")])]),n("li",null,[s("相同点： "),n("ul",null,[n("li",null,"两种方式都要重写run()，将线程要执行的逻辑写在run()中")])])],-1),B=n("blockquote",null,[n("p",null,"方式三：实现Callable接口")],-1),R=n("ul",null,[n("li",null,"创建一个实现Callable的实现类"),n("li",null,"实现call()方法：将此线程需要执行的操作声明在此方法中。call()是可以有返回值的"),n("li",null,"创建Callable实现类的对象"),n("li",null,"创建FutureTask对象：将上述Callable实现类对象，作为参数传递到FutureTask构造器中"),n("li",null,"创建Thread对象并运行：需要将FutureTask对象作为参数传递到Thread构造器中"),n("li",null,"（可选）获取Callable实现类中call()的返回值：借助FutureTask对象的get()方法获取")],-1),E=n("ul",null,[n("li",null,"可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等"),n("li",null,"FutureTask是Future接口的唯一实现类"),n("li",null,"FutureTask同时实现了Runnable、Future接口。既可以作为Runnable被线程执行，又可以作为Future得到Callable中call()的返回值")],-1),O=n("ul",null,[n("li",null,[s("与实现Runnable相比，Callable功能更强大 "),n("ul",null,[n("li",null,"相比run()方法，Callable接口中的call()可以有返回值"),n("li",null,"call()方法可以抛出异常"),n("li",null,"Callable支持泛型"),n("li",null,"需要借助FutureTask类，来获取返回结果")])])],-1),N=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 创建线程的方式三：实现Callable接口（JDK5.0新增）</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2022/11/3 17:37</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateThreadTest3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 3.创建Callable实现类对象</span></span>
<span class="line">        <span class="token class-name">MyThreadByCallable</span> mtc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadByCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 4.创建FutureTask对象</span></span>
<span class="line">        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>mtc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 5.创建Thread对象，并启动线程</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 6.获取call()中返回值</span></span>
<span class="line">            <span class="token class-name">Object</span> o <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.创建Callable的实现类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyThreadByCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 2.重写call()</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P=n("blockquote",null,[n("p",null,"方式四：使用线程池")],-1),F=n("p",null,"经常创建和销毁、使用量特别大的资源。如并发情况下的线程，对性能影响很大",-1),S=n("ul",null,[n("li",null,"提高响应速度（减少了创建新线程的时间）"),n("li",null,"降低资源消耗（重复利用线程池中的线程，不需要每次都创建）"),n("li",null,[s("便于线程管理： "),n("ul",null,[n("li",null,"corePoolSize：核心池的大小"),n("li",null,"maximumPoolSize：最大线程数"),n("li",null,"KeepAliveTime：线程没有任务时最多保持多长时间会终止")])])],-1),A=n("ul",null,[n("li",null,[n("span",{style:{color:"red","font-weight":"bold"}},"ExecutorService"),s("：")]),n("li",null,[n("span",{style:{color:"red","font-weight":"bold"}},"Executors"),s("：")])],-1),z=n("h3",{id:"_8-3-thread类中的方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-3-thread类中的方法"},[n("span",null,"8.3 Thread类中的方法")])],-1),I=p('<h3 id="_8-4-线程的调度" tabindex="-1"><a class="header-anchor" href="#_8-4-线程的调度"><span>8.4 线程的调度</span></a></h3><blockquote><p>CPU调度策略</p></blockquote><ul><li>时间片：执行一段时间的A，再去执行一定时间的B，再去执行一定时间的C......</li><li>抢占式：高优先级的线程抢占CPU</li></ul><blockquote><p>Java的调度方法</p></blockquote><ul><li>同优先级线程组成先进先出队列，使用时间片策略</li><li>对于高优先级的，使用优先调度的抢占式策略</li></ul><blockquote><p>线程的优先级</p></blockquote>',6),J=n("p",null,"线程优先级的等级",-1),M=n("p",null,"共10档，有三个常量，如下：",-1),U=n("p",null,"涉及的方法",-1),V=n("li",null,[n("p",null,"说明"),n("ul",null,[n("li",null,"线程创建时，继承父线程的优先级"),n("li",null,"低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用")])],-1),W=n("h3",{id:"_8-5-线程的分类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-5-线程的分类"},[n("span",null,"8.5 线程的分类")])],-1),D=p('<ul><li>它们几乎在每个方面都是相同的，唯一的区别就是判断JVM何时离开</li><li>守护线程是用来服务用户线程的，通过在start()前调用<code>线程实例对象.setDaemon(true)</code>可以把一个用户线程变成一个守护线程</li><li>Java垃圾回收就是一个典型的守护线程</li><li>若JVM中都是守护线程，当前JVM将退出</li></ul><h3 id="_8-6-线程的生命周期" tabindex="-1"><a class="header-anchor" href="#_8-6-线程的生命周期"><span>8.6 线程的生命周期</span></a></h3><p><img src="'+u+`" alt=""></p><h3 id="_8-7-线程的同步" tabindex="-1"><a class="header-anchor" href="#_8-7-线程的同步"><span>8.7 线程的同步</span></a></h3><blockquote><p>线程同步的方法</p></blockquote><ul><li>方法一：同步代码块</li><li>方法二：同步方法</li><li>方法三：使用Lock锁</li></ul><blockquote><p>方式一：同步代码块</p></blockquote><ul><li><p>语法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 需要被同步的代码，即操作共享数据的代码</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>说明</p><ul><li><p>同步监视器：即锁，任何一个类的对象，都可以充当锁。</p><ul><li><p>要求：多个线程共用同一把锁</p></li><li><p>补充：</p><ul><li><p>在实现Runnable接口创建多线程的方式中，可以考虑使用this、或者声明一个实现类的属性（该属性是一个类的实例）作为同步监视器</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Window2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 此处可以不使用static。因为虽然开了3个窗口，但是实际上共用的是一个Window对象</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 声明一个对象属性同步锁</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 使用实现类的对象属性作为同步锁</span></span>
<span class="line">            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token comment">// 使用this作为同步锁</span></span>
<span class="line"><span class="token comment">//            synchronized (this) {</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: 卖票，票号为：&quot;</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    ticket <span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在继承Thread类创建多线程的方式中，可以考虑使用<code>类名.class</code>、或者声明一个实现类的静态属性（该属性是一个实例）作为同步监视器，不可使用this</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 票声明为static，所有线程共用同一个static变量</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// obj声明为static，作为一个锁，所有线程共用同一把锁</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 正确。使用实现类的对象静态属性作为同步锁</span></span>
<span class="line">            <span class="token comment">// synchronized (obj) {</span></span>
<span class="line">            <span class="token comment">// 正确。使用“实现类.class”为同步锁</span></span>
<span class="line">            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Window</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 错误。不可以用this</span></span>
<span class="line">            <span class="token comment">// synchronized (this) {</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: 卖票，票号为：&quot;</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    ticket <span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>举例：</p><ul><li>在类中声明一个对象，用来作为同步锁</li><li>使用<code>类名.class</code></li></ul></li></ul></li><li><p>需要被同步的代码：即操作共享数据的代码</p></li></ul></li></ul><blockquote><p>方式二：同步方法</p></blockquote><ul><li><p>同步方法仍然涉及到同步监视器，只是不需要显示声明</p></li><li><p>非静态的同步方法，同步监视器是this</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Window4</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 此处可以不使用static。因为虽然开了3个窗口，但是实际上共用的是一个Window对象</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 同步监视器：this</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: 卖票，票号为：&quot;</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ticket<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>静态的同步方法，同步监视器是类本身</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Window3</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 票声明为static，所有线程共用同一个static变量</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 同步监视器：Window3.class</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: 卖票，票号为：&quot;</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ticket <span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>方法三：Lock</p></blockquote>`,11),K=p(`<h3 id="_8-8-单例设计模式之线程安全的懒汉式" tabindex="-1"><a class="header-anchor" href="#_8-8-单例设计模式之线程安全的懒汉式"><span>8.8 单例设计模式之线程安全的懒汉式</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 私有化构造器</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 方式一：效率稍差</span></span>
<span class="line"><span class="token comment">//        synchronized (Bank.class) {</span></span>
<span class="line"><span class="token comment">//            if (null == instance) {</span></span>
<span class="line"><span class="token comment">//                instance = new Bank();</span></span>
<span class="line"><span class="token comment">//            }</span></span>
<span class="line"><span class="token comment">//        }</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 方式二：效率较高</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-9-线程的死锁" tabindex="-1"><a class="header-anchor" href="#_8-9-线程的死锁"><span>8.9 线程的死锁</span></a></h3><blockquote><p>死锁</p></blockquote><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，这就造成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li></ul><blockquote><p>死锁产生的必要条件</p></blockquote><ul><li>互斥条件：任意一个时刻一个资源只能给一个进程使用</li><li>不可剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行剥夺</li><li>请求和保持条件：进程在申请新资源的同时，继续占用已经分配到的资源</li><li>循环等待条件：前一个进程占有后一个进程锁申请的资源，最后一个进程占用第一个进程所申请的资源</li></ul><blockquote><p>处理死锁的方法</p></blockquote><ul><li><p>预防死锁</p><ul><li>“互斥”条件是无法破坏的</li><li>破坏“不可剥夺”条件： <ul><li>方法一：如果占有某些资源的一个进程申请新的资源被拒绝，则该进程必须释放它最初占有的资源。如有必要，只可以再次请求这些资源和其他资源</li><li>方法二：如果一个进程请求当前被另一个进程占有的资源，则操作系统可以抢占另一个进程，要求它释放资源。只有在两个进程优先级不同的条件下，方法二才能预防死锁</li></ul></li><li>破坏“请求与保持”条件： <ul><li>方法一：创建进程时，系统要么满足它申请的所有资源，要么什么都不给。这就会所谓的“一次性分配”</li><li>方法二：要求每个进程申请新的资源时，释放他所占有的资源。</li></ul></li><li>破坏“循环等待”条件：将系统中所有的资源编号，进程可以在任意时间提出资源申请，但所有申请必须按照资源的编号书序提出。</li></ul></li><li><p>避免死锁</p><ul><li>有序资源分配法：将系统中的资源统一编号，申请时必须按从小到大的顺序</li><li>专门的算法：如银行家算法</li></ul></li><li><p>检测死锁：当死锁发生时，相关机构能够监测到死锁发生的位置和原因，并能通过外力破坏死锁发生的必要条件，从而使得并发进程从死锁状态中恢复出来</p></li><li><p>解除死锁：</p><p>死锁解除的主要方法有：</p><ul><li><p>资源剥夺法：挂起某些死锁进程，并抢占他们的资源，将这些资源分配给其他的死锁进程。</p><p>但是，应该防止被挂起的进程长时间得不到资源而处于资源匮乏的状态。</p></li><li><p>撤销进程法：强制撤销部分甚至全部死锁进程，并剥夺他们的资源。</p><p>撤销的原则可以按照进程的优先级和撤销进程代价的高低进行。</p></li><li><p>进程回退法：让一个或者多个进程回退到足以避免死锁的地步，进程回退时资源释放资源。</p><p>要求系统保持进程的历史信息，设置还原点。</p></li></ul></li></ul><h3 id="_8-10-线程的通信" tabindex="-1"><a class="header-anchor" href="#_8-10-线程的通信"><span>8.10 线程的通信</span></a></h3><blockquote><p>常用方法</p></blockquote><p>以下方法是定义在Object类中的，不是Thread中</p>`,12),Y=p(`<blockquote><p>说明</p></blockquote><ul><li><p>wait()、notify()、notifyAll()必须用在同步代码块或者同步方法中</p></li><li><p>wait()、notify()、notifyAll()的调用者必须是同步代码块或同步方法中的同步监视器。</p><p>否则会出现IllegalMonitorStateException异常</p></li><li><p>wait()、notify()、notifyAll()是定义在java.lang.Object中的</p></li></ul><blockquote><p>例子</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 线程通信的例子：使用两个线程打印1-100.线程1和线程2交替打印</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2022/11/1 17:52</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicationTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Number</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;线程1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;线程2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 假如第一次进来的线程1。第一次notify()并没有唤醒任何线程。</span></span>
<span class="line">                <span class="token comment">// 待线程1执行完wait()后,待线程1进入阻塞状态</span></span>
<span class="line">                <span class="token comment">// 随后线程2进来。执行notify()，唤醒线程1</span></span>
<span class="line">                obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;_&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    num <span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 阻塞当前线程</span></span>
<span class="line">                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function L(X,G){const a=c("front");return i(),o("div",null,[d,r,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("程序（program）")]),_:1}),s("：是为了完成特定的任务、用某种语言编写的一组指令的集合。即一段静态的代码，静态对象")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("进程（process）")]),_:1}),s("：是程序的一次执行过程，或者是正在运行的一个程序。是一个动态的过程，有他自身的产生、存在和消亡的过程"),v]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("线程（thread）")]),_:1}),s("：进程可以进一步细化为线程，是一个程序内部的一条执行路径"),m]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("单核CPU")]),_:1}),s("：其实是一种假的多线程，因为他在一个时间单元内，也只能执行一个线程的任务")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("多核CPU")]),_:1}),s("：多核CPU才能更好的发挥多线程的效率"),b]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("并行")]),_:1}),s("：多个CPU同事执行多个任务。如：多个人同时做不同的事情")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("并发")]),_:1}),s("：一个CPU（采用时间片）同时执行多个任务。如：秒杀，多个人同时做一件事")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("多线程的优点")]),_:1}),s("："),y]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("何时需要多线程")]),_:1}),s("："),h])]),w,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow","font-weight":"900"}},{default:e(()=>[s("步骤")]),_:1}),n("ul",null,[_,g,f,n("li",null,[j,n("ul",null,[T,n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("不可以让已经start()的线程重新start()。")]),_:1}),s("否则会报IllegalThreadStateException")])])])])])]),q,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow","font-weight":"900"}},{default:e(()=>[s("步骤")]),_:1}),x]),n("li",null,[n("p",null,[l(a,{style:{background:"yellow","font-weight":"900"}},{default:e(()=>[s("比较以上创建线程的两种方式")]),_:1})]),s(" - 开发中优先选择实现Runnable接口的方式。原因如下： - 实现的方式没有类的单继承性的局限性 - 实现的方式更适合来处理多个线程有共享数据的情况 "),C])]),B,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow","font-weight":"900"}},{default:e(()=>[s("步骤")]),_:1}),R]),n("li",null,[n("p",null,[l(a,{style:{background:"yellow","font-weight":"900"}},{default:e(()=>[s("Future接口简介")]),_:1})]),E]),n("li",null,[n("p",null,[l(a,{style:{background:"yellow","font-weight":"900"}},{default:e(()=>[s("实现Callable接口方法与实现Runnable接口的对比：")]),_:1})]),O]),n("li",null,[n("p",null,[l(a,{style:{background:"yellow","font-weight":"900"}},{default:e(()=>[s("示例代码")]),_:1})]),N])]),P,n("ul",null,[n("li",null,[n("p",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("适用场景")]),_:1})]),F]),n("li",null,[n("p",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("好处")]),_:1})]),S]),n("li",null,[n("p",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("线程池相关API")]),_:1})]),A])]),z,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("start()")]),_:1}),s("：启动当前线程；调用当前线程的run()")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("run()")]),_:1}),s("：通常都需要重写该方法，将创建的线程要执行的操作声明在此方法中")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("currentThread()")]),_:1}),s("：静态方法，返回执行当前代码的线程")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("getName()")]),_:1}),s("：获取当前线程的名字")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("setName()")]),_:1}),s("：设置当前线程的名字")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("yield()")]),_:1}),s("：释放当前CPU的执行权（当然下一个CPU的执行权也有可能被争取到）")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("join()")]),_:1}),s("：在线程a中调用线程b的join()，此时线程a就会进入阻塞状态，直到线程b执行完成后，线程a才会结束阻塞状态")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("stop()")]),_:1}),s("：已过时。强制结束当前线程，不推荐使用")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("sleep(long millis)")]),_:1}),s("：静态方法，让当前线程“睡眠”指定的millis毫秒。在指定的millis毫秒时间内，当前线程是阻塞的装填")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("isAlive()")]),_:1}),s("：判断当前线程是否存活")])]),I,n("ul",null,[n("li",null,[J,M,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("MAX_PRIORITY")]),_:1}),s("：10。最大的优先级")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("MIN_PRIORITY")]),_:1}),s("：1。最小的优先级")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("NORM_PRIORITY")]),_:1}),s("：5。默认的优先级")])])]),n("li",null,[U,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("getPriority()")]),_:1}),s("：返回线程的优先级")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("setPriority(int newPriority)")]),_:1}),s("：改变线程的优先级")])])]),V]),W,n("p",null,[s("Java中的线程分类两类，一种是"),l(a,{style:{background:"yellow"}},{default:e(()=>[s("守护线程")]),_:1}),s("，一种是"),l(a,{style:{background:"yellow"}},{default:e(()=>[s("用户线程")]),_:1}),s("。")]),D,l(a,{style:{background:"yellow"}},{default:e(()=>[s("jdk5.0新特性")]),_:1}),K,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("wait()")]),_:1}),s("：使线程进入阻塞状态，并释放同步监视器")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("notify()")]),_:1}),s("：唤醒被wait的一个线程（优先唤醒有优先级高的）")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:e(()=>[s("notifyAll()")]),_:1}),s("：唤醒所有被wait的线程")])]),Y])}const Q=t(k,[["render",L],["__file","08_多线程.html.vue"]]),Z=JSON.parse('{"path":"/static/tang/java2/08_%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"8 多线程","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"8.1 基本概念","slug":"_8-1-基本概念","link":"#_8-1-基本概念","children":[]},{"level":3,"title":"8.2 线程的创建和使用","slug":"_8-2-线程的创建和使用","link":"#_8-2-线程的创建和使用","children":[]},{"level":3,"title":"8.3 Thread类中的方法","slug":"_8-3-thread类中的方法","link":"#_8-3-thread类中的方法","children":[]},{"level":3,"title":"8.4 线程的调度","slug":"_8-4-线程的调度","link":"#_8-4-线程的调度","children":[]},{"level":3,"title":"8.5 线程的分类","slug":"_8-5-线程的分类","link":"#_8-5-线程的分类","children":[]},{"level":3,"title":"8.6 线程的生命周期","slug":"_8-6-线程的生命周期","link":"#_8-6-线程的生命周期","children":[]},{"level":3,"title":"8.7 线程的同步","slug":"_8-7-线程的同步","link":"#_8-7-线程的同步","children":[]},{"level":3,"title":"8.8 单例设计模式之线程安全的懒汉式","slug":"_8-8-单例设计模式之线程安全的懒汉式","link":"#_8-8-单例设计模式之线程安全的懒汉式","children":[]},{"level":3,"title":"8.9 线程的死锁","slug":"_8-9-线程的死锁","link":"#_8-9-线程的死锁","children":[]},{"level":3,"title":"8.10 线程的通信","slug":"_8-10-线程的通信","link":"#_8-10-线程的通信","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/08_多线程.md"}');export{Q as comp,Z as data};
