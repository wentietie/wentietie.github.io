import{_ as s,r as a,o as c,c as r,e as l,a as o,w as n,d as t,b as i}from"./app-CW2dCZSC.js";const u={},_=i('<h1 id="_3-关系型数据库设计原则" tabindex="-1"><a class="header-anchor" href="#_3-关系型数据库设计原则"><span>3 关系型数据库设计原则</span></a></h1><blockquote><p>前言</p></blockquote><ul><li>关系型数据库的典型数据结构就是 <strong>数据表</strong> ，这些数据表的组成都是<strong>结构化的（Structured）</strong>。</li><li>将数据放到表中，表再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。</li><li>表名具有唯一性。 表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中 “类”的设计。</li></ul><h2 id="_3-1-表、记录、字段" tabindex="-1"><a class="header-anchor" href="#_3-1-表、记录、字段"><span>3.1 表、记录、字段</span></a></h2><ul><li><strong>E-R</strong>（entity-relationship，实体-联系）模型中有三个主要概念是： <code>实体集</code> 、 <code>属性</code> 、 <code>联系集 </code>。</li><li>一个实体集（class）对应于数据库中的一个<strong>表（table</strong>），一个实体（instance）则对应于数据库表 中的一<strong>行（row）</strong>，也称为一条<strong>记录（record）</strong>。一个属性（attribute）对应于数据库表中的一<strong>列 （column）</strong>，也称为一个<strong>字段（field）</strong>。</li><li>ORM思想 (Object Relational Mapping)体现： <ul><li>数据库中的一个表 &lt;---&gt; Java或Python中的一个类</li><li>表中的一条数据 &lt;---&gt; 类中的一个对象（或实例）</li><li>表中的一个列 &lt;----&gt; 类中的一个字段、属性(field)</li></ul></li></ul><h2 id="_3-2-表的关联关系" tabindex="-1"><a class="header-anchor" href="#_3-2-表的关联关系"><span>3.2 表的关联关系</span></a></h2><blockquote><p>概述</p></blockquote><ul><li>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用 关系模型来表示。</li><li>分类：一对一关联、一对多关联、多对多关联、自我引用</li></ul><blockquote><p>一对一关联（one-to-one）</p></blockquote>',9),d=l("li",null,"在实际的开发中应用不多，因为一对一可以创建成一张表。",-1),h=l("li",null,[t("举例：设计 "),l("code",null,"学生表"),t(" ：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急 联系人、... "),l("ul",null,[l("li",null,"拆为两个表：两个表的记录是一一对应关系。"),l("li",null,"基础信息表 （常用信息）：学号、姓名、手机号码、班级、系别"),l("li",null,"档案信息表 （不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、...")])],-1),p=l("ul",null,[l("li",null,"外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。"),l("li",null,"外键是主键：主表的主键和从表的主键，形成主外键关系。")],-1),g=l("blockquote",null,[l("p",null,"一对多关系（one-to-many）")],-1),m=l("li",null,"常见实例场景： 客户表和订单表 ， 分类表和商品表 ， 部门表和员工表 。",-1),b=l("li",null,"举例： 员工表：编号、姓名、...、所属部门 部门表：编号、名称、简介",-1),f=i("<blockquote><p>多对多（many-to-many）</p></blockquote><ul><li>定义：要表示多对多关系，必须创建第三个表，该表通常称为 <strong>联接表</strong> ，它将多对多关系划分为两个一对多关 系。将这两个表的主键都插入到第三个表中。</li><li>举例： <ul><li>学生和课程（一个学生可以选多门课程，一个课程可以被多名学生选择）：学生表、课程表、学生选课信息表</li><li>产品和订单（一个产品可以出现在多个订单中，一个订单可以有多个产品）：产品表、订单表、订单明细表</li></ul></li></ul><blockquote><p>自我引用(Self reference)</p></blockquote><ul><li>举例：员工表中属性：员工编号，员工姓名，员工主管编号，...。其中员工主管编号就是员工主管的员工编号。表中字段指向了另一个字段。</li></ul>",4);function E(k,q){const e=a("front");return c(),r("div",null,[_,l("ul",null,[d,h,l("li",null,[o(e,{style:{background:"yellow"}},{default:n(()=>[t("两种建表原则")]),_:1}),t("： "),p])]),g,l("ul",null,[m,b,l("li",null,[o(e,{style:{background:"yellow"}},{default:n(()=>[t("一对多建表原则")]),_:1}),t("：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键")])]),f])}const B=s(u,[["render",E],["__file","03_关系型数据库设计原则.html.vue"]]),v=JSON.parse('{"path":"/static/tang/mysql/03_%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","title":"3 关系型数据库设计原则","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"3.1 表、记录、字段","slug":"_3-1-表、记录、字段","link":"#_3-1-表、记录、字段","children":[]},{"level":2,"title":"3.2 表的关联关系","slug":"_3-2-表的关联关系","link":"#_3-2-表的关联关系","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/mysql/03_关系型数据库设计原则.md"}');export{B as comp,v as data};
