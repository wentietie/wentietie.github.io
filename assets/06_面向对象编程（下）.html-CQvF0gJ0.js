import{_ as t,r as c,o as i,c as o,e as n,a as l,w as p,d as s,b as e}from"./app-CQavEA7Q.js";const u="/assets/06_%E8%AE%BE%E7%BD%AEmain%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0-CUcs1ep7.png",d="/assets/06_%E6%89%93%E5%8D%B0main%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0-B9Q_nebG.png",k="/assets/06_%E8%AE%BE%E7%BD%AEmain%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B02-DbOvgEra.png",r={},v=n("h1",{id:"_6-面向对象编程-下",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-面向对象编程-下"},[n("span",null,"6 面向对象编程（下）")])],-1),m=n("h2",{id:"_6-1-关键字static",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-1-关键字static"},[n("span",null,"6.1 关键字static")])],-1),b=n("blockquote",null,[n("p",null,"static修饰属性：静态变量")],-1),y=n("li",null,[n("p",null,"属性，按是否使用static修饰，又分为："),n("ul",null,[n("li",null,"静态属性 （类变量）：我们创建了类的多个对象，多个对象共享同一个静态变量。当对某一个对象修改静态变量时，会导致当其他对象调用该属性时，获得的是被修改过之后的值。"),n("li",null,"非静态属性（实例变量）：我们创建了类的多个对象，每一个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会对其他对象的同一个属性值修改。")])],-1),h=n("p",null,"static修饰属性的其他说明：",-1),_=n("li",null,[n("p",null,[s("静态变量随着类的加载而加载，可以通过"),n("code",null,"类.静态变量"),s("的方式使用。")])],-1),w=e("<li><p>调用方法</p><table><thead><tr><th></th><th>类变量（静态属性）</th><th>实例变量（非静态属性）</th></tr></thead><tbody><tr><td>类</td><td>✔</td><td>✘</td></tr><tr><td>对象</td><td>✔</td><td>✔</td></tr></tbody></table></li>",1),g=n("blockquote",null,[n("p",null,"static修饰方法（静态方法）")],-1),f=e("<li><p>随着类的加载而加载，可以通过<code>类.静态方法(形参列表)</code>的方式调用</p></li><li><p>调用方法</p><table><thead><tr><th></th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类</td><td>✔</td><td>✘</td></tr><tr><td>对象</td><td>✔</td><td>✔</td></tr></tbody></table></li>",2),q=e('<blockquote><p>static注意点</p></blockquote><ul><li>静态方法中，不能使用this和super关键字</li><li>关于静态属性和静态方法的使用，可以从声明周期的角度去理解</li></ul><blockquote><p>static使用场景</p></blockquote><ul><li>static属性：当属性可以被多个对象所共享，不会随着对象的不同而不同</li><li>static方法： <ul><li>操作静态属性的方法，通常被设置为static的</li><li>工具类的方法，习惯上声明为static的。如Math、Arrays、Collections等工具类中的方法</li></ul></li></ul><h2 id="_6-2-static应用之单例设计模式" tabindex="-1"><a class="header-anchor" href="#_6-2-static应用之单例设计模式"><span>6.2 static应用之单例设计模式</span></a></h2><blockquote><p>设计模型</p></blockquote><ul><li>定义：在大量的实践中总结和理论化之后优选的代码结构、编程风格，以及解决问题的思考方式。</li></ul><blockquote><p>设计模式分类（共23个）</p></blockquote><ul><li>创造型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</li><li>结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</li><li>行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</li></ul><blockquote><p>单例模式</p></blockquote>',10),S=n("li",null,[n("p",null,"定义：采取一定的方法，保证在整个软件系统中，某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。")],-1),j=n("p",null,"实现思路：",-1),B=e(`<li><p>实现方式</p><ul><li><p>饿汉式</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>grammer<span class="token punctuation">.</span></span><span class="token class-name">Singleton</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 单例模式的饿汉式实现</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2022/10/20 10:25</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Bank</span> bank2 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1.私有化构造器</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2.内部创建类对象，并声明为静态的</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3.创建静态公共方法，返回对象实例</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>懒汉式</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>grammer<span class="token punctuation">.</span></span><span class="token class-name">Singleton</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 单例模式的懒汉式实现</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2022/10/20 10:30</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Order</span> order1 <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Order</span> order2 <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1 <span class="token operator">==</span> order2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 1.私有化构造器</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2.声明静态的当前类的对象，没有初始化</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3.创建静态公共方法，返回对象实例</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>区分饿汉式和懒汉式</p><ul><li>饿汉式： <ul><li>好处：天生线程安全</li><li>坏处：对象加载时间过长</li></ul></li><li>懒汉式： <ul><li>好处：延迟对象的创建</li><li>坏处：以上写法是线程不安全的（到多线程内容的时候，再修改）</li></ul></li></ul></li>`,2),x=e(`<blockquote><p>单例模式的优点</p></blockquote><p>减少内存的开销</p><blockquote><p>单例模式举例</p></blockquote><ul><li>java.lang.Runtime（饿汉式）</li></ul><blockquote><p>单例模式应用场景</p></blockquote><ul><li>网站的计数器</li><li>应用程序的日志应用</li><li>数据库连接池</li><li>读取配置文件的类</li><li>Application</li><li>Windows的Task Manager（任务管理器）</li><li>Windows的Recycle Bin（回收站）</li></ul><h2 id="_6-3-理解main方法的语法" tabindex="-1"><a class="header-anchor" href="#_6-3-理解main方法的语法"><span>6.3 理解main方法的语法</span></a></h2><ul><li><p>main()方法是程序的入口</p></li><li><p>main()也是一个普通的静态方法</p><p>可以通过<code>类名.main(参数)</code>的方式被调用</p></li><li><p>main()可以作为和控制台交互的方式（之前使用的是Scanner）</p><ul><li><p>使用idea给main()方法传参</p><ul><li><p>编写代码，打印main()方法接收的参数：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practise</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置参数：</p><p><img src="`+u+'" alt=""></p></li><li><p>右键运行，控制台即可输出参数：</p><p><img src="'+d+'" alt=""></p></li></ul></li><li><p>使用cmd给main()方法传参：</p><ul><li><p>代码如上</p></li><li><p>运行</p><p><img src="'+k+`" alt=""></p></li></ul></li></ul></li></ul><h2 id="_6-4-类的成员之四-代码块" tabindex="-1"><a class="header-anchor" href="#_6-4-类的成员之四-代码块"><span>6.4 类的成员之四：代码块</span></a></h2><blockquote><p>作用</p></blockquote><p>用来初始化类、对象</p><blockquote><p>修饰符</p></blockquote><p>代码块只能使用static来修饰</p><blockquote><p>分类</p></blockquote><ul><li>静态代码块 <ul><li>随着类的加载而执行，且只执行一次</li><li>作用：初始化类的信息</li><li>静态代码块的执行时间先与非静态代码块的执行时间</li><li>静态代码块之间的执行顺序是按照代码编写的先后顺序执行</li><li>不可以调用非静态结构（属性和方法）</li></ul></li><li>非静态代码块 <ul><li>随着对象的创建而执行，且没创建一个对象，就会执行一次</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>非静态代码块之间的执行顺序是按照代码编写的先后顺序执行</li></ul></li></ul><blockquote><p>属性赋值的顺序</p></blockquote><p>默认初始化 -&gt; 显示初始化/代码块-&gt; 构造器中赋值 -&gt; 通过“对象.方法”或“对象.属性”的方式赋值</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 此时创建的Order对象的orderId为2</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> orderId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        orderId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 此时代码不报错，创建的Order2对象的orderId为1</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Order2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        orderId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">int</span> orderId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-4-关键字final" tabindex="-1"><a class="header-anchor" href="#_6-4-关键字final"><span>6.4 关键字final</span></a></h2><blockquote><p>作用</p></blockquote><p>可以用来修饰：</p>`,21),E=n("ul",null,[n("li",null,[n("p",null,"修饰属性：可以赋值的位置有：显示初始化、代码块中初始化、构造器中初始化")]),n("li",null,[n("p",null,"修饰局部变量："),n("p",null,"尤其是修饰形参时，表明此形参时一个常量，只能在方法体内使用，不能修改")])],-1),O=n("blockquote",null,[n("p",null,"static final修饰属性")],-1),P=n("p",null,"被称为全局常量",-1),C=n("h2",{id:"_6-5-抽象类与抽象方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-5-抽象类与抽象方法"},[n("span",null,"6.5 抽象类与抽象方法")])],-1),A=n("blockquote",null,[n("p",null,"关键字abstract的使用")],-1),D=n("p",null,"不能修饰：属性、构造器、私有方法、静态方法、final方法、final类",-1),J=n("blockquote",null,[n("p",null,"抽象类")],-1),I=n("p",null,"被abstract修饰的类叫做抽象类。",-1),T=n("li",null,"抽象类中一定有构造器，便于子类实例化的时候调用",-1),R=n("li",null,"开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作",-1),K=e(`<blockquote><p>抽象方法</p></blockquote><p>被abstract修饰的方法叫抽象方法。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>抽象方法只有方法的声明，没有方法体</li><li>若子类重写了父类中的所有抽象方法后，此子类方可实例化；若子类没有重写父类中的所有抽象方法，则子类也必须声明为一个抽象类</li></ul><blockquote><p>abstract使用注意事项</p></blockquote><ul><li>abstract不能用来修饰属性、构造器等结构</li><li>abstract不能用来修饰private方法、static方法、final方法、final类</li></ul><blockquote><p>抽象类的匿名子类</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 定义抽象类Person</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, fun3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 测试类</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 定义匿名子类</span></span>
<span class="line">        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, fun1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">    		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, fun2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 创建匿名子类的匿名对象</span></span>
<span class="line">        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, fun1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">    		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, fun2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, method&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-6-abstract应用之模板方法设计模式" tabindex="-1"><a class="header-anchor" href="#_6-6-abstract应用之模板方法设计模式"><span>6.6 abstract应用之模板方法设计模式</span></a></h2><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><blockquote><p>解决的问题</p></blockquote>`,11),F=n("li",null,"当功能内部一部分实现是确定的，一部分实现是不确定的。此时可以吧不确定的部分暴露出去，让子类去实现。",-1),N=n("span",{style:{color:"red"}},"算法",-1),M=e('<blockquote><p>应用举例</p></blockquote><ul><li>数据库访问的链接</li><li>Junit单元测试</li><li>JavaWeb的Servlet中doGet、doPost方法</li><li>Hibernate中模板程序</li><li>Spring中JDBCTemplate、HibernateTemplate等</li></ul><h2 id="_6-7-接口" tabindex="-1"><a class="header-anchor" href="#_6-7-接口"><span>6.7 接口</span></a></h2><blockquote><p>定义接口中的成员</p></blockquote><ul><li>JDK7及以前：只能定义全局常量和抽象方法 <ul><li>全局常量：public static final修饰的变量。但是public static final可以省略不写</li><li>全局方法：public abstract修饰的方法。但是public static可以省略不写</li></ul></li><li>JDK8及以后：可以定义全局常量、抽象方法、静态方法、默认方法</li></ul><blockquote><p>接口使用注意事项</p></blockquote>',6),V=n("span",{style:{color:"red"}},"**不能**",-1),W=n("li",null,[s("接口通过让类去实现(implements)的方式来使用。 "),n("ul",null,[n("li",null,"如果实现类实现了接口中所有的抽象方法，则此类可以实例化"),n("li",null,"否则，实现类需要声明为abstract的")])],-1),G=n("li",null,"Java类可以实现多个接口（多个接口之间用“,”隔开）--->弥补了Java单继承的局限性",-1),H=n("li",null,"接口，实际上可以看做是一种规范",-1),z=n("li",null,"从本质上讲，接口是一种特殊的抽象类。",-1),L=n("blockquote",null,[n("p",null,"JDK8中接口新特性")],-1),Q=n("p",null,"JDK8以后，接口既可以定义全局常量、抽象方法，也可以定义静态方法、默认方法。",-1),U=n("li",null,"定义静态方法（public static）：接口中定义的静态方法，只能通过接口来调用",-1),X=n("li",null,"可以通过实现类的对象，调用接口中的默认方法",-1),Y=n("li",null,"实现类可以重写接口的默认方法",-1),Z=n("ul",null,[n("li",null,"如果想解决以上冲突，必须在实现类中重写此方法。")],-1),$=n("li",null,[s("如何在子类（或实现类）的方法中调用父类、接口中被重写的方法？ "),n("ul",null,[n("li",null,[s("调用父类中声明的方法："),n("code",null,"super.方法")]),n("li",null,[s("调用接口中默认的方法："),n("code",null,"接口名.super.方法")])])],-1),nn=e(`<h2 id="_6-8-接口应用之代理模式-proxy" tabindex="-1"><a class="header-anchor" href="#_6-8-接口应用之代理模式-proxy"><span>6.8 接口应用之代理模式（Proxy）</span></a></h2><blockquote><p>概述</p></blockquote><p>代理设计就是为其他对象提供一种代理以控制对这个对象的方法。</p><blockquote><p>代码示例</p></blockquote><p>以明星和他的小助理为例。明星参加面谈会、签合同、订票、唱歌，都需要通过他的小助理来完成。小助理就是明星的一个代理。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 定义代理类对象，实现明星的面谈会、签合同、订票、唱歌功能</span></span>
<span class="line">        <span class="token class-name">Assistant</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        proxy<span class="token punctuation">.</span><span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        proxy<span class="token punctuation">.</span><span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        proxy<span class="token punctuation">.</span><span class="token function">bookTicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        proxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 明星接口</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 面谈会</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 签合同</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 订票</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">bookTicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 唱歌</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 明星（被代理类）</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">RealStar</span> <span class="token keyword">implements</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RealStar confer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RealStar signContract&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RealStar bookTicker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RealStar sing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 明星的助理（代理类）</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Assistant</span> <span class="token keyword">implements</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">RealStar</span> realStar<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token class-name">RealStar</span> realStar<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>realStar <span class="token operator">=</span> realStar<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小助理组织面谈会&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 明星参加面谈会</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>realStar<span class="token punctuation">.</span><span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;面谈会结束后，小助理其他工作...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小助理检查合同&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 明星在合同上签字</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>realStar<span class="token punctuation">.</span><span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小助理给明星订票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 明星唱歌</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>realStar<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>应用场景</p></blockquote><ul><li>安全代理：屏蔽对真是角色的直接访问</li><li>远程代理：通过代理类处理远程方法调用（RMI）</li><li>延迟加载：先加载轻量级的代理对象，真正需要再加载真是对象</li></ul><blockquote><p>分类</p></blockquote><ul><li><p>静态代理（静态定义代理对象）</p></li><li><p>动态代理（动态生成代理类）</p><p>JDK自带的动态代理，需要反射等知识</p></li></ul><h2 id="_6-9-接口应用之工厂模式" tabindex="-1"><a class="header-anchor" href="#_6-9-接口应用之工厂模式"><span>6.9 接口应用之工厂模式</span></a></h2><blockquote><p>概述</p></blockquote><p>工厂模式实现了创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到高灵活性的目的。</p>`,13),sn=n("p",null,"​ 将选择实现类、创建对象统一管理和控制，从而将调用者和实现类解耦。",-1),an=n("blockquote",null,[n("p",null,"体现的原则")],-1),ln=n("ul",null,[n("li",null,"开闭原则（OCP）：软件实体对扩展开放，对修改关闭"),n("li",null,"依赖倒转原则（DIP）：如果A中关联B，那么尽量使得B实现某个接口，然后A与接口发生关系，不与B实现类发生关联关系"),n("li",null,"迪米特法则（LOD）：不和陌生人说话，有事去中介")],-1),pn=n("blockquote",null,[n("p",null,"分类")],-1),en=n("p",null,"一个工厂类，根据方法名或者参数，返回不同的产品。",-1),tn=n("ul",null,[n("li",null,"优点：把调用者和创建者分离，实现了解耦"),n("li",null,"缺点：对于新增产品，需要修改代码。违反了开闭原则")],-1),cn=n("p",null,"一个工厂接口，多个不同工厂接口的实现类，根据不同工厂接口的实现类，返回不同的产品。",-1),on=n("ul",null,[n("li",null,"缺点：并没有真正的避免代码的改动。当添加新产品时，要么将判断逻辑留在抽象工厂的角色里，要么在客户端将具体工厂类写死。")],-1),un=n("ul",null,[n("li",null,"和工厂方法模式的区别：在于需要创建对象的复杂程度上。")],-1),dn=e(`<h2 id="_6-10-类的成员之五-内部类" tabindex="-1"><a class="header-anchor" href="#_6-10-类的成员之五-内部类"><span>6.10 类的成员之五：内部类</span></a></h2><blockquote><p>概述</p></blockquote><p>Java中允许将一个类A生命在另一个类B中，则类A就是内部类，类B称为外部类</p><blockquote><p>分类</p></blockquote><ul><li>成员内部类：分为静态、非静态</li><li>局部内部类：可以定义在方法内、代码块内、构造器内</li></ul><blockquote><p>成员内部类</p></blockquote><ul><li><p>作用：</p><ul><li>一方面，作为外部类的成员： <ul><li>可以调用外部类的属性、方法：<code>外部类名.this.属性/方法</code></li><li>可以被static修饰</li><li>可以被4种不同的权限修饰（外部类的权限修饰符只可以用public和缺省2种）</li></ul></li><li>另一方面，作为一个类： <ul><li>类内可以定义属性、方法、构造器等</li><li>可以被final修饰，表示不能被继承（言外之意，不使用final，可以被继承）</li><li>可以被abstract修饰，表示不能被实例化</li></ul></li></ul></li><li><p>注意点：</p><p>在局部内部类（AA）的方法（show）中，如果调用局部内部类所声明的方法（method）中的局部变量（num），要求此局部变量声明为final(此final在JDK8及之后可省)</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 局部变量</span></span>
<span class="line">        <span class="token comment">// JDK7及之前，必须显示声明为final。JDK8之后，final可省</span></span>
<span class="line">        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>实例化成员内部类对象</p></blockquote><ul><li>实例化静态成员内部类对象：<code>外部类.静态内部类 变量名 = new 外部类.静态内部类();</code></li><li>实例化非静态成员内部类对象：先创建外部类对象，再通过<code>外部类对象实例.new 静态内部类()</code></li><li>例子：</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建静态成员内部类</span></span>
<span class="line">        <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 创建非静态成员内部类</span></span>
<span class="line">        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Person<span class="token punctuation">.</span>Bird</span> bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        bird<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 静态成员内部类</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;卡拉是条狗&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 非静态成员内部类</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是一只小小鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在成员内部类中区分调用外部类的结构</p></blockquote><p>见Bird类的display()方法。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 静态成员内部类</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;卡拉是条狗&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 非静态成员内部类</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是一只小小鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 调用方法的形参</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 调用内部类的属性</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 调用外部类的属性（如果外部类属性是static的，this可省）</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>开发中局部内部类的使用</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 局部内部类</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Comparable</span> <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建了一个实现Comparable接口的局部内部类</span></span>
<span class="line">        <span class="token comment">// 方式1：</span></span>
<span class="line"><span class="token comment">//        class MyComparable implements Comparable {</span></span>
<span class="line"><span class="token comment">//            @Override</span></span>
<span class="line"><span class="token comment">//            public int compareTo(Object o) {</span></span>
<span class="line"><span class="token comment">//                return 0;</span></span>
<span class="line"><span class="token comment">//            }</span></span>
<span class="line"><span class="token comment">//        }</span></span>
<span class="line"><span class="token comment">//        return new MyComparable();</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 方式2：创建了实现Comparable接口的匿名实现类的匿名对象</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function kn(rn,vn){const a=c("front");return i(),o("div",null,[v,m,n("p",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("static可以用来修饰：属性、方法、代码块、内部类")]),_:1})]),b,n("ul",null,[y,n("li",null,[h,n("ul",null,[_,n("li",null,[n("p",null,[s("静态变量的加载"),l(a,{style:{background:"yellow"}},{default:p(()=>[s("早于")]),_:1}),s("对象的创建。")])]),n("li",null,[n("p",null,[s("由于类只会加载一次，所以静态变量在内存中野只会存在一份，存在于"),l(a,{style:{background:"yellow"}},{default:p(()=>[s("方法区的静态域")]),_:1}),s("中。")])]),w])])]),g,n("ul",null,[f,n("li",null,[n("p",null,[s("静态方法"),l(a,{style:{background:"yellow"}},{default:p(()=>[s("不可以")]),_:1}),s("调用非静态方法或属性；非静态方法中，既可以调用静态方法或属性又可以调用非静态方法或属性")])])]),q,n("ul",null,[S,n("li",null,[j,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("将类的构造器的访问权限设置为private")]),_:1})]),n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("在该类中声明一个静态方法，用以返回类内部创建的对象")]),_:1}),s("（原因：构造器私有，外部无法获取对象实例，但类内部可以产生对象实例，所以只能声明一个公有的静态方法以返回类内部创建的对象）")]),n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("该类的变量也必须是静态的")]),_:1}),s("（原因：静态方法只能访问类的静态成员变量）")])])]),B]),x,n("ul",null,[n("li",null,[n("p",null,[s("类："),l(a,{style:{background:"yellow"}},{default:p(()=>[s("final修饰的类不能被其他类所继承。")]),_:1}),s("举例：String类、System类、StringBuffer类")])]),n("li",null,[n("p",null,[s("方法："),l(a,{style:{background:"yellow"}},{default:p(()=>[s("final修饰的方法不能被子类重写。")]),_:1}),s("举例：Object.getClass()")])]),n("li",null,[n("p",null,[s("变量："),l(a,{style:{background:"yellow"}},{default:p(()=>[s("final修饰的变量不能被修改，此时的变量成为“常量”。")]),_:1})]),E])]),O,P,C,A,n("p",null,[s("可以用来修饰的结构："),l(a,{style:{background:"yellow"}},{default:p(()=>[s("类")]),_:1}),s("、"),l(a,{style:{background:"yellow"}},{default:p(()=>[s("方法")]),_:1})]),D,J,I,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("抽象类不能实例化")]),_:1})]),T,R,n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("包含抽象方法的类，一定是抽象类；反之，抽象类中可以没有抽象方法")]),_:1})])]),K,n("ul",null,[F,n("li",null,[s("即"),l(a,{style:{background:"yellow"}},{default:p(()=>[s("在软件开发中实现一个"),N,s("时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同的子类实现。这就是一种模板模式。")]),_:1})])]),M,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("接口中"),V,s("定义构造器。")]),_:1}),s("这意味着接口是不可以实例化的。")]),W,G,n("li",null,[s("当一个Java类既继承类，又实现接口的时候，应该"),l(a,{style:{background:"yellow"}},{default:p(()=>[s("先写继承后写实现")]),_:1})]),n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("接口与接口之间可以继承（extends），且可以多继承")]),_:1})]),n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("接口的具体使用，提现了多态性")]),_:1})]),H,n("li",null,[s("接口的主要用途就是被实现类实现，这称为"),l(a,{style:{background:"yellow"}},{default:p(()=>[s("面向接口编程")]),_:1})]),z]),L,Q,n("ul",null,[U,n("li",null,[s("定义默认方法（public default）： "),n("ul",null,[X,Y,n("li",null,[s("如果子类（或实现类）继承的父类和实现的接口中，声明了同名、同参的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的方法 ---> "),l(a,{style:{background:"yellow"}},{default:p(()=>[s("类优先原则")]),_:1})]),n("li",null,[s("如果实现类实现了多个接口，且这多个接口中定义了同名、同参的默认方法，在实现类没有重写此方法的情况下，编译报错 ---> "),l(a,{style:{background:"yellow"}},{default:p(()=>[s("接口冲突")]),_:1}),Z]),$])])]),nn,n("p",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("本质")]),_:1}),s("：实例化对象时，用工厂方法代理new操作。")]),sn,an,ln,pn,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("简单工厂模式（静态工厂模式）")]),_:1}),s("：用来生产同一等级结构中的任意产品"),en,tn]),n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("工厂方法模式")]),_:1}),s("：用来生产同一等级结构中的固定产品（支持新增任意产品）"),cn,on]),n("li",null,[l(a,{style:{background:"yellow"}},{default:p(()=>[s("抽象工厂模式")]),_:1}),s("：用来生产不同品族的全部产品（对于增加新的产品，无能为力；支持增加产品族）"),un])]),dn])}const bn=t(r,[["render",kn],["__file","06_面向对象编程（下）.html.vue"]]),yn=JSON.parse('{"path":"/static/tang/java2/06_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89.html","title":"6 面向对象编程（下）","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.1 关键字static","slug":"_6-1-关键字static","link":"#_6-1-关键字static","children":[]},{"level":2,"title":"6.2 static应用之单例设计模式","slug":"_6-2-static应用之单例设计模式","link":"#_6-2-static应用之单例设计模式","children":[]},{"level":2,"title":"6.3 理解main方法的语法","slug":"_6-3-理解main方法的语法","link":"#_6-3-理解main方法的语法","children":[]},{"level":2,"title":"6.4 类的成员之四：代码块","slug":"_6-4-类的成员之四-代码块","link":"#_6-4-类的成员之四-代码块","children":[]},{"level":2,"title":"6.4 关键字final","slug":"_6-4-关键字final","link":"#_6-4-关键字final","children":[]},{"level":2,"title":"6.5 抽象类与抽象方法","slug":"_6-5-抽象类与抽象方法","link":"#_6-5-抽象类与抽象方法","children":[]},{"level":2,"title":"6.6 abstract应用之模板方法设计模式","slug":"_6-6-abstract应用之模板方法设计模式","link":"#_6-6-abstract应用之模板方法设计模式","children":[]},{"level":2,"title":"6.7 接口","slug":"_6-7-接口","link":"#_6-7-接口","children":[]},{"level":2,"title":"6.8 接口应用之代理模式（Proxy）","slug":"_6-8-接口应用之代理模式-proxy","link":"#_6-8-接口应用之代理模式-proxy","children":[]},{"level":2,"title":"6.9 接口应用之工厂模式","slug":"_6-9-接口应用之工厂模式","link":"#_6-9-接口应用之工厂模式","children":[]},{"level":2,"title":"6.10 类的成员之五：内部类","slug":"_6-10-类的成员之五-内部类","link":"#_6-10-类的成员之五-内部类","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/06_面向对象编程（下）.md"}');export{bn as comp,yn as data};
