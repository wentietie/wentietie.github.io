import{_ as t,r as o,o as c,c as i,e as n,d as s,a as e,w as l,b as p}from"./app-CW2dCZSC.js";const u={},r=p(`<h1 id="_5-面向对象编程-中" tabindex="-1"><a class="header-anchor" href="#_5-面向对象编程-中"><span>5 面向对象编程（中）</span></a></h1><h2 id="_5-1-oop特征二-继承" tabindex="-1"><a class="header-anchor" href="#_5-1-oop特征二-继承"><span>5.1 OOP特征二：继承</span></a></h2><blockquote><p>使用继承的好处</p></blockquote><ul><li>减少了代码的冗余，提高了代码的复用性</li><li>便于功能的扩展</li><li>为之后多态的使用，提供了前提</li></ul><blockquote><p>说明</p></blockquote><p>一旦子类继承了父类，子类就获取到了父类所有的属性和方法。</p><p>特别的，父类中声明为private的属性或方法，子类继承父类之后，仍然认为获取了父类中私有的结构。只是因为封装性的影响，使得子类不能直接调用父类的结构而已。</p><blockquote><p>java.lang.Object类</p></blockquote><ul><li>所有的java类都直接或间接的继承于java.lang.Object类</li></ul><h2 id="_5-2-方法的重写" tabindex="-1"><a class="header-anchor" href="#_5-2-方法的重写"><span>5.2 方法的重写</span></a></h2><blockquote><p>定义</p></blockquote><p>在子类中可以根据需要，对从父类继承来的方法进行改造，也称为方法的<span style="color:red;">覆盖、重置</span>。在程序执行时，子类的方法将覆盖父类的方法。</p><blockquote><p>规则</p></blockquote><ul><li>子类重写的方法必须和父类被重写的方法具有<span style="color:red;">相同的方法名、参数列表</span></li><li>子类重写的方法的<strong>返回值类型</strong><span style="color:red;">不能大于</span>父类被重写方法的返回值类型 <ul><li>父类被重写的方法的返回值是<span style="color:red;">void</span>，则子类重写时返回值也只能是<span style="color:red;">void</span></li><li>父类被重写的方法的返回值是<span style="color:red;">A类</span>，则子类重写时返回值可以是<span style="color:red;">A类或者A类的子类</span></li><li>父类被重写的方法的返回值是<span style="color:red;">基本数据类型</span>，则子类重写时返回值必须是<span style="color:red;">相同的基本数据类型</span></li></ul></li><li>子类重写的方法使用的<strong>访问权限</strong><span style="color:red;">不能小于</span>父类被重写的访问权限 <ul><li>子类不能重写父类的private方法</li></ul></li><li>子类方法抛出的<strong>异常</strong><span style="color:red;">不能大于</span>父类被重写方法的异常</li></ul><blockquote><p>注意</p></blockquote><p>方法的重写针对的是<span style="color:red;">非static方法</span>。因为<span style="color:red;">static方法是属于类的</span>，子类无法覆盖父类方法。</p><h2 id="_5-3-子类对象实例化过程" tabindex="-1"><a class="header-anchor" href="#_5-3-子类对象实例化过程"><span>5.3 子类对象实例化过程</span></a></h2><blockquote><p>从结果来看（继承性）</p></blockquote><p>子类继承父类以后，就获取了父类中声明的属性和方法。</p><p>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</p><blockquote><p>从过程看</p></blockquote><p>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用父类的构造器，进而调用父类的父类的构造器，直到调用了java.lang.Object类中空参构造器为止。正因为加载过所有父类的结构，所以才可以看到内存中有父类的结构，子类对象才可调用。</p><p>说明：虽然创建子类对象时，调用了父类构造器，但是自始至终就创建一个对象，即为new的子类对象。</p><h2 id="_5-4-oop特征三-多态" tabindex="-1"><a class="header-anchor" href="#_5-4-oop特征三-多态"><span>5.4 OOP特征三： 多态</span></a></h2><blockquote><p>理解多态性</p></blockquote><p>多态性可以理解为一个事物的多种形态</p><blockquote><p>什么是多态性</p></blockquote><p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Person Eat&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isSmoking<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Man Eat&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">earn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Man Earn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此为多态</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多态的使用（即虚拟方法的使用）</p></blockquote><p>有了对象的多态性后，我们在<strong>编译期</strong>，只能调用父类中声明的方法。在<strong>运行时</strong>，实际执行的是子类重写的方法。</p><p>总结：编译，看左边；运行，看右边</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此为多态</span></span>
<span class="line">        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此为多态的使用（控制台输出的是【Man Eat】）</span></span>
<span class="line">        <span class="token comment">// p.earn(); // 编译报错，找不到方法（p只能调用Person中声明的方法）</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多态使用的前提</p></blockquote><ul><li>有类的继承关系</li><li>有方法的重写</li></ul><blockquote><p>说明</p></blockquote><ul><li>对象的多态性，只适用于方法，不适用于属性</li></ul><h2 id="_5-5-object类的使用" tabindex="-1"><a class="header-anchor" href="#_5-5-object类的使用"><span>5.5 Object类的使用</span></a></h2><blockquote><p>属性</p></blockquote><p>无</p><blockquote><p>方法</p></blockquote>`,41),d=n("li",null,"x.equlas(null)永远返回false",-1),k=n("li",null,"x.equlas(和x不同类型的对象)永远返回false",-1),m=p("<li>toString()：将对象转为字符串 <ul><li>当输出一个对象的引用时，实际就是调用当前对象的toString()</li><li>Object类中toString()返回的是<code>实体类名（getClass().getName()) + &quot;@&quot; + 对象的hashCode(Integer.toHexString(hashCode()))</code></li><li>String、Date、File、包装类都重写了Object的toString()方法，返回的是各自的“实体内容”</li></ul></li><li>getClass()</li><li>hashCode()：获取Hash码</li><li>clone()</li><li>finalize()</li><li>wait()</li><li>notify()</li><li>notifyAll()</li>",8),v=p('<blockquote><p>构造器</p></blockquote><p>只有一个空参构造器</p><h2 id="_5-6-包装类的使用" tabindex="-1"><a class="header-anchor" href="#_5-6-包装类的使用"><span>5.6 包装类的使用</span></a></h2><blockquote><p>包装类有哪些</p></blockquote><p><code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Boolean</code>、<code>Character</code></p><blockquote><p>装箱</p></blockquote>',6),b=p(`<ul><li><p>数值型的（Byte、Short、Integer、Long、Float、Double）举例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> iNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Float</span> fNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Double</span> dNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token string">&quot;12.3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 以下代码运行会报错</span></span>
<span class="line"><span class="token class-name">Integer</span> iNum2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Boolean额外说明：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b1为true</span></span>
<span class="line"><span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b2为true</span></span>
<span class="line"><span class="token class-name">Boolean</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;TruE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b3为true。转换时忽略大小写了</span></span>
<span class="line"><span class="token class-name">Boolean</span> b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;true123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不会抛异常，b4为false</span></span>
<span class="line"><span class="token class-name">Boolean</span> b5<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>拆箱</p></blockquote>`,2),g=p(`<p>调用包装类Xxx的xxxValue()方法，如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Float</span> fNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> f <span class="token operator">=</span> fNum<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>自动装箱与自动拆箱</p></blockquote>`,3),h=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 自动装箱</span></span>
<span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> iNum <span class="token operator">=</span> num<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自动拆箱</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> iNum<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>基本数据类型、包装类 ---&gt; String</p></blockquote><p>因基本数据类型可以自动装箱，包装类可以自动拆箱，所以二者在转为String时，所用到的方法都是一样的。</p><ul><li><p>连接运算</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用String重载的<code>valueOf(Xxx xxx)</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">12.3f</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>String ---&gt; 基本数据类型、包装类</p></blockquote>`,5),y=p(`<ul><li><p>调用<code>parserXxx(String s)</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 可能会报NumberFormatException</span></span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;true1&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 不会报NumberFormatException</span></span>
<span class="line"><span class="token class-name">Boolean</span> b <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// b值为false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>特别的，包装类可以调用自己的<code>toString()</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5-7-单元测试" tabindex="-1"><a class="header-anchor" href="#_5-7-单元测试"><span>5.7 单元测试</span></a></h2><blockquote><p>使用步骤</p></blockquote><ul><li><p>引入JUnit 4</p></li><li><p>创建Java类，进行单元测试</p><p>Java类的要求：此类是public的；此类须提供公共的无参构造器</p></li><li><p>在上述类中声明单元测试方法</p><p>此单元测试方法的要求：方法的权限是public；没有返回值；没有形参</p></li><li><p>单元测试方法上需要使用注解@Test，并导入org.junit.Test</p></li><li><p>运行：双击方法名-&gt;右键，选择Run...或者Debug...</p></li><li><p>执行结果：</p><ul><li>绿条：执行结果没有异常</li><li>红条：执行结果出现异常</li></ul></li></ul>`,4);function _(q,j){const a=o("front");return c(),i("div",null,[r,n("ul",null,[n("li",null,[s("equals()：对象比较 "),n("ul",null,[n("li",null,[s("重写原则 "),n("ul",null,[n("li",null,[e(a,{style:{background:"yellow"}},{default:l(()=>[s("对称性")]),_:1}),s("：如果x.equlas(y)返回true，那么y.equlas(x)返回的也应该是true")]),n("li",null,[e(a,{style:{background:"yellow"}},{default:l(()=>[s("自反性")]),_:1}),s("：x.equlas(x)必须是true")]),n("li",null,[e(a,{style:{background:"yellow"}},{default:l(()=>[s("传递性")]),_:1}),s("：x.equlas(y)返回true，y.equlas(z)返回是true，那么x.equlas(x)也应该是true")]),n("li",null,[e(a,{style:{background:"yellow"}},{default:l(()=>[s("一致性")]),_:1}),s("：如果x.equlas(y)返回true，只要x，y值不变，不管重复比较多少次，结果永远是true")]),d,k])])])]),m]),v,e(a,{style:{background:"yellow"}},{default:l(()=>[s("基本数据类型 ---> 包装类")]),_:1}),b,e(a,{style:{background:"yellow"}},{default:l(()=>[s("包装类 ---> 基本数据类型")]),_:1}),g,e(a,{style:{background:"yellow"}},{default:l(()=>[s("JDK 5.0新特性")]),_:1}),h,n("p",null,[e(a,{style:{background:"yellow"}},{default:l(()=>[s("不能强转")]),_:1}),s("，原因是能够强转的必须是子父类关系的。基本数据类型和包装类都与String不存在子父类关系。")]),y])}const f=t(u,[["render",_],["__file","05_面向对象编程（中）.html.vue"]]),x=JSON.parse('{"path":"/static/tang/java2/05_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%EF%BC%89.html","title":"5 面向对象编程（中）","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"5.1 OOP特征二：继承","slug":"_5-1-oop特征二-继承","link":"#_5-1-oop特征二-继承","children":[]},{"level":2,"title":"5.2 方法的重写","slug":"_5-2-方法的重写","link":"#_5-2-方法的重写","children":[]},{"level":2,"title":"5.3 子类对象实例化过程","slug":"_5-3-子类对象实例化过程","link":"#_5-3-子类对象实例化过程","children":[]},{"level":2,"title":"5.4 OOP特征三： 多态","slug":"_5-4-oop特征三-多态","link":"#_5-4-oop特征三-多态","children":[]},{"level":2,"title":"5.5 Object类的使用","slug":"_5-5-object类的使用","link":"#_5-5-object类的使用","children":[]},{"level":2,"title":"5.6 包装类的使用","slug":"_5-6-包装类的使用","link":"#_5-6-包装类的使用","children":[]},{"level":2,"title":"5.7 单元测试","slug":"_5-7-单元测试","link":"#_5-7-单元测试","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/05_面向对象编程（中）.md"}');export{f as comp,x as data};
