import{_ as t,o as n,c as s,b as a}from"./app-DRxAhH5h.js";const e={},d=a(`<h1 id="python3基础查漏补缺" tabindex="-1"><a class="header-anchor" href="#python3基础查漏补缺"><span>python3基础查漏补缺</span></a></h1><h1 id="_1-运算符" tabindex="-1"><a class="header-anchor" href="#_1-运算符"><span>1.运算符</span></a></h1><p><code>**</code> 幂：<code>a**b</code>表示a的b次方</p><p><code>//</code>取整除--向下取接近商的整数：<code>9//2</code>返回<code>4</code>，<code>-9//2</code>返回<code>-5</code></p><p>​ <strong>注意： <code>//</code>得到的并不一定是整数类型的数，它与分母分子的数据类型有关系</strong></p><p><code>/</code>除法-返回一个浮点数</p><h1 id="_2-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_2-基本数据类型"><span>2.基本数据类型</span></a></h1><p><strong>在Python中，变量就是变量，没有类型。我们所说的”类型“是变量所指的内存中对象的类型。</strong></p><h2 id="_2-1标准数据类型" tabindex="-1"><a class="header-anchor" href="#_2-1标准数据类型"><span>2.1标准数据类型</span></a></h2><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:center;">是否可变</th><th style="text-align:center;">子类型/父级</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left;">Number</td><td style="text-align:center;">不可变</td><td style="text-align:center;">子类型：<br>int、float、bool、complex</td><td>bool类型的变量可以和数字相加；<br>复数用a+bj或complex(a,b)表示；</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:center;">不可变</td><td style="text-align:center;">父级：<br>sequence</td><td>索引值：从左到右，从0开始递增；<br> 从右到左，从-1开始递减<br>字符串截取：<code>变量[头下标:尾下标]</code><br> 含头不含尾<br> 尾下标不写表示直到最后一个元素<br>字符串重复：<code>变量*重复次数</code><br>字符串连接：<code>变量+字符串</code><br>字符串分割：<code>变量.split(&quot;分割规则&quot;)</code><br> 返回结果为List<br>包含：<code>字符串 in 变量</code><br> 返回值为bool类型<br>不包含：<code>字符串 not in 变量</code><br> 返回值为bool类型<br></td></tr><tr><td style="text-align:left;">List</td><td style="text-align:center;">可变</td><td style="text-align:center;">父级：<br>sequence</td><td>有序的对象集合；<br>同一列表中的元素类型可以不同；<br>索引值：从左到右，从0开始递增；<br> 从右到左，从-1开始递减<br>列表截取：<code>变量[头下标:尾下标]</code><br> 含头不含尾<br> 尾下标不写表示直到最后一个元素<br>列表重复：<code>变量*重复次数</code><br>列表连接：<code>变量+列表</code></td></tr><tr><td style="text-align:left;">Tuple</td><td style="text-align:center;">不可变</td><td style="text-align:center;">父级：<br>sequence</td><td>写在()中，元素之间用逗号隔开；<br>元素存取方式：偏移；<br>同一元组中的元素类型可以不同；<br>索引值：从左到右，从0开始递增；<br> 从右到左，从-1开始递减<br>元组截取：<code>变量[头下标:尾下标]</code><br> 含头不含尾<br> 尾下标不写表示直到最后一个元素<br>元组重复：<code>变量*重复次数</code><br>元组连接：<code>变量+元组</code></td></tr><tr><td style="text-align:left;">Set</td><td style="text-align:center;">可变</td><td style="text-align:center;">-</td><td>无序的对象集合；<br>元素存取方式：键；<br>用大括号 <code>{}</code> 或者 <code>set()</code> 函数创建集合；<br>创建空集合必须使用<code>set()</code>;<br>基本功能：进行成员关系测试、<br> 删除重复元素;<br>集合运算：<code>-</code>求差集；<br> \`</td></tr><tr><td style="text-align:left;">Dictionary</td><td style="text-align:center;">可变</td><td style="text-align:center;">-</td><td>是一种映射类型；<br>用<code>{}</code>标识；<br>是一种无序的 <strong>键:值</strong> 的集合；<br>同一个字典中<strong>键</strong>是唯一的；<br>获取指定的键的值：<code>变量[键]</code>；<br>获取所有的键：<code>变量.keys()</code>;<br>获取所有的值：<code>变量.values()</code>;<br>清空字典：<code>变量.clear()</code></td></tr></tbody></table><h2 id="_2-2-python数据类型转换" tabindex="-1"><a class="header-anchor" href="#_2-2-python数据类型转换"><span>2.2 Python数据类型转换</span></a></h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x[,base])</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>complex(real[,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象x转为字符串</td></tr><tr><td>repr(x)</td><td>将对象x转为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式，并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列s转换为一个元祖</td></tr><tr><td>list(s)</td><td>将序列s转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d必须是一个(key, vakue)元组序列</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为他的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个16进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个8进制字符串</td></tr></tbody></table><h2 id="_2-3-数字类型number" tabindex="-1"><a class="header-anchor" href="#_2-3-数字类型number"><span>2.3 数字类型Number</span></a></h2><h3 id="_2-3-1-数学函数" tabindex="-1"><a class="header-anchor" href="#_2-3-1-数学函数"><span>2.3.1 数学函数</span></a></h3><p><em><strong>以下函数调用，均以【math.XX】形式</strong></em></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>fabs(x)</td><td>返回x的绝对值，带小数</td></tr><tr><td>exp(x)</td><td>返回e的x次幂</td></tr><tr><td>ceil(x)</td><td>对x向上取整</td></tr><tr><td>floor(x)</td><td>对x向下取整</td></tr><tr><td>log(x)</td><td>如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td>log10(x)</td><td>返回以10为底x的对数</td></tr><tr><td>acos(x)</td><td>返回x的反余弦弧度值</td></tr><tr><td>asin(x)</td><td>返回x的反正弦弧度值</td></tr><tr><td>atan(x)</td><td>返回x的反正切弧度值</td></tr><tr><td>atan2(y,x)</td><td>返回给定的x及y坐标值的反正切值</td></tr><tr><td>cos(x)</td><td>返回x的余弦值</td></tr><tr><td>sin(x)</td><td>返回x的正弦值</td></tr><tr><td>tan(x)</td><td>返回x的正切值</td></tr><tr><td>degrees(x)</td><td>将弧度转换为角度</td></tr><tr><td>randians(x)</td><td>将角度转换为弧度</td></tr><tr><td>hypot(x,y)</td><td>返回欧几里得范数 sqrt(x*x+y*y)</td></tr></tbody></table><h3 id="_2-3-2-随机函数" tabindex="-1"><a class="header-anchor" href="#_2-3-2-随机函数"><span>2.3.2 随机函数</span></a></h3><p><em><strong>以下函数调用，均以【random.XX】形式</strong></em></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>choice(seq)</td><td>从序列中随机挑选一个元素</td></tr><tr><td>randrange([start,]stop[,step])</td><td>从指定单位内，按指定基数递增的集合中获取一个随机数，基数默认值为1</td></tr><tr><td>random()</td><td>生成[0,1)的随机数</td></tr><tr><td>seed([x])</td><td>改变随机数生成器的种子</td></tr><tr><td>shuffle(lst)</td><td>将序列中的所有元素随机排序</td></tr><tr><td>uniform(x,y)</td><td>随机生成一个实数，范围为[x,y]</td></tr></tbody></table><h2 id="_2-4字符串" tabindex="-1"><a class="header-anchor" href="#_2-4字符串"><span>2.4字符串</span></a></h2><h3 id="_2-4-1-字符串格式化" tabindex="-1"><a class="header-anchor" href="#_2-4-1-字符串格式化"><span>2.4.1 字符串格式化</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;我叫 %s 今年 %d 岁!&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出结果为：我叫 小明 今年 10 岁!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-1-1-字符串格式化符号" tabindex="-1"><a class="header-anchor" href="#_2-4-1-1-字符串格式化符号"><span>2.4.1.1 字符串格式化符号</span></a></h4><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符集ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整数</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无粗豪十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数，可指定小数点后的经度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>同%e</td></tr><tr><td>%g</td><td>%f 和 %e 的缩写</td></tr><tr><td>%G</td><td>%f 和 %E 的缩写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><h4 id="_2-4-1-2-格式化操作符辅助指令" tabindex="-1"><a class="header-anchor" href="#_2-4-1-2-格式化操作符辅助指令"><span>2.4.1.2 格式化操作符辅助指令</span></a></h4><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>定义宽度或者小数点精度</td></tr><tr><td>-</td><td>左对齐</td></tr><tr><td>+</td><td>在正数前面显示加号</td></tr><tr><td>&lt;sp&gt;</td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制数前面显示零(&#39;0&#39;)，在十六进制前面显示&#39;0x&#39;或者&#39;0X&#39;(取决于用的是&#39;x&#39;还是&#39;X&#39;)</td></tr><tr><td>0</td><td>显示的数字前面填充&#39;0&#39;而不是默认的空格</td></tr><tr><td>%</td><td>&#39;%%&#39;输出一个单一的&#39;%&#39;</td></tr><tr><td>(var)</td><td>映射变量(字典参数)</td></tr><tr><td>m.n.</td><td>m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><p>Python2.6 开始，新增了一种格式化字符串的函数<code>str.fromat()</code>，它增强了字符串格式化的功能。</p><h4 id="_2-4-1-3-str-format" tabindex="-1"><a class="header-anchor" href="#_2-4-1-3-str-format"><span>2.4.1.3 str.format()</span></a></h4><p>基本语法是通过<code>{}</code> 和 <code>:</code>来代替以前的 <code>%</code> 。</p><p>format 函数可以接受不限个参数，位置可以不按顺序。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token string">&quot;{} {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span>    <span class="token comment"># 不设置指定位置，按默认顺序</span></span>
<span class="line"><span class="token string">&#39;hello world&#39;</span></span>
<span class="line"> </span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;{0} {1}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置指定位置</span></span>
<span class="line"><span class="token string">&#39;hello world&#39;</span></span>
<span class="line"> </span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;{1} {0} {1}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置指定位置</span></span>
<span class="line"><span class="token string">&#39;world hello world&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-2-三引号" tabindex="-1"><a class="header-anchor" href="#_2-4-2-三引号"><span>2.4.2 三引号</span></a></h3><p>允许一个字符串跨多行。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">errHTML <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span>
<span class="line">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span>
<span class="line">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span>
<span class="line">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span>
<span class="line">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span>
<span class="line">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span>
<span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-3-内置函数" tabindex="-1"><a class="header-anchor" href="#_2-4-3-内置函数"><span>2.4.3 内置函数</span></a></h3><p><em><strong>以下函数调用，均以【变量名.XX】形式</strong></em></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>center(width[, fillchar])</td><td>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格。</td></tr><tr><td>count(sub[, start, end])</td><td>统计子字符sub出现的次数。可选参数为在字符串搜索的开始与结束位置</td></tr><tr><td>decode(encoding, errors)</td><td>以 <em>encoding</em> 指定的编码格式解码字符串，若出错默认报一个 ValueError 的 异 常。<br>errors -- 设置不同错误的处理方案。默认为 &#39;strict&#39;,意为编码错误引起一个UnicodeError。 其他可能得值有 &#39;ignore&#39;, &#39;replace&#39;, &#39;xmlcharrefreplace&#39;, &#39;backslashreplace&#39; 以及通过 codecs.register_error() 注册的任何值</td></tr><tr><td>encode(encoding, errors)</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="_3-时间" tabindex="-1"><a class="header-anchor" href="#_3-时间"><span>3.时间</span></a></h1><h2 id="_3-1-时间戳" tabindex="-1"><a class="header-anchor" href="#_3-1-时间戳"><span>3.1 时间戳</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"> </span>
<span class="line"><span class="token keyword">import</span> time  <span class="token comment"># 引入time模块</span></span>
<span class="line"> </span>
<span class="line">ticks <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span> <span class="token string">&quot;当前时间戳为:&quot;</span><span class="token punctuation">,</span> ticks</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出结果：当前时间戳为: 1459994552.51</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-获取当前时间" tabindex="-1"><a class="header-anchor" href="#_3-2-获取当前时间"><span>3.2 获取当前时间</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"> </span>
<span class="line">localtime <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span> <span class="token string">&quot;本地时间为 :&quot;</span><span class="token punctuation">,</span> localtime</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出结果：本地时间为 : time.struct_time(tm_year=2016, tm_mon=4, tm_mday=7, tm_hour=10, tm_min=3, tm_sec=27, tm_wday=3, tm_yday=98, tm_isdst=0)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-获取格式化时间" tabindex="-1"><a class="header-anchor" href="#_3-3-获取格式化时间"><span>3.3 获取格式化时间</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"> </span>
<span class="line">localtime <span class="token operator">=</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span> <span class="token string">&quot;本地时间为 :&quot;</span><span class="token punctuation">,</span> localtime</span>
<span class="line"><span class="token comment"># 输出结果为：本地时间为 : Thu Apr  7 10:05:21 2016</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 格式化成2016-03-20 11:45:39形式</span></span>
<span class="line"><span class="token keyword">print</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line"> </span>
<span class="line"><span class="token comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span></span>
<span class="line"><span class="token keyword">print</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%a %b %d %H:%M:%S %Y&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">  </span>
<span class="line"><span class="token comment"># 将格式字符串转换为时间戳</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span>
<span class="line"><span class="token keyword">print</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">&quot;%a %b %d %H:%M:%S %Y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间格式化符号：</p><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>%y</td><td>两位数的年份表示(00-99)</td></tr><tr><td>%Y</td><td>四位数的年份表示</td></tr><tr><td>%m</td><td>月份（01-12）</td></tr><tr><td>%d</td><td>月内某一天（01-31）</td></tr><tr><td>%H</td><td>24小时制小时数</td></tr><tr><td>%l</td><td>12小时制小时数</td></tr><tr><td>%M</td><td>分钟数</td></tr><tr><td>%S</td><td>秒</td></tr><tr><td>%a</td><td>本地简化星期名</td></tr><tr><td>%A</td><td>本地完整星期名</td></tr><tr><td>%b</td><td>本地简化月份名</td></tr><tr><td>%B</td><td>本地完整月份名</td></tr><tr><td>%c</td><td>本地相应的日期表示和时间表示</td></tr><tr><td>%j</td><td>年内某一天（001-366）</td></tr><tr><td>%p</td><td>本地A.M.或P.M.的等价符</td></tr><tr><td>%U</td><td>一年中的星期数（00-53），以周日为星期的开始</td></tr><tr><td>%u</td><td>一年中的星期数（0-53），以周日为星期的开始</td></tr><tr><td>%W</td><td>一年中的星期数（00-53），以周一为星期的开始</td></tr><tr><td>%w</td><td>一年中的星期数（0-53），以周一为星期的开始</td></tr><tr><td>%x</td><td>本地对应的日期表示（月/日/年）</td></tr><tr><td>%X</td><td>本地相应的时间表示（时:分:秒）</td></tr><tr><td>%Z</td><td>当前市区的名称</td></tr><tr><td>%%</td><td>%本身</td></tr></tbody></table><h1 id="_4-函数" tabindex="-1"><a class="header-anchor" href="#_4-函数"><span>4.函数</span></a></h1><h2 id="_4-1-参数传递" tabindex="-1"><a class="header-anchor" href="#_4-1-参数传递"><span>4.1 参数传递</span></a></h2><p>与java中的值传递和引用传递类似，因为python中一切都是对象，因此所谓的值传递和引用传递，严格来说就是传不可变类型和传可变类型。</p><table><thead><tr><th>参数类型</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>不可变类型</td><td>Number，String，元组</td><td>函数中修改参数的值，对函数外部的对象本身的值没有影响</td></tr><tr><td>可变类型</td><td>List，字典，Set</td><td>一旦在函数中修改了参数的值，函数外部的对象也会被修改</td></tr></tbody></table><h2 id="_4-2-参数类型" tabindex="-1"><a class="header-anchor" href="#_4-2-参数类型"><span>4.2 参数类型</span></a></h2><table><thead><tr><th>参数类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>必备参数</td><td>必备参数须以正确的顺序传入函数;<br>调用时的数量必须和声明时的一样</td><td><code>&lt;img src=&quot;../images/python3基础查漏补缺/python-base-fun1.png&quot; /&gt;</code></td></tr><tr><td>关键字参数</td><td>使用关键字参数允许函数调用时参数的顺序与声明时不一致</td><td><code>&lt;img src=&quot;../images/python3基础查漏补缺\\python-base-fun2.png&quot; /&gt;</code></td></tr><tr><td>默认参数</td><td>调用函数时，默认参数的值如果没有传入，则被认为是默认值</td><td><code>&lt;img src=&quot;../images/python3基础查漏补缺\\python-base-fun3.png&quot; /&gt;</code></td></tr><tr><td>不定长参数</td><td>一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数;<br>加了星号（*）的变量名会存放所有未命名的变量参数</td><td><code>&lt;img src=&quot;../images/python3基础查漏补缺\\python-base-fun4.png&quot; /&gt;</code></td></tr></tbody></table><h2 id="_4-3-匿名函数" tabindex="-1"><a class="header-anchor" href="#_4-3-匿名函数"><span>4.3 匿名函数</span></a></h2><p><strong>python 使用 lambda 来创建匿名函数。</strong></p><p>1）lambda主体是一个表达式</p><p>2）lambda函数拥有自己的命名空间，且不能访问自己的参数列表之外或者全局命名空间里的参数</p><p>3）语法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>eg.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment">#!/usr/bin/python3</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment"># 可写函数说明</span></span>
<span class="line"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2</span>
<span class="line"> </span>
<span class="line"><span class="token comment"># 调用sum函数</span></span>
<span class="line"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;相加后的值为 : &quot;</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出结果：相加后的值为 : 30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-return-语句" tabindex="-1"><a class="header-anchor" href="#_4-4-return-语句"><span>4.4 return 语句</span></a></h2><p><code>return [表达式]</code>语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。</p><h2 id="_4-5强制位置参数" tabindex="-1"><a class="header-anchor" href="#_4-5强制位置参数"><span>4.5强制位置参数</span></a></h2><p>python 3.8新语法</p>`,64),r=[d];function l(p,i){return n(),s("div",null,r)}const c=t(e,[["render",l],["__file","1.html.vue"]]),u=JSON.parse('{"path":"/static/tang/Python/1.html","title":"python3基础查漏补缺","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"2.1标准数据类型","slug":"_2-1标准数据类型","link":"#_2-1标准数据类型","children":[]},{"level":2,"title":"2.2 Python数据类型转换","slug":"_2-2-python数据类型转换","link":"#_2-2-python数据类型转换","children":[]},{"level":2,"title":"2.3 数字类型Number","slug":"_2-3-数字类型number","link":"#_2-3-数字类型number","children":[{"level":3,"title":"2.3.1 数学函数","slug":"_2-3-1-数学函数","link":"#_2-3-1-数学函数","children":[]},{"level":3,"title":"2.3.2  随机函数","slug":"_2-3-2-随机函数","link":"#_2-3-2-随机函数","children":[]}]},{"level":2,"title":"2.4字符串","slug":"_2-4字符串","link":"#_2-4字符串","children":[{"level":3,"title":"2.4.1 字符串格式化","slug":"_2-4-1-字符串格式化","link":"#_2-4-1-字符串格式化","children":[]},{"level":3,"title":"2.4.2 三引号","slug":"_2-4-2-三引号","link":"#_2-4-2-三引号","children":[]},{"level":3,"title":"2.4.3 内置函数","slug":"_2-4-3-内置函数","link":"#_2-4-3-内置函数","children":[]}]},{"level":2,"title":"3.1 时间戳","slug":"_3-1-时间戳","link":"#_3-1-时间戳","children":[]},{"level":2,"title":"3.2 获取当前时间","slug":"_3-2-获取当前时间","link":"#_3-2-获取当前时间","children":[]},{"level":2,"title":"3.3 获取格式化时间","slug":"_3-3-获取格式化时间","link":"#_3-3-获取格式化时间","children":[]},{"level":2,"title":"4.1 参数传递","slug":"_4-1-参数传递","link":"#_4-1-参数传递","children":[]},{"level":2,"title":"4.2 参数类型","slug":"_4-2-参数类型","link":"#_4-2-参数类型","children":[]},{"level":2,"title":"4.3 匿名函数","slug":"_4-3-匿名函数","link":"#_4-3-匿名函数","children":[]},{"level":2,"title":"4.4 return 语句","slug":"_4-4-return-语句","link":"#_4-4-return-语句","children":[]},{"level":2,"title":"4.5强制位置参数","slug":"_4-5强制位置参数","link":"#_4-5强制位置参数","children":[]}],"git":{},"filePathRelative":"static/tang/Python/1.md"}');export{c as comp,u as data};
