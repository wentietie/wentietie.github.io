import{_ as s,o as e,c as n,b as a}from"./app-CQavEA7Q.js";const l={},i=a(`<h1 id="_11-数据处理之增删改" tabindex="-1"><a class="header-anchor" href="#_11-数据处理之增删改"><span>11 数据处理之增删改</span></a></h1><h2 id="_11-1-插入数据" tabindex="-1"><a class="header-anchor" href="#_11-1-插入数据"><span>11.1 插入数据</span></a></h2><blockquote><p>为表的所有字段插入数据</p></blockquote><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">INSERT INTO 表名</span>
<span class="line">VALUES (value1, value2, value3, ...);  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>值列表中值的顺序必须和表中字段定义的顺序保持一致</strong></p><blockquote><p>为表中指定的字段插入数据</p></blockquote><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">INSERT INTO 表名(column1 [, column2, column3, ...])</span>
<span class="line">VALUES (value1 [, value2, value3, ...]);  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>INSERT字句中的列名顺序可以随意，但值列表中值的顺序必须和其保持一致</strong></p><blockquote><p>同时插入多条数据</p></blockquote><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">INSERT INTO 表名</span>
<span class="line">VALUES </span>
<span class="line">	(value1, value2, value3, ...),</span>
<span class="line">	(value1, value2, value3, ...),</span>
<span class="line">	(value1, value2, value3, ...),</span>
<span class="line">	...</span>
<span class="line">	;  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">INSERT INTO 表名(column1 [, column2, column3, ...])</span>
<span class="line">VALUES </span>
<span class="line">	(value1 [, value2, value3, ...]),</span>
<span class="line">	(value1 [, value2, value3, ...]),</span>
<span class="line">	(value1 [, value2, value3, ...]),</span>
<span class="line">	...</span>
<span class="line">	;  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>将查询结果插入到表中</p></blockquote><p><strong>不必写VALUES字句</strong></p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">INSERT INTO 表1(column1 [, column2, column3, ...])</span>
<span class="line">SELECT column1 [, column2, column3, ...] # 查询的字段一定要与添加到的表的字段一一对应</span>
<span class="line">FROM 表2</span>
<span class="line">WHERE ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：表1中要添加数据的字段的长度不能低于表2中查询的字段的长度。否则，就有添加不成功的风险。</p><blockquote><p>小结：插入多条数据 VS 多个单行插入</p></blockquote><p>同时插入多条数据比多个单行插入<strong>效率更高</strong>。因为MySQL在执行单条插入语句时比使用多条插入语句快，所以<strong>在插入多条记录时，最好选择使用一个INSERT语句同时插入多条数据</strong>。</p><h2 id="_11-2-更新数据" tabindex="-1"><a class="header-anchor" href="#_11-2-更新数据"><span>11.2 更新数据</span></a></h2><p>如果需要回滚数据，需要保证在DML之前，进行设置：<strong>SET AUTOCOMMIT = FALSE;</strong></p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">UPDATE 表名</span>
<span class="line">SET 列名1 = 新值1 [, 列名2 = 新值2, ...]</span>
<span class="line">[WHERE 查询条件];</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改数据时，是可能存在不成功的情况的。（可能是由于约束的影响造成的）</p><h2 id="_11-3-删除数据" tabindex="-1"><a class="header-anchor" href="#_11-3-删除数据"><span>11.3 删除数据</span></a></h2><p>如果需要回滚数据，需要保证在DML之前，进行设置：<strong>SET AUTOCOMMIT = FALSE;</strong></p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">DELETE </span>
<span class="line">FROM 表名</span>
<span class="line">[WHERE 查询条件];</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果省略查询条件，表示将表中的数据全部删除。</strong></p><p>在删除数据时，也有可能因为约束的影响，导致删除失败。</p><h2 id="_11-4-mysql8新特性-计算列" tabindex="-1"><a class="header-anchor" href="#_11-4-mysql8新特性-计算列"><span>11.4 MySQL8新特性：计算列</span></a></h2><blockquote><p>定义</p></blockquote><p>计算列，就是指某一列的值是通过别的列计算得来的。是在创建表的时候来定义计算列</p><blockquote><p>举例</p></blockquote><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">CREATE TABLE tb1(</span>
<span class="line">id INT,</span>
<span class="line">a INT,</span>
<span class="line">b INT,</span>
<span class="line">c INT GENERATED ALWAYS AS (a + b) VIRTUAL # 字段c即为计算列</span>
<span class="line">);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),d=[i];function c(t,r){return e(),n("div",null,d)}const u=s(l,[["render",c],["__file","11_数据的增删改.html.vue"]]),m=JSON.parse('{"path":"/static/tang/mysql/11_%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9.html","title":"11 数据处理之增删改","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"11.1 插入数据","slug":"_11-1-插入数据","link":"#_11-1-插入数据","children":[]},{"level":2,"title":"11.2 更新数据","slug":"_11-2-更新数据","link":"#_11-2-更新数据","children":[]},{"level":2,"title":"11.3 删除数据","slug":"_11-3-删除数据","link":"#_11-3-删除数据","children":[]},{"level":2,"title":"11.4 MySQL8新特性：计算列","slug":"_11-4-mysql8新特性-计算列","link":"#_11-4-mysql8新特性-计算列","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/mysql/11_数据的增删改.md"}');export{u as comp,m as data};
