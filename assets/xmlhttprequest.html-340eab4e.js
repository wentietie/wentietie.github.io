import{_ as n,p as t,q as s,a1 as a}from"./framework-5866ffd3.js";const e={},p=a(`<h1 id="xmlhttprequest-fetch和axios" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-fetch和axios" aria-hidden="true">#</a> XMLHttpRequest,fetch和axios</h1><h2 id="xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest" aria-hidden="true">#</a> XMLHttpRequest</h2><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>onreadystatechange</td><td>方法，当readyState属性发生变化时触发</td></tr><tr><td>readyState</td><td>一个短整型数字，代表请求的状态码</td></tr><tr><td>response</td><td>返回响应体</td></tr><tr><td>responseText</td><td>返回DOMString，是一个响应文本，包含请求的响应。失败时是null</td></tr><tr><td>responseType</td><td>响应的类型</td></tr><tr><td>status</td><td>代表响应的状态，即浏览器状态码</td></tr><tr><td>statusText</td><td>响应状态文本</td></tr><tr><td>timeout</td><td>请求的最大请求时间</td></tr><tr><td>upload</td><td>代表上传进度</td></tr><tr><td>abort</td><td>方法，用于中止请求</td></tr><tr><td>open</td><td>方法，初始化请求。只能在js代码中使用，如果在native code中初始化，请使用openRequest（）</td></tr><tr><td>send</td><td>方法，发送请求</td></tr><tr><td>setRequestHeader</td><td>方法，设置请求头，必须在open和send之间进行设置</td></tr><tr><td></td><td></td></tr></tbody></table><p>readyState说明</p><table><thead><tr><th>值</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>0</code></td><td><code>UNSENT</code></td><td>代理被创建，但尚未调用 open() 方法。</td></tr><tr><td><code>1</code></td><td><code>OPENED</code></td><td><code>open()</code> 方法已经被调用。</td></tr><tr><td><code>2</code></td><td><code>HEADERS_RECEIVED</code></td><td><code>send()</code> 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td><code>3</code></td><td><code>LOADING</code></td><td>下载中； <code>responseText</code> 属性已经包含部分数据。</td></tr><tr><td><code>4</code></td><td><code>DONE</code></td><td>下载操作已完成。</td></tr></tbody></table><p>实现一个简单的ajax</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> <span class="token punctuation">{</span>
           	<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
           	<span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
           	<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    		success<span class="token punctuation">,</span>
            fail
           <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">fail</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现一个简单的fetch</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从url到页面渲染的全过程</p><ol><li><p>DNS域名接续</p><p>DNS服务器解析域名，获取ip地址</p></li><li><p>三次握手</p><p>进行tcp连接</p><p>第一次：客户端给服务端发送一个SYN报文，并指定初始化序列号。服务端收到时会得到客户端的发送能力和服务端的接受能力正常的结论</p><p>第二次：服务端收到报文后回应答一个报文给客户端。客户端收到后，会得到服务端的发送能力，接受能力 客户端的接受能力正常。</p><p>第三次：客户端再次发送一个报文。服务端收到后确认客户端的接受能力正常</p><p>三次握手目的：确认客户端和服务端确认对方的发送和接受能力是否正常</p></li><li><p>浏览器发送http请求</p></li><li><p>服务器处理http请求</p></li><li><p>浏览器解析并渲染界面</p><ol><li>解析html，构建DOM树</li><li>解析css，生成css规则树</li><li>合并DOM树和CSS规则，生成render树</li><li>布局render树，进行各元素的尺寸位置的计算</li><li>回值render树，回值页面像素信息</li></ol></li><li><p>断开连接 4次挥手</p></li></ol>`,11),o=[p];function c(d,l){return t(),s("div",null,o)}const r=n(e,[["render",c],["__file","xmlhttprequest.html.vue"]]);export{r as default};
