import{_ as p,r as o,o as c,c as i,e as n,a as l,w as t,d as s,b as e}from"./app-CW2dCZSC.js";const u="/assets/04_%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90-o_kaB5pV.png",d="/assets/04_%E7%BC%96%E8%AF%91%E4%B8%8D%E9%80%9A%E8%BF%87-DVopr35w.png",r="/assets/04_UML%E7%B1%BB%E5%9B%BE%E8%A7%A3%E6%9E%90-DbEJfrGG.png",k={},v=e('<h1 id="_4-面向对象编程-上" tabindex="-1"><a class="header-anchor" href="#_4-面向对象编程-上"><span>4 面向对象编程（上）</span></a></h1><h2 id="_4-1-面向过程与面向对象" tabindex="-1"><a class="header-anchor" href="#_4-1-面向过程与面向对象"><span>4.1 面向过程与面向对象</span></a></h2><blockquote><p>面向过程POP与面向对象OOP</p></blockquote><ul><li>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。</li><li>面向对象：将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</li></ul><blockquote><p>面向对象三大特征</p></blockquote><ul><li>继承</li><li>封装</li><li>多态</li></ul><h2 id="_4-2-内存解析" tabindex="-1"><a class="header-anchor" href="#_4-2-内存解析"><span>4.2 内存解析</span></a></h2><p><img src="'+u+'" alt=""></p>',8),h=n("span",{style:{color:"red"}},"对象实例",-1),m=n("p",null,"所有的对象实例和数组都要在堆上分配（Java虚拟机规范中如此描述）",-1),b=n("span",{style:{color:"red"}},"局部变量",-1),_=n("p",null,"局部变量表存放了编译期可知长度的各种基本数据类型、对象引用类型（reference类型，值为对象在堆内的首地址）。方法执行完，自动释放。",-1),g=n("p",null,"通常所说的栈，是指虚拟机栈。",-1),y=n("span",{style:{color:"red"}},"已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码",-1),w=e(`<h2 id="_4-3-属性和局部变量的对比" tabindex="-1"><a class="header-anchor" href="#_4-3-属性和局部变量的对比"><span>4.3 属性和局部变量的对比</span></a></h2><blockquote><p>相同点</p></blockquote><ul><li>定义变量的格式相同：数据类型 变量名 = 变量值</li><li>都是先声明，后使用</li><li>变量都有其对应的作用域</li></ul><blockquote><p>不同点</p></blockquote><ul><li>在类中声明的位置不同 <ul><li>属性：直接定义在类的一对{}中</li><li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</li></ul></li><li>关于权限修饰符的不同 <ul><li>属性：可以在声明属性时，指明其权限</li><li>局部变量：不可以使用权限修饰符</li></ul></li><li>默认初始化值的问题 <ul><li>属性：类的属性，根据其类型，都有默认初始化值 <ul><li>整型（byte、short、int、long）：0</li><li>浮点型（float、double）：0.0</li><li>字符型（char）：0 或 &#39;\\u0000&#39;</li><li>布尔型（boolean）：false</li><li>引用数据类型：null</li></ul></li><li>局部变量：没有初始化值</li></ul></li><li>非static的变量/属性在内存中加载的位置不同 <ul><li>属性：存放在堆中</li><li>变量：存放在栈空间中</li></ul></li></ul><h2 id="_4-4-匿名对象" tabindex="-1"><a class="header-anchor" href="#_4-4-匿名对象"><span>4.4 匿名对象</span></a></h2><blockquote><p>理解</p></blockquote><p>new出来的对象没有显示的赋值给一个变量。如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token string">&quot;我是通过匿名对象调用的&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>特点</p></blockquote><p>匿名对象只能使用一次。</p><h2 id="_4-5-方法" tabindex="-1"><a class="header-anchor" href="#_4-5-方法"><span>4.5 方法</span></a></h2><h3 id="_4-5-1-方法的重载" tabindex="-1"><a class="header-anchor" href="#_4-5-1-方法的重载"><span>4.5.1 方法的重载</span></a></h3><blockquote><p>定义</p></blockquote><p>同一个类中，允许有一个以上的同名方法，只要它们的参数类型或者参数个数不同即可。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-2-可变个数的形参" tabindex="-1"><a class="header-anchor" href="#_4-5-2-可变个数的形参"><span>4.5.2 可变个数的形参</span></a></h3>`,17),f=e(`<blockquote><p>具体使用</p></blockquote><ul><li><p>可变个数形参的格式： <code>数据类型 ... 变量名</code></p></li><li><p>当调用可变个数形参的方法时，传入的参数个数可以是0个，1个，2个，...</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Partise</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Partise</span> partise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Partise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        partise<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出show(String)。如果注释了show(String)方法，也不会报错，会去调用show(String ... strs)方法</span></span>
<span class="line">        partise<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出show(String ... strs)</span></span>
<span class="line">        partise<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出show(String ... strs)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;show(String)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;show(String ... strs)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>说明</p></blockquote>`,3),q=n("li",null,[n("p",null,"可变个数形参的方法与本类中方法名相同、形参不同的方法之间构成重载。")],-1),j=n("li",null,[n("p",null,"可变个数形参的方法与本类中方法名相同、形参类型也相同的数组之间不构成重载，二者不能共存。"),n("p",null,[n("img",{src:d,alt:""})])],-1),x=n("h3",{id:"_4-5-3-方法形参的传递机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-5-3-方法形参的传递机制"},[n("span",null,"4.5.3 方法形参的传递机制")])],-1),E=n("ul",null,[n("li",null,[s("如果参数是"),n("span",{style:{color:"red"}},"基本数据类型"),s("，实参传递给形参的是实参的真实存储的"),n("span",{style:{color:"red"}},"数据值"),s("。")]),n("li",null,[s("如果参数是"),n("span",{style:{color:"red"}},"引用数据类型"),s("，实参传递给形参的是实参存储数据的"),n("span",{style:{color:"red"}},"地址值"),s("（包含变量的数据类型）。")])],-1),S=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practise</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Practise</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Practise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        p<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Value</span> v  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">second</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 20 5</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token class-name">Value</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Value</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        v <span class="token operator">=</span> val<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 15 0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-4-递归方法" tabindex="-1"><a class="header-anchor" href="#_4-5-4-递归方法"><span>4.5.4 递归方法</span></a></h3><h2 id="_4-6-oop特征一-封装" tabindex="-1"><a class="header-anchor" href="#_4-6-oop特征一-封装"><span>4.6 OOP特征一：封装</span></a></h2><h3 id="_4-6-1-封装性的体现" tabindex="-1"><a class="header-anchor" href="#_4-6-1-封装性的体现"><span>4.6.1 封装性的体现</span></a></h3><ul><li>属性私有化，同时提供公共的方法来获取和设置属性</li><li>不对外暴露私有方法</li><li>单例模式</li></ul><h3 id="_4-6-2-权限修饰符" tabindex="-1"><a class="header-anchor" href="#_4-6-2-权限修饰符"><span>4.6.2 权限修饰符</span></a></h3>`,6),B=e('<blockquote><p>权限修饰符及其访问权限</p></blockquote><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>✔</td><td></td><td></td><td></td></tr><tr><td>（缺省）</td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td>protected</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr><tr><td>public</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr></tbody></table><blockquote><p>特别说明</p></blockquote><ul><li>class（外部类）的权限修饰符只可以用public和缺省 <ul><li>public类可以在任意地方被访问</li><li>缺省类只可以被同一个包内部的类访问</li></ul></li></ul><h2 id="_4-7-构造器" tabindex="-1"><a class="header-anchor" href="#_4-7-构造器"><span>4.7 构造器</span></a></h2><blockquote><p>特点</p></blockquote><ul><li>名称和类相同</li><li>不声明返回值</li><li>不能被static、final、synchronized、abstract、native修饰</li><li>不能有return语句</li></ul><blockquote><p>说明</p></blockquote><ul><li>如果没有显示的定义，系统默认提供一个无参构造器（默认构造器的权限和类保持一致）</li><li>语法：<code>权限修饰符 类名(形参列表){}</code></li><li>一个类中定义的多个构造器，彼此构成重载</li><li>一旦显示的定义了类的构造器没系统就不会再提供默认的构造器</li></ul><blockquote><p>作用</p></blockquote><ul><li>创建对象</li><li>给对象进行初始化</li></ul><blockquote><p>属性赋值的顺序</p></blockquote><p>默认初始化 -&gt; 显示初始化 -&gt; 构造器中赋值 -&gt; 通过“对象.方法”或“对象.属性”的方式赋值</p><blockquote><p>通过this调用构造器</p></blockquote><ul><li>使用<code>this(形参列表)</code>方式，调用本类中指定的其他构造器</li><li>构造器中不能通过<code>this(形参列表)</code>方式调用自己</li><li>如果一个类中有n个构造器，则最多有n-1个构造器使用了<code>this(形参列表)</code></li><li><code>this(形参列表)</code>必须<span style="color:red;">声明在构造器的首行</span></li><li>构造器内部，最多只能声明一个<code>this(形参列表)</code>，来调用其他构造器</li></ul><blockquote><p>通过super调用构造器</p></blockquote><ul><li>在子类的构造器中通过<code>super(形参列表)</code>显示调用父类的构造器</li><li><code>super(形参列表)</code>的使用必须在子类构造器的首行</li><li><code>super(形参列表)</code>与<code>this(形参列表)</code>只能二选一，不可同时出现</li><li>在构造器首行，没有<code>super(形参列表)</code>或<code>this(形参列表)</code>，则默认调用的是<strong>父类中的空参构造器</strong></li><li>在类的多个构造器中，至少有一个类的构造器中使用了<code>super(形参列表)</code>，调用父类构造器</li></ul><h2 id="_4-8-javabean" tabindex="-1"><a class="header-anchor" href="#_4-8-javabean"><span>4.8 JavaBean</span></a></h2><blockquote><p>定义</p></blockquote><p>JavaBean是Java语言编写的可重用组件</p><blockquote><p>JavaBean的特点</p></blockquote><ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ul><h2 id="_4-9-uml类图" tabindex="-1"><a class="header-anchor" href="#_4-9-uml类图"><span>4.9 UML类图</span></a></h2><p><img src="'+r+`" alt=""></p><h2 id="_4-10-package和import关键字" tabindex="-1"><a class="header-anchor" href="#_4-10-package和import关键字"><span>4.10 package和import关键字</span></a></h2><blockquote><p>一些知识的补充</p></blockquote><ul><li><p>如果使用的类或接口是<code>java.lang</code>包下定义的，或者是<code>本包</code>下定义的，则可省略<code>import</code>结构</p></li><li><p>import <code>xxx.*</code>时，只能导入本包下的全部结构。当使用<code>xxx子包</code>下的结构时，仍需要import</p></li><li><p><code>import static</code>导入指定类或接口中的静态结构（属性或方法）</p><ul><li><p>举例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,27);function P(A,V){const a=o("front");return c(),i("div",null,[v,n("ul",null,[n("li",null,[l(a,{style:{background:"yellow"}},{default:t(()=>[s("堆")]),_:1}),s("：存放"),h,m]),n("li",null,[l(a,{style:{background:"yellow"}},{default:t(()=>[s("栈")]),_:1}),s("：存放"),b,s("等。"),_,g]),n("li",null,[l(a,{style:{background:"yellow"}},{default:t(()=>[s("方法区")]),_:1}),s("：存放"),y,s("等数据")])]),w,n("p",null,[l(a,{style:{background:"yellow"}},{default:t(()=>[s("jdk5.0新特性")]),_:1})]),f,n("ul",null,[q,j,n("li",null,[n("p",null,[s("可变个数形参的方法中，"),l(a,{style:{background:"yellow"}},{default:t(()=>[s("可变形参必须声明在末尾，且最多只能声明一个可变形参")]),_:1})])])]),x,n("p",null,[l(a,{style:{background:"yellow"}},{default:t(()=>[s("值传递机制")]),_:1}),s("（不是引用类型传递机制）")]),E,n("p",null,[l(a,{style:{background:"yellow"}},{default:t(()=>[s("练习题：")]),_:1})]),S,n("p",null,[l(a,{style:{background:"yellow"}},{default:t(()=>[s("封装性的体现，需要权限修饰符来配合。")]),_:1})]),B])}const O=p(k,[["render",P],["__file","04_面向对象编程（上）.html.vue"]]),C=JSON.parse('{"path":"/static/tang/java2/04_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89.html","title":"4 面向对象编程（上）","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"4.1 面向过程与面向对象","slug":"_4-1-面向过程与面向对象","link":"#_4-1-面向过程与面向对象","children":[]},{"level":2,"title":"4.2 内存解析","slug":"_4-2-内存解析","link":"#_4-2-内存解析","children":[]},{"level":2,"title":"4.3 属性和局部变量的对比","slug":"_4-3-属性和局部变量的对比","link":"#_4-3-属性和局部变量的对比","children":[]},{"level":2,"title":"4.4 匿名对象","slug":"_4-4-匿名对象","link":"#_4-4-匿名对象","children":[]},{"level":2,"title":"4.5 方法","slug":"_4-5-方法","link":"#_4-5-方法","children":[{"level":3,"title":"4.5.1 方法的重载","slug":"_4-5-1-方法的重载","link":"#_4-5-1-方法的重载","children":[]},{"level":3,"title":"4.5.2 可变个数的形参","slug":"_4-5-2-可变个数的形参","link":"#_4-5-2-可变个数的形参","children":[]},{"level":3,"title":"4.5.3 方法形参的传递机制","slug":"_4-5-3-方法形参的传递机制","link":"#_4-5-3-方法形参的传递机制","children":[]},{"level":3,"title":"4.5.4 递归方法","slug":"_4-5-4-递归方法","link":"#_4-5-4-递归方法","children":[]}]},{"level":2,"title":"4.6 OOP特征一：封装","slug":"_4-6-oop特征一-封装","link":"#_4-6-oop特征一-封装","children":[{"level":3,"title":"4.6.1 封装性的体现","slug":"_4-6-1-封装性的体现","link":"#_4-6-1-封装性的体现","children":[]},{"level":3,"title":"4.6.2 权限修饰符","slug":"_4-6-2-权限修饰符","link":"#_4-6-2-权限修饰符","children":[]}]},{"level":2,"title":"4.7 构造器","slug":"_4-7-构造器","link":"#_4-7-构造器","children":[]},{"level":2,"title":"4.8 JavaBean","slug":"_4-8-javabean","link":"#_4-8-javabean","children":[]},{"level":2,"title":"4.9 UML类图","slug":"_4-9-uml类图","link":"#_4-9-uml类图","children":[]},{"level":2,"title":"4.10 package和import关键字","slug":"_4-10-package和import关键字","link":"#_4-10-package和import关键字","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/04_面向对象编程（上）.md"}');export{O as comp,C as data};
