import{_ as n,M as i,p as l,q as o,R as a,t as e,N as r,a1 as t}from"./framework-5866ffd3.js";const p="/assets/image-20220127171558841-4163dd7b.png",c="/assets/image-20220127171820634-6b92fe15.png",d="/assets/image-20220209154437564-a6f7f3d4.png",u="/assets/image-20220209154452236-bcac50e2.png",h="/assets/image-20220209151658578-202d402c.png",b="/assets/image-20220209151739496-d296bdb6.png",m="/assets/image-20220209164321092-aace688f.png",g="/assets/image-20220209164434848-278078b5.png",k="/assets/image-20220209164849881-c23b2353.png",_="/assets/image-20220209165620070-4b467a94.png",q="/assets/image-20220209170014814-1cc2314f.png",v="/assets/image-20220209170120507-d8680d0d.png",f="/assets/image-20220209171005236-054f375d.png",x="/assets/12-3ab2e8b9.png",R="/assets/image-20220209174439226-4969413b.png",y="/assets/image-20220209175005801-8df3ce54.png",F="/assets/image-20220209175858695-e6f5f884.png",S="/assets/image-20220209180256860-a5eb979a.png",w="/assets/image-20220209180441253-b655ef6e.png",C="/assets/image-20220209180558252-b6756512.png",M="/assets/image-20220209180819755-5610d9b0.png",Q="/assets/image-20220209180923497-2654f934.png",A="/assets/image-20220210093916467-6edd8e79.png",D="/assets/8-5-1-16444579203281-a08f6a98.png",E="/assets/image-20220210103110838-8f066533.png",P="/assets/image-20220210104913398-0f11c00f.png",B="/assets/image-20220210131410083-7f9350c2.png",I="/assets/image-20220210140826301-69dee4bb.png",N="/assets/image-20220210141144238-92150a9e.png",T="/assets/image-20220210143457921-b5a5ec46.png",G="/assets/image-20220210143938080-848f8ccc.png",L="/assets/image-20220210145521763-09fffe18.png",H="/assets/image-20220210164846034-428fb9c4.png",U="/assets/image-20220210171202166-d78ea6ed.png",Z="/assets/image-20220210173943912-a73c2771.png",j="/assets/image-20220210174208165-6422062d.png",z="/assets/image-20220210175441671-5d625566.png",V={},W=t('<h1 id="微服务学习" tabindex="-1"><a class="header-anchor" href="#微服务学习" aria-hidden="true">#</a> 微服务学习</h1><h1 id="_1-认识微服务" tabindex="-1"><a class="header-anchor" href="#_1-认识微服务" aria-hidden="true">#</a> 1.认识微服务</h1><h2 id="_1-1-分布式架构" tabindex="-1"><a class="header-anchor" href="#_1-1-分布式架构" aria-hidden="true">#</a> 1.1 分布式架构</h2><blockquote><p>定义</p></blockquote><p>根据业务功能对系统进行拆分，每个业务模块的作为独立项目开发，成为一个服务。</p><blockquote><p>优点</p></blockquote><ul><li>降低服务耦合</li><li>有利于服务扩展</li></ul><blockquote><p>分布式架构要考虑的问题</p></blockquote><ul><li>服务拆分粒度？</li><li>服务集群地址如何维护？</li><li>服务之间如何实现远程调用？</li><li>服务健康状态如何感知？</li></ul><h2 id="_1-2-微服务" tabindex="-1"><a class="header-anchor" href="#_1-2-微服务" aria-hidden="true">#</a> 1.2 微服务</h2><blockquote><p>定义</p></blockquote><p>微服务是一种经过良好架构设计的<strong>分布式</strong>架构方案。</p><blockquote><p>特征</p></blockquote><ul><li>==单一职责==：微服务拆分粒度更小，每一个服务对应唯一的业务能力，做到单一职责，避免业务重复开发</li><li>==面向对象==：微服务对外暴露接口</li><li>==自治==：团队独立、技术独立、数据独立、部署独立</li><li>==隔离性强==：服务调用做好隔离、容错、降级，避免出现隔离问题</li></ul><blockquote><p>微服务技术对比</p></blockquote><table><thead><tr><th></th><th>Dubbo</th><th>SpringCloud</th><th>SpringCloudAlibaba</th></tr></thead><tbody><tr><td>注册中心</td><td>zookeeper、Redis</td><td>Eureka、Consul</td><td>Nacos、Eureka</td></tr><tr><td>服务远程调用</td><td>Dobbo协议</td><td>Feign（http协议）</td><td>Dubbo、Feign</td></tr><tr><td>配置中心</td><td>无</td><td>SpringCloudConfig</td><td>SpringCloudConfig、Nacos</td></tr><tr><td>服务网关</td><td>无</td><td>SpringCloudGateway、Zuul</td><td>SpringCloudGateway、Zuul</td></tr><tr><td>服务监控和保护</td><td>dubbo-admin，功能弱</td><td>Hystrix</td><td>Sentinel</td></tr></tbody></table><h2 id="_1-3-springcloud" tabindex="-1"><a class="header-anchor" href="#_1-3-springcloud" aria-hidden="true">#</a> 1.3 SpringCloud</h2><p>目前使用最广泛的微服务架构。</p><h1 id="_2-服务拆分及远程调用" tabindex="-1"><a class="header-anchor" href="#_2-服务拆分及远程调用" aria-hidden="true">#</a> 2.服务拆分及远程调用</h1><h2 id="_2-1-服务拆分注意事项" tabindex="-1"><a class="header-anchor" href="#_2-1-服务拆分注意事项" aria-hidden="true">#</a> 2.1 服务拆分注意事项</h2><ul><li>不同微服务，不要重复开发相同业务。</li><li>微服务数据独立，不要访问其他微服务的数据库。</li><li>微服务可以将自己的业务暴露为接口，供其他服务使用。</li></ul><h2 id="_2-2-服务调用关系" tabindex="-1"><a class="header-anchor" href="#_2-2-服务调用关系" aria-hidden="true">#</a> 2.2 服务调用关系</h2><ul><li><p>==服务提供者==：一次业务中，被其他微服务调用的服务。</p></li><li><p>==服务消费者==：一次业务中，低啊用其他微服务的服务。</p><p>==<strong>提供者与消费者的角色是相对而言的</strong>==：一个服务既可以是消费者，又可以是提供者</p></li></ul><h2 id="_2-3-eureka注册中心" tabindex="-1"><a class="header-anchor" href="#_2-3-eureka注册中心" aria-hidden="true">#</a> 2.3 Eureka注册中心</h2><p>Eureka架构中,微服务角色有两类:</p><ul><li><p>EurekaServer：服务端，注册中心</p><ul><li>作用：记录服务信息，监控客户端心跳</li></ul></li><li><p>EurekaClient：客户端</p><ul><li>Provider：服务提供者 <ul><li>启动时，注册自己的信息到EurekaServer</li><li>每隔30s向EurekaServer发送心跳</li></ul></li><li>Consumer：服务消费者 <ul><li>根据服务名称从EurekaServer拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起调用。</li></ul></li></ul></li></ul><h2 id="_2-4-ribbon负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-4-ribbon负载均衡" aria-hidden="true">#</a> 2.4 Ribbon负载均衡</h2><blockquote><p>Ribbon负载均衡流程</p></blockquote><p><img src="'+p+'" alt="image-20220127171558841"></p><blockquote><p>负载均衡策略</p></blockquote><p>==Ribbon的负载均衡规则是一个叫IRule的接口来定义的，每一个子接口都是一种规则。==</p><p><img src="'+c+`" alt="image-20220127171820634"></p><table><thead><tr><th>内置负载均衡规则类</th><th>规则描述</th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>轮询。Ribbon默认的负载均衡。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器忽略: <br>1.“短路”的服务器。默认情况下，如果一台服务器3次连接失败，就会被设置为“短路”状态。短路状态将持续30s，如果再次连接失败，短路状态持续时间几何级增加。<br> 2.并发数过高的服务器。可以由<code>&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit</code>配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，其权重值越小。这个规则会随机选择服务器，权重值会影响服务器的选择。</td></tr><tr><td>ZoneAvoidanceRule</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略短路服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑。</td></tr><tr><td>RandomRule</td><td>随机选择。</td></tr></tbody></table><blockquote><p>负载均衡两种配置方式</p></blockquote><ul><li><p>在消费者服务的启动类里注入IRule</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RendomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在消费者服务的yaml文件里添加规则</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 服务提供者的服务名</span>
    <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
       <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment"># 负载均衡规则</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>==以上二者的区别==：</p><p>​ 第一种是所有服务的负载均衡策略都是RandomRule；第二种是只有指定服务名（userservice）的服务的负载均衡策略是RandomRule。</p><blockquote><p>Ribbon 策略--饥饿加载</p></blockquote><p>Ribbon默认使用的是<strong>懒加载</strong>。</p><p>==开启饥饿加载==</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启饥饿加载</span>
      <span class="token key atrule">clients</span><span class="token punctuation">:</span> userservice <span class="token comment"># 只对单个服务开启饥饿加载</span>
<span class="token comment">#--------------------------------------------------------------------------------------------      </span>
<span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启饥饿加载</span>
      <span class="token key atrule">clients</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> userservice <span class="token comment"># 对多个服务开启饥饿加载</span>
           goodservice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-nacos注册中心" tabindex="-1"><a class="header-anchor" href="#_2-5-nacos注册中心" aria-hidden="true">#</a> 2.5 Nacos注册中心</h2><h1 id="_7-feign-http客户端" tabindex="-1"><a class="header-anchor" href="#_7-feign-http客户端" aria-hidden="true">#</a> 7.Feign(HTTP客户端)</h1><h2 id="_7-1-feign替代resttemplate" tabindex="-1"><a class="header-anchor" href="#_7-1-feign替代resttemplate" aria-hidden="true">#</a> 7.1 Feign替代RestTemplate</h2><blockquote><p>Feign定义</p></blockquote><p>Feign是一个声明式的http客户端，作用是帮助我们优雅的实现http请求的发现，帮助实现各个微服务内部之间的调用。</p><blockquote><p>使用</p></blockquote><p>Step1. 引入依赖</p><p><img src="`+d+'" alt="image-20220209154437564"></p><p>Step2. 启动类添加Feign启动注解</p><p><img src="'+u+'" alt="image-20220209154452236"></p><p>Step3. 编写Feign客户端</p><p><img src="'+h+'" alt="image-20220209151658578"></p><p>Step4. 测试使用</p><p><img src="'+b+'" alt="image-20220209151739496"></p><h2 id="_7-2-自定义配置" tabindex="-1"><a class="header-anchor" href="#_7-2-自定义配置" aria-hidden="true">#</a> 7.2 自定义配置</h2><blockquote><p>概念</p></blockquote><p><img src="'+m+'" alt="image-20220209164321092"></p><blockquote><p>使用配置文件配置Feign日志</p></blockquote><p><img src="'+g+'" alt="image-20220209164434848"></p><blockquote><p>使用注解配置Feign日志</p></blockquote><p><img src="'+k+'" alt="image-20220209164849881"></p><h2 id="_7-3-feign使用优化" tabindex="-1"><a class="header-anchor" href="#_7-3-feign使用优化" aria-hidden="true">#</a> 7.3 Feign使用优化</h2><blockquote><p>Feign底层客户端实现</p></blockquote><ul><li>URLConnection：默认实现，不支持连接池，性能较差</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池</li></ul><blockquote><p>优化策略</p></blockquote><ul><li>使用连接池代替默认URLConnection</li><li>日志级别，最好使用basic或none</li></ul><blockquote><p>Feign性能优化-连接池配置</p></blockquote><p><img src="'+_+'" alt="image-20220209165620070"></p><h2 id="_7-4-最佳实践" tabindex="-1"><a class="header-anchor" href="#_7-4-最佳实践" aria-hidden="true">#</a> 7.4 最佳实践</h2><blockquote><p>方式一--继承（耦合度比较高）</p></blockquote><p><img src="'+q+'" alt="image-20220209170014814"></p><blockquote><p>方式二--抽取（如果FeignAPI功能比较多，包比较大，orderservice只用到一两个方法，就造成了浪费）</p></blockquote><p><img src="'+v+'" alt="image-20220209170120507"></p><p>方式2的实现难点</p><blockquote><p>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用，解决方法如下：</p></blockquote><p><img src="'+f+'" alt="image-20220209171005236"></p><h1 id="_8-统一网关gateway" tabindex="-1"><a class="header-anchor" href="#_8-统一网关gateway" aria-hidden="true">#</a> 8.统一网关Gateway</h1><h2 id="_8-1-为什么需要网关" tabindex="-1"><a class="header-anchor" href="#_8-1-为什么需要网关" aria-hidden="true">#</a> 8.1 为什么需要网关</h2><blockquote><p>网关功能</p></blockquote><ul><li>对用户请求做身份认证和权限校验</li><li>将用户请求路由到微服务，并实现负载均衡</li><li>对要不过户请求做限流</li></ul><blockquote><p>网关的技术实现</p></blockquote><ul><li>gateway</li><li>zuul</li></ul><p>==对比==：zuul是基于servlet实现，属于阻塞式变成。gateway是基于SPring5中提供的WebFlux，属于响应式变成，具备更好的性能。</p><h2 id="_8-2-gateway快速入门" tabindex="-1"><a class="header-anchor" href="#_8-2-gateway快速入门" aria-hidden="true">#</a> 8.2 gateway快速入门</h2><blockquote><p>搭建步骤</p></blockquote><p><img src="'+x+'" alt="12"></p><blockquote><p>请求流程</p></blockquote><p><img src="'+R+'" alt="image-20220209174439226"></p><blockquote><p>总结-&gt;路由可以配置的内容包括以下几点：</p></blockquote><ul><li>路由id：路由唯一标识</li><li>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名称做负载均衡</li><li>路由断言（predicates）：判断路由规则</li><li>路由过滤器（filters）：对请求或响应做处理</li></ul><h2 id="_8-3-断言工厂" tabindex="-1"><a class="header-anchor" href="#_8-3-断言工厂" aria-hidden="true">#</a> 8.3 断言工厂</h2><blockquote><p>作用</p></blockquote><p>读取用户在配置文件中编写的断言规则，将他们解析出来，并且对请求做出判断</p><blockquote><p>Spring提供的11中基本的Predicate工厂</p></blockquote><p><img src="'+y+'" alt="image-20220209175005801"></p><blockquote><p>After断言工厂的使用</p></blockquote><p><img src="'+F+'" alt="image-20220209175858695"></p><p>==当前是2022年，不符合路由规则，此时访问会报404==</p><h2 id="_8-4-过滤器工厂" tabindex="-1"><a class="header-anchor" href="#_8-4-过滤器工厂" aria-hidden="true">#</a> 8.4 过滤器工厂</h2><h3 id="_8-4-1-路由过滤器gatewayfilter" tabindex="-1"><a class="header-anchor" href="#_8-4-1-路由过滤器gatewayfilter" aria-hidden="true">#</a> 8.4.1 路由过滤器GatewayFilter</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="'+S+'" alt="image-20220209180256860"></p><h3 id="_8-4-2-路由过滤器工厂" tabindex="-1"><a class="header-anchor" href="#_8-4-2-路由过滤器工厂" aria-hidden="true">#</a> 8.4.2 路由过滤器工厂</h3><blockquote><p>过滤器的作用</p></blockquote><ul><li>对路由的请求或响应做加工处理，比如添加请求头</li><li>配置在路由下的过滤器只对当前路由的请求生效（==如果想对所有路由都生效，可以使用defaultFilter==）</li></ul><p>一共30多种。使用时可以参考官网。</p><p><img src="'+w+'" alt="image-20220209180441253"></p><blockquote><p>例子：给所有进入userservice的请求加一个请求头：Truth=Itcast is freeking awesome！</p></blockquote><p><img src="'+C+'" alt="image-20220209180558252"></p><p><img src="'+M+'" alt="image-20220209180819755"></p><blockquote><p>优化：给所有请求都加上请求头：Truth=Itcast is freeking awesome！</p></blockquote><p><img src="'+Q+'" alt="image-20220209180923497"></p><h2 id="_8-5-全局过滤器globalfilter" tabindex="-1"><a class="header-anchor" href="#_8-5-全局过滤器globalfilter" aria-hidden="true">#</a> 8.5 全局过滤器GlobalFilter</h2><blockquote><p>作用</p></blockquote><p>处理一切进入网关的请求和微服务响应，和GatewayFilter的作用一样。==区别==在于GatewayFilter通过配置定义，处理逻辑是固定的；但是GlobalFilter的逻辑需要自己写代码实现。</p><blockquote><p>实现方式</p></blockquote><p><strong>实现GlobalFilter接口。</strong></p><p><img src="'+A+'" alt="image-20220210093916467"></p><blockquote><p>案例：编写一个拦截器，获取请求中的authorization参数。如果用户是admin，放行，否则就拦截。</p></blockquote><p><img src="'+D+'" alt="8-5-1"></p><h2 id="_8-6-过滤器执行顺序" tabindex="-1"><a class="header-anchor" href="#_8-6-过滤器执行顺序" aria-hidden="true">#</a> 8.6 过滤器执行顺序</h2><ul><li>order值越小，执行顺序越靠前</li><li>order值相等时，安装defaultFilter&gt;路由过滤器&gt;GlobalFilter的顺序执行。</li></ul><h2 id="_8-7-跨域问题" tabindex="-1"><a class="header-anchor" href="#_8-7-跨域问题" aria-hidden="true">#</a> 8.7 跨域问题</h2><blockquote><p>定义</p></blockquote><p>浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题。</p><blockquote><p>解决方案</p></blockquote><p>CORS</p><blockquote><p>实现</p></blockquote><p><img src="'+E+'" alt="image-20220210103110838"></p><h1 id="_9-docker" tabindex="-1"><a class="header-anchor" href="#_9-docker" aria-hidden="true">#</a> 9.Docker</h1><h2 id="_9-1-初识docker" tabindex="-1"><a class="header-anchor" href="#_9-1-初识docker" aria-hidden="true">#</a> 9.1 初识Docker</h2><h3 id="_9-1-1-概念" tabindex="-1"><a class="header-anchor" href="#_9-1-1-概念" aria-hidden="true">#</a> 9.1.1 概念</h3><blockquote><p>Docker如何解决大型项目依赖关系复杂、不同组件依赖兼容性的问题？</p></blockquote><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像。</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><blockquote><p>Docker如何解决开发、测试、生产环境有差异的问题？</p></blockquote><p>Docker镜像中包含完整的运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行。</p><h3 id="_9-1-2-docker与虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#_9-1-2-docker与虚拟机的区别" aria-hidden="true">#</a> 9.1.2 Docker与虚拟机的区别</h3><ul><li>Docker是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>Docker体积小，启动速度快，性能好；虚拟机体积大，启动速度慢，性能较差。</li></ul><p><img src="'+P+'" alt="image-20220210104913398"></p><h3 id="_9-1-3-docker架构" tabindex="-1"><a class="header-anchor" href="#_9-1-3-docker架构" aria-hidden="true">#</a> 9.1.3 Docker架构</h3><p><img src="'+B+'" alt="image-20220210131410083"></p><h2 id="_9-2-数据卷" tabindex="-1"><a class="header-anchor" href="#_9-2-数据卷" aria-hidden="true">#</a> 9.2 数据卷</h2><p><img src="'+I+'" alt="image-20220210140826301"></p><p><img src="'+N+'" alt="image-20220210141144238"></p><h2 id="_9-3-目录挂载" tabindex="-1"><a class="header-anchor" href="#_9-3-目录挂载" aria-hidden="true">#</a> 9.3 目录挂载</h2><p>命令和数据卷挂载一致。</p><blockquote><p>目录挂载和数据卷挂载的区别</p></blockquote><p><img src="'+T+'" alt="image-20220210143457921"></p><h2 id="_9-4-镜像" tabindex="-1"><a class="header-anchor" href="#_9-4-镜像" aria-hidden="true">#</a> 9.4 镜像</h2><blockquote><p>定义</p></blockquote><p>镜像是将<strong>应用程序</strong>及其需要的<strong>系统函数库</strong>、<strong>环境</strong>、<strong>配置</strong>、依赖打包而成。</p><blockquote><p>镜像结构</p></blockquote><p>==镜像是分层结构，每一层称为一个Layer==</p><p><img src="'+G+'" alt="image-20220210143938080"></p><h2 id="_9-5-dockercompose" tabindex="-1"><a class="header-anchor" href="#_9-5-dockercompose" aria-hidden="true">#</a> 9.5 DockerCompose</h2><blockquote><p>概念</p></blockquote><ul><li><p>DockerCompose基于Compose文件实现快速部署分布式应用。</p></li><li><p>Compose文件是一个文本文件，通过指令定义急群众的每个容器如何运行。</p><p><img src="'+L+'" alt="image-20220210145521763"></p></li></ul><h1 id="_10-服务异步通讯rabbitmq" tabindex="-1"><a class="header-anchor" href="#_10-服务异步通讯rabbitmq" aria-hidden="true">#</a> 10. 服务异步通讯RabbitMQ</h1><h2 id="_10-1-初始mq" tabindex="-1"><a class="header-anchor" href="#_10-1-初始mq" aria-hidden="true">#</a> 10.1 初始MQ</h2><h3 id="_10-1-1-同步通讯" tabindex="-1"><a class="header-anchor" href="#_10-1-1-同步通讯" aria-hidden="true">#</a> 10.1.1 同步通讯</h3><p>==微服务间基于Feign的调用就属于同步方式。==</p><blockquote><p>优点</p></blockquote><p>时效性强，能够立即得到结果</p><blockquote><p>同步调用的问题</p></blockquote><ul><li><strong>耦合度高</strong>：每次加入新需求，都要改原来的代码</li><li><strong>性能下降</strong>：调用者需要等待提供者响应。如果调用链过程则响应时间等于每次调用的时间之和</li><li><strong>资源浪费</strong>：调用链中的每个服务在等待响应过程中，不能释放请求占用的资源，高并发场景下极度浪费系统资源</li><li><strong>级联失败</strong>：如果提供者出现问题，所有调用方法都会跟着出问题，如同多米诺骨牌，迅速导致整个微服务群故障</li></ul><h3 id="_10-1-2-异步通讯" tabindex="-1"><a class="header-anchor" href="#_10-1-2-异步通讯" aria-hidden="true">#</a> 10.1.2 异步通讯</h3><p>==异步调用常见实现就是事件驱动模式。==</p><p><img src="'+H+'" alt="image-20220210164846034"></p><blockquote><p>优势</p></blockquote><ul><li>服务解耦</li><li>性能提升，吞吐量提高</li><li>服务没有强依赖，不担心级联失败问题</li><li>流量削峰</li></ul><blockquote><p>缺点</p></blockquote><ul><li>依赖于Broker的可靠性、安全性、吞吐能力</li><li>架构复杂了，业务没有明显的流程线，不好追踪管理</li></ul><h3 id="_10-1-3-mq常见框架" tabindex="-1"><a class="header-anchor" href="#_10-1-3-mq常见框架" aria-hidden="true">#</a> 10.1.3 MQ常见框架</h3><blockquote><p>MQ定义</p></blockquote><p>MQ（MessageQueue），存放消息的队列，即时间驱动架构中的Broker。</p><blockquote><p>MQ常见框架对比</p></blockquote><p><img src="'+U+'" alt="image-20220210171202166"></p><h2 id="_10-2-rabbitmq快速入门" tabindex="-1"><a class="header-anchor" href="#_10-2-rabbitmq快速入门" aria-hidden="true">#</a> 10.2 RabbitMQ快速入门</h2><h3 id="_10-2-1-概述" tabindex="-1"><a class="header-anchor" href="#_10-2-1-概述" aria-hidden="true">#</a> 10.2.1 概述</h3><p>==RabbitMQ最擅长的是消息的可靠性、稳定性，以及系统的高可用==</p>',181),O={href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},K=t(`<h4 id="_10-2-1-1-单机部署mq" tabindex="-1"><a class="header-anchor" href="#_10-2-1-1-单机部署mq" aria-hidden="true">#</a> 10.2.1.1 单机部署MQ</h4><p>Step1. 下载RabbitMQ镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull rabbitmq:3-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Step2. 运行MQ容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mq <span class="token punctuation">\\</span>
  <span class="token parameter variable">--hostname</span> mq1 <span class="token punctuation">\\</span> <span class="token comment"># 配置主机名，单机的话可以不设置，但是集群部署必须设置</span>
  <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span>   <span class="token comment"># mq管理平台的端口，提供一个UI界面</span>
  <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\\</span>   <span class="token comment"># 消息接收与发送端口</span>
  <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
  rabbitmq:3-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2-2-rabbitmq概念和结构" tabindex="-1"><a class="header-anchor" href="#_10-2-2-rabbitmq概念和结构" aria-hidden="true">#</a> 10.2.2 RabbitMQ概念和结构</h3><blockquote><p>概念</p></blockquote><ul><li>channel：操作MQ的工具</li><li>exchange：路由消息到队列中</li><li>queue：缓存消息</li><li>virtual host：虚拟主机，是对queue、exchange等资源的逻辑分组</li></ul><blockquote><p>结构</p></blockquote><p><img src="`+Z+'" alt="image-20220210173943912"></p><h2 id="_10-3-常见消息模型" tabindex="-1"><a class="header-anchor" href="#_10-3-常见消息模型" aria-hidden="true">#</a> 10.3 常见消息模型</h2><p><img src="'+j+'" alt="image-20220210174208165"></p><blockquote><p>Hello World 实践</p></blockquote><p><img src="'+z+'" alt="image-20220210175441671"></p><h2 id="_10-4-springamqp" tabindex="-1"><a class="header-anchor" href="#_10-4-springamqp" aria-hidden="true">#</a> 10.4 SpringAMQP</h2><h3 id="_10-4-1-概念" tabindex="-1"><a class="header-anchor" href="#_10-4-1-概念" aria-hidden="true">#</a> 10.4.1 概念</h3><blockquote><p>AMQP</p></blockquote><p><strong>A</strong>dvanced <strong>M</strong>essage <strong>Q</strong>ueuing <strong>P</strong>rotocol，用于在应用程序之间传递业务消息的开放标准。该协议与平台无关，更符合微服务中独立性要求。</p><blockquote><p>Spring AMQP</p></blockquote><p>Spring AMQP是基于AMQP协议定义的一套API规范，提供了模板来发送和接收消息。包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现。</p><p>==特征==</p><ul><li>侦听器容器，用于异步处理入栈消息</li><li>支持用于发送和接收消息的RabbitTemplate</li><li>支持RabbitAdmin自动声明队列、交换、绑定</li></ul><h3 id="_10-4-2-案例" tabindex="-1"><a class="header-anchor" href="#_10-4-2-案例" aria-hidden="true">#</a> 10.4.2 案例</h3><blockquote><p>利用SpringAMQP实现HelloWorld中的基础消息队列功能</p></blockquote><p>流程如下：</p>',25);function J(X,Y){const s=i("ExternalLinkIcon");return l(),o("div",null,[W,a("p",null,[e("官网："),a("a",O,[e("Messaging that just works — RabbitMQ"),r(s)])]),K])}const aa=n(V,[["render",J],["__file","2.html.vue"]]);export{aa as default};
