import{_ as o,r as c,o as i,c as r,e as l,a,w as n,d as t,b as p}from"./app-DRxAhH5h.js";const s="/assets/07_%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB-PEkymnr9.png",u={},h=l("h1",{id:"_7-异常处理",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_7-异常处理"},[l("span",null,"7 异常处理")])],-1),_=l("h2",{id:"_7-1-概述",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_7-1-概述"},[l("span",null,"7.1 概述")])],-1),d=l("blockquote",null,[l("p",null,"异常分类")],-1),f=l("ul",null,[l("li",null,[t("分类 "),l("ul",null,[l("li",null,"编译时异常"),l("li",null,"运行时异常")])])],-1),E=p('<p><img src="'+s+'" alt=""></p><blockquote><p>异常的体系结构</p></blockquote><p>java.lang.Throwable</p><p>​ |------ java.lang.Error：一般不编写针对性的代码处理</p><p>​ |------ java.lang.Exception：可以进行异常的处理</p><p>​ |------ 编译时异常（checked）</p><p>​ |------ IOException</p><p>​ |------ FileNotFoundException</p><p>​ |------ ClassNotFoundException</p><p>​ |------ 运行时异常（unchecked，RuntimeException）</p><p>​ |------ NullPointerException</p><p>​ |------ ArrayIndexOutOfBoundsException</p><p>​ |------ ClassCastException</p><p>​ |------ NumberFormatException</p><p>​ |------ InputMismatchException</p><p>​ ...</p><h2 id="_7-2-异常处理" tabindex="-1"><a class="header-anchor" href="#_7-2-异常处理"><span>7.2 异常处理</span></a></h2><blockquote><p>异常处理方式</p></blockquote><ul><li>try-catch-finally</li><li>throws + 异常类型</li></ul><blockquote><p>try-catch-finally使用注意事项</p></blockquote><ul><li>当catch捕获多个异常时，如果这些异常之间没有子父类关系，谁在上谁在下都可以。但是如果有子父类关系，子类在前父类在后</li><li>try-catch-finally处理编译时异常，使得程序在编译时不再报错，但是运行时仍可能报错</li><li>finally中声明的是一定会被执行的语句。即使catch中又出现异常了，或者是try和catch中有return语句等情况</li><li>如果try、catch、finally中都有return，最终返回的是finally中的内容</li></ul><blockquote><p>开发中如何选择使用try-catch-finally还是使用throws？</p></blockquote><ul><li>如果父类中被重写的方法中没有使用throws的方式处理异常，那么子类重写的方法也不能使用throws，也就是说，如果子类重写的方法有异常，只能使用try-catch-finally的方式处理</li><li>执行的方法a中，先后又调用了另外几个方法，这几个方法是递进关系执行的。建议使用throws的方式进行处理a中调用的方法，执行的a方法则可以考虑使用try-catch-finally方式进行处理</li></ul>',23);function y(x,k){const e=c("front");return i(),r("div",null,[h,_,d,l("ul",null,[l("li",null,[a(e,{style:{background:"yellow"}},{default:n(()=>[t("Error")]),_:1}),t("：Java虚拟机无法解决的严重问题。如JVM系统内部错误、资源耗尽（如StackOverflowError栈溢出、OOM堆溢出）等严重情况。一般不编写针对性的代码进行处理。")]),l("li",null,[a(e,{style:{background:"yellow"}},{default:n(()=>[t("Exception")]),_:1}),t("：其它因编程错误或偶然意外的外在因素导致的一般性问题，可以使用针对性的代码进行处理，如：空指针访问、试图读取不存在的文件、网络连接中断、数组下标越界"),f])]),E])}const b=o(u,[["render",y],["__file","07_异常处理.html.vue"]]),g=JSON.parse('{"path":"/static/tang/java2/07_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html","title":"7 异常处理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"7.1 概述","slug":"_7-1-概述","link":"#_7-1-概述","children":[]},{"level":2,"title":"7.2 异常处理","slug":"_7-2-异常处理","link":"#_7-2-异常处理","children":[]}],"git":{},"filePathRelative":"static/tang/java2/07_异常处理.md"}');export{b as comp,g as data};
