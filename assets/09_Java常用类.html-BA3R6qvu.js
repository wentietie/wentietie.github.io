import{_ as l,r as o,o as c,c as i,e as n,d as s,a as t,w as p,b as e}from"./app-DRxAhH5h.js";const u="/assets/09_StringBuffer%E7%9A%84%E6%89%A9%E5%AE%B9%E5%8E%9F%E7%90%86-Bgm400Ih.png",k={},r=e('<h1 id="_9-java常用类" tabindex="-1"><a class="header-anchor" href="#_9-java常用类"><span>9 Java常用类</span></a></h1><h2 id="_9-1-string" tabindex="-1"><a class="header-anchor" href="#_9-1-string"><span>9.1 String</span></a></h2><h3 id="_9-1-1-特性" tabindex="-1"><a class="header-anchor" href="#_9-1-1-特性"><span>9.1.1 特性</span></a></h3>',3),d=n("li",null,[n("p",null,"String类声明为final的，不可被继承")],-1),m=n("li",null,[n("p",null,"实现了Serializable接口，表示支持序列化")],-1),v=n("li",null,[n("p",null,"实现了Comparable接口，表示可以比较大小")],-1),b=n("li",null,[n("p",null,"内部定义了final char[] value，用来存储字符串数据")],-1),g=n("ul",null,[n("li",null,"当对字符串重新赋值时，需要重新指定内存区域进行赋值，不能对内存中原有的字符串内容进行修改"),n("li",null,"当对字符串进行连接操作时，也需要重新指定内存区域进行赋值"),n("li",null,"当对字符串调用replace()修改字符串时，也需要重新指定内存区域进行赋值")],-1),f=n("li",null,[n("p",null,'通过字面量的方式（区别与new，使用String a="abc";）给一个字符串赋值，此时的字符串的值存在方法区中的字符串常量池中'),n("p",null,"字符串常量池不会存相同内容的字符串")],-1),h=n("h3",{id:"_9-1-2-string的初始化方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1-2-string的初始化方式"},[n("span",null,"9.1.2 String的初始化方式")])],-1),_=n("li",null,[n("p",null,'通过字面量的方式：String s = "abc";'),n("p",null,"初始化过程："),n("ul",null,[n("li",null,"在字符串常量池中创建abc常量"),n("li",null,"s指向abc常量的地址")])],-1),S=n("p",null,'通过new+构造器的方式：String s = new String("abc");',-1),y=n("p",null,"初始化过程：",-1),j=n("ul",null,[n("li",null,"在字符串常量池中创建abc常量"),n("li",null,"在堆空间中创建String对象，其value属性值为abc常量的地址"),n("li",null,"s指向堆中创建的String对象")],-1),T=n("p",null,"答：两个。一个是在堆空间中new了一个String类型的对象，另一个是在常量池中创建了一个char[]",-1),D=n("blockquote",null,[n("p",null,"引申")],-1),w=n("li",null,[n("p",null,'常量与常量的拼接结果在常量池中（如String s = "abc"+"def";s指向常量池中的"abcdef"），且常量池中不会存在相同内容的常量。')],-1),x=n("li",null,[n("p",null,'常量与变量的拼接、变量与变量的拼接结果在堆空间中（如String s = "abc"; String s2 = s1+"def";s2指向堆空间，相当于new了一个变量）')],-1),q=e(`<li><p>例子如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;javaEEhadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;hadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">&quot;hadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s8 <span class="token operator">=</span> s5<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),L=n("h3",{id:"_9-1-3-string常用方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1-3-string常用方法"},[n("span",null,"9.1.3 String常用方法")])],-1),C=e('<ul><li><code>int length()</code>：返回字符串长度</li><li><code>char charAt(int index)</code>：返回索引处的字符</li><li><code>boolean isEmpty()</code>：判断是否是空字符串</li><li><code>String toLowerCase()</code>： 将字符转为小写（）</li><li><code>String toUpperCase()</code>： 将字符转为大写</li><li><code>String trim()</code>：忽略字符串收尾空格</li><li><code>boolean equals(Object obj)</code>：比较字符串的内容是否相等</li><li><code>boolean equalsIgnoreCase(Object obj)</code>：忽略大小写，比较字符串的内容是否相等</li><li><code>String concat(String str)</code>：将指定字符串连接到此字符串的结尾，等价于“+”</li><li><code>int compareTo(String anotherString)</code>：比较两个字符串的大小。返回负数表示当前字符串比指定字符串小。</li><li><code>String substring(int beginIndex)</code>：从beginIndex开始截取并返回</li><li><code>String substring(int beginIndex, int endIndex)</code>：截取[beginIndex, endIndex)范围内的字符串并返回</li><li><code>boolean endsWith(String suffix)</code>：判断字符串是否以指定的字符串结尾</li><li><code>boolean startsWith(String suffix)</code>：判断字符串是否以指定的字符串开始</li><li><code>boolean startsWith(String suffix, int toffset)</code>：判断字符串从指定的索引位置开始的子字符串是否以指定的字符串开始</li><li><code>boolean contains(CharSequence s)</code>：判断是否包含指定字符串</li><li><code>int indexOf(String str)</code>：返回指定字符串在当前字符串中第一次出现的索引位置</li><li><code>int indexOf(String str, int fromIndex)</code>： 返回指定字符串在当前字符串中第一次出现的索引位置，从指定的下标开始</li><li><code>int lastIndexOf(String str)</code>：返回指定字符串在当前字符串中最后一次出现的索引位置</li><li><code>int lastI ndexOf(String str, int fromIndex)</code>：返回指定字符串在当前字符串中第一次出现的索引位置，从指定的索引反向搜索</li><li><code>String replace(char oldChar, char newChar)</code>：用newChar替换oldChar</li><li><code>String replace(CharSequence target, CharSequence replacement)</code>：用replacement替换target</li><li><code>String replaceAll(String regex, String replance)</code>：用replacement替换符合正则表达式regex的字符串</li><li><code>String replaceFirst(String regex, String replance)</code>：用replacement替换第一个符合正则表达式regex的字符串</li><li><code>boolean match(String regex)</code>：判断字符串是否匹配给定的正则表达式</li><li><code>String[] split(String regex)</code>：根据给定的正则表达式拆分此字符串</li><li><code>String[] split(String regex, int limit)</code>：根据给定的正则表达式拆分此字符串，最多不超过limit个。如果超出，剩下的全都放在最后一个元素中</li></ul><h3 id="_9-1-4-string与部分数据结构之间的转换" tabindex="-1"><a class="header-anchor" href="#_9-1-4-string与部分数据结构之间的转换"><span>9.1.4 String与部分数据结构之间的转换</span></a></h3>',2),I=n("li",null,[s("String与char[]之间的转换 "),n("ul",null,[n("li",null,"String --> char[]：调用String的toCharArray()"),n("li",null,"char[] --> String ：调用String的构造器")])],-1),B=n("h3",{id:"_9-1-5-stringbuffer和stringbuilder",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-1-5-stringbuffer和stringbuilder"},[n("span",null,"9.1.5 StringBuffer和StringBuilder")])],-1),O=n("blockquote",null,[n("p",null,"String、StringBuffer、StringBuilder三者的区别与联系")],-1),F=n("li",null,[s("String： "),n("ul",null,[n("li",null,"不可变的字符序列；")])],-1),A=n("li",null,[s("StringBuffer： "),n("ul",null,[n("li",null,"可变的字符序列；"),n("li",null,"线程安全的，效率低")])],-1),E=n("ul",null,[n("li",null,"可变的字符序列；"),n("li",null,"线程不安全的，效率高")],-1),G=n("li",null,[s("三者的联系： "),n("ul",null,[n("li",null,"三者底层都是char[]，但是String是用final修饰的")])],-1),M=n("blockquote",null,[n("p",null,"源码分析")],-1),P=n("p",null,"以StringBuffer为例",-1),J=n("li",null,[n("p",null,"构造器"),n("ul",null,[n("li",null,"StringBuffer sb = new StringBuffer()：底层创建了一个长度是16的字符数组，即char[] value = new char[16]"),n("li",null,'StringBuffer sb = new StringBuffer("abc")：底层创建了一个长度是"abc".length+16的字符数组，即char[] value = new char["abc".length+16]')])],-1),N=n("li",null,[n("p",null,"问题1：sb.length()是多少？"),n("p",null,'答：是字符的真实长度。如StringBuffer sb = new StringBuffer()，sb.length()=0；StringBuffer sb = new StringBuffer("abc")，sb.length()=3')],-1),R=n("p",null,"问题2：当sb.append(str)长度不够时，是如何扩容的？",-1),Y=n("p",null,"答：默认情况下是将原来的容量变为原来的2倍+2；如果默认扩容完毕后，长度仍不够，则容量扩容为sd.length()+str.length()；...",-1),H=n("p",null,"同时将原有数组中的元素复制到新的数组中。",-1),z=n("p",null,[n("img",{src:u,alt:""})],-1),X=e(`<blockquote><p>StringBuffer常用方法</p></blockquote><ul><li><p><code>StringBuffer append(String var1)</code>：字符串拼接</p></li><li><p><code>StringBuffer delete(int start, int end)</code>：删除[start, end)位置的字符</p></li><li><p><code>StringBuffer replace(int start, int end, String str)</code>：把[start, end)位置的字符替换成str</p></li><li><p><code>StringBuffer insrt(int offset, xxx)</code>：在指定位置插入xxx</p></li><li><p><code>StringBuffer reverse()</code>：字符串反转</p><p>以上方法都会将原有字符串进行修改。此外StringBuffer还可以调用String的一些方法，如<code>String substring(int beginIndex, int endIndex)</code>，当调用String的方法时，对原有字符串不会修改</p></li></ul><blockquote><p>String、StringBuffer、StringBuilder效率对比</p></blockquote><p>String &lt; StringBuffer &lt; StringBuilder</p><h3 id="_9-1-6-jvm中字符串常量池存放位置" tabindex="-1"><a class="header-anchor" href="#_9-1-6-jvm中字符串常量池存放位置"><span>9.1.6 JVM中字符串常量池存放位置</span></a></h3><ul><li>jdk 1.6：字符串常量池存储在方法区（永久区）</li><li>jdk 1.7：字符串常量池存储在堆空间</li><li>jdk 1.8：字符串常量池存储在方法区（元空间）</li></ul><h2 id="_9-2-日期时间的api" tabindex="-1"><a class="header-anchor" href="#_9-2-日期时间的api"><span>9.2 日期时间的API</span></a></h2><h3 id="_9-2-1-jdk8之前的日期时间api" tabindex="-1"><a class="header-anchor" href="#_9-2-1-jdk8之前的日期时间api"><span>9.2.1 JDK8之前的日期时间API</span></a></h3><ul><li><p>java.util.Date及其子类java.sql.Date</p></li><li><p>System.currentTimeMillis()：获取当前时间的时间戳</p></li><li><p>java.text.SimpleDateFormat：时间格式化</p></li><li><p>Calendar：日历类。Calender是Date的升级版</p><p>说明：获取月份时，一月是0，二月是1，以此类推，十二月是11；获取星期时，周日是1，周一是2，以此类推，周六是7</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 实例化1: 创建子类对象</span></span>
<span class="line"><span class="token class-name">GregorianCalendar</span> gregorianCalendar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 实例化2（常用）：调用其静态方法getInstance()</span></span>
<span class="line"><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 常用方法</span></span>
<span class="line"><span class="token comment">// get(int field)：获取指定参数对应的Calender对象的时间</span></span>
<span class="line"><span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取月份</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前是一年中的第几天</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// set(int field, int value)：对Calender对象的时间进行set操作</span></span>
<span class="line">calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// add(int field, int amount)：对Calender对象的时间进行“+”操作</span></span>
<span class="line">calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// getTime()：日历类 --&gt; java.util.Date</span></span>
<span class="line"><span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// setTime()：java.util.Date --&gt; Calender</span></span>
<span class="line"><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_9-2-2-jdk8中新的日期时间api" tabindex="-1"><a class="header-anchor" href="#_9-2-2-jdk8中新的日期时间api"><span>9.2.2 JDK8中新的日期时间API</span></a></h3><blockquote><p>旧日期时间API存在的问题</p></blockquote><ul><li>可变性：日期和时间这样的类应该是不可变的</li><li>偏移性：Date中的年份是从1900开始的，月份是从0开始的</li><li>格式化：格式化只对Date有用，对Calender不行</li><li>线程安全性：Date和Calender都不是线程安全的</li><li>不能处理闰秒等</li></ul><blockquote><p>JDK8新增的日期时间API</p></blockquote>`,13),U=e("<ul><li>java.time.LocalDate：获取日期</li><li>java.time.LocalTime：获取时间</li><li>java.time.LocalDateTime：获取日期+时间</li><li>java.time.Instant：瞬时，等同于Date中的getTime()</li><li>java.time.format.DateTimeFormatter：时间格式化</li><li>其他API： <ul><li>java.time.ZoneId：时区相关操作</li><li>java.time.ZonedDateTime：带时区的日期时间</li><li>java.time.Clock：使用时区提供对当前即时、日期、和时间的访问的时钟</li><li>java.time.Duration：用来计算两个<strong>时间</strong>的间隔，可以获取秒级间隔，也可以获取纳秒级间隔</li><li>java.time.Period：用来计算两个<strong>日期</strong>的间隔</li><li>java.time.temporal.TemporalAdjuster：时间校正器。如获取当前日期的下一个工作日等</li><li>java.time.temporal.TemporalAdjusters：该类通过静态方法提供了大量的TemporalAdjuster实现</li></ul></li></ul><blockquote><p>LocalDate、LocalTime、LocalDateTime的使用</p></blockquote>",2),V=e(`<li><p>实例化</p><ul><li><p>方法一：使用now()实例化当前时间</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 实例化1：使用静态方法now()，获取当前日期/时间/时间+日期</span></span>
<span class="line"><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法二：使用of()实例化指定时间</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 实例化2：使用静态方法of()，设置指定的时间。没有偏移量</span></span>
<span class="line"><span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LocalTime</span> localTime1 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>获取属性：getXxx</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-7 14:47:28</span></span>
<span class="line"><span class="token comment">// getXXX()：获取相关属性</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// WEDNESDAY</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// DECEMBER</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 47</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),K=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// withXxx()：设置相关属性 ---&gt; 体现了不可变性，原时间不变，时间修改方法中有返回值，返回的新日期是被修改过的</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T14:54:38.985</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-22T14:54:38.985</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// plusXxx()：对相关属性执行“+”操作</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T14:54:38.985</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2023-03-07T14:54:38.985</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Z=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token comment">// minusXxx()：对相关属性执行“-”操作</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T14:54:38.985</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-01T14:54:38.985</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Q=n("blockquote",null,[n("p",null,"Instant说明")],-1),$=n("p",null,"时间线上的一个瞬时点。这可能被用来记录应用程序中的事件时间戳。",-1),nn=n("p",null,"从概念上来讲，它知识简单的表示自1970年1月1日0时0分0秒开始的事件数，精确度可达纳秒级。",-1),sn=n("blockquote",null,[n("p",null,"Instant的使用")],-1),an=n("p",null,"实例化",-1),tn=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 实例化1：now() 获取当前时间</span></span>
<span class="line"><span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取到的是本初子午线时间，与东八区时间相差8小时</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T07:31:15.348Z（当前时间为2022-12-07T15:31:15.348Z）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),pn=e(`<li><p>方法二：使用of(long l)获取指定时间戳对应的时间</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//实例化2：ofEpochMilli()，按照给定的毫秒数获取指定时间</span></span>
<span class="line"><span class="token class-name">Instant</span> instant1 <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token number">1670398455189L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),en=e(`<li><p>设置偏移量，获取当前时间 atOffset()</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 设置偏移量，获取当前时间</span></span>
<span class="line"><span class="token class-name">OffsetDateTime</span> offsetDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offsetDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T15:31:15.348+08:00</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取自1970-01-01 00:00:00开始的毫秒数</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 获取自1970-01-01 00:00:00开始的毫秒数</span></span>
<span class="line"><span class="token keyword">long</span> milli <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milli<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),ln=n("blockquote",null,[n("p",null,"DateTimeFormatter的使用")],-1),on=e(`<li><p>实例化方法一：通过预定义的标准格式，如ISO_LOCAL_TIME、ISO_LOCAL_DATE、ISO_LOCAL_DATE_TIME</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">DateTimeFormatter</span> dtf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_DATE_TIME</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 格式化：日期 --&gt; 字符串</span></span>
<span class="line"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime <span class="token operator">+</span> <span class="token string">&quot; --&gt; &quot;</span> <span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 解析： 字符串 --&gt; 日期</span></span>
<span class="line"><span class="token class-name">TemporalAccessor</span> parse <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2022-12-07T16:04:03.594&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {},ISO resolved to 2022-12-07T16:04:03.594</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实例化方法二：通过本地化相关的格式，如DateTimeFormatter.ofLocalizedDateTime()、DateTimeFormatter.ofLocalizedDate()</p><ul><li><p>DateTimeFormatter.ofLocalizedDateTime()适用的参数：</p><ul><li>FormatStyle.SHORT</li><li>FormatStyle.MEDIUM</li><li>FormatStyle.LONG</li></ul></li><li><p>DateTimeFormatter.ofLocalizedDate()适用的参数：</p><ul><li>FormatStyle.SHORT</li><li>FormatStyle.MEDIUM</li><li>FormatStyle.LONG</li><li>FormatStyle.FULL</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// FormatStyle.SHORT</span></span>
<span class="line"><span class="token class-name">DateTimeFormatter</span> dtf1 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">SHORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> dtf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime <span class="token operator">+</span> <span class="token string">&quot; --&gt; &quot;</span> <span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T16:09:18.095 --&gt; 22-12-7 下午4:09</span></span>
<span class="line"><span class="token comment">// FormatStyle.MEDIUM</span></span>
<span class="line"><span class="token class-name">DateTimeFormatter</span> dtf2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> dtf2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime <span class="token operator">+</span> <span class="token string">&quot; --&gt; &quot;</span> <span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T16:09:18.095 --&gt; 2022-12-7 16:09:18</span></span>
<span class="line"><span class="token comment">// FormatStyle.LONG</span></span>
<span class="line"><span class="token class-name">DateTimeFormatter</span> dtf3 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">LONG</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span> dtf3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime <span class="token operator">+</span> <span class="token string">&quot; --&gt; &quot;</span> <span class="token operator">+</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T16:09:18.095 --&gt; 2022年12月7日 下午04时09分18秒</span></span>
<span class="line"><span class="token comment">// FormatStyle.FULL</span></span>
<span class="line"><span class="token class-name">DateTimeFormatter</span> dtf4 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s4 <span class="token operator">=</span> dtf4<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate <span class="token operator">+</span> <span class="token string">&quot; --&gt; &quot;</span> <span class="token operator">+</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07 --&gt; 2022年12月7日 星期三</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),cn=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">DateTimeFormatter</span> dtf5 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 格式化</span></span>
<span class="line"><span class="token class-name">String</span> s5 <span class="token operator">=</span> dtf5<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime <span class="token operator">+</span> <span class="token string">&quot; --&gt; &quot;</span> <span class="token operator">+</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-12-07T16:19:37.665 --&gt; 2022-12-07 16:19:37</span></span>
<span class="line"><span class="token comment">// 解析</span></span>
<span class="line"><span class="token class-name">TemporalAccessor</span> parse1 <span class="token operator">=</span> dtf5<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2022-11-11 08:08:08&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {},ISO resolved to 2022-12-07T16:04:03.594</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),un=n("h2",{id:"_9-3-java比较器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-3-java比较器"},[n("span",null,"9.3 Java比较器")])],-1),kn=n("h3",{id:"_9-3-1-comparable自然排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-3-1-comparable自然排序"},[n("span",null,"9.3.1 Comparable自然排序")])],-1),rn=e(`<blockquote><p>重写compareTo(Object o)方法的规则</p></blockquote><ul><li><p>当前对象this &gt; 形参对象obj，返回正数</p></li><li><p>当前对象this &lt; 形参对象obj，返回负数</p></li><li><p>当前对象this = 形参对象obj，返回0</p><p>tips：如果形参对象不是当前对象对应的类，可以考虑抛出异常！</p></li></ul><blockquote><p>例子</p></blockquote><ul><li><p>自定义类实现<code>Comparable</code>接口，并重写<code>compareTo(Object o)</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// getter、setter、toString</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 重写compareTo，首先按照价格由低到高排序；价格相同时按照商品名由低到高排序</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> goods<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> goods<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;数据格式不一致！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>排序测试</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">comparableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token number">5.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;basketball&quot;</span><span class="token punctuation">,</span> <span class="token number">130.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;bag&quot;</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token number">5.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Goods{name=&#39;apple&#39;, price=5.13}, Goods{name=&#39;banana&#39;, price=5.13}, Goods{name=&#39;basketball&#39;, price=130.99}, Goods{name=&#39;bag&#39;, price=999.0}]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_9-3-2-comparator定制排序" tabindex="-1"><a class="header-anchor" href="#_9-3-2-comparator定制排序"><span>9.3.2 Comparator定制排序</span></a></h3><blockquote><p>使用场景</p></blockquote><ul><li>元素类型没有实现Comparable接口，且又不方便修改代码</li><li>虽实现了Comparable接口，但是compareTo(Object o)方法中的排序规则不适用于当前排序</li></ul><blockquote><p>使用方法</p></blockquote><p>实现<code>Comparator</code>接口，并重写<code>compare(Goods o1, Goods o2)</code>方法</p><p>重写compare(Goods o1, Goods o2)方法的规则与Comparable接口的compareTo(Object o)规则一致。</p><blockquote><p>例子</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">comparatorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token number">5.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;basketball&quot;</span><span class="token punctuation">,</span> <span class="token number">130.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;bag&quot;</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    goods<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token number">5.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 按照价格倒序排序。如果价格相等，按照商品名称倒序排序</span></span>
<span class="line">    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>goods<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> o1<span class="token punctuation">,</span> <span class="token class-name">Goods</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> o2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> o2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Goods{name=&#39;bag&#39;, price=999.0}, Goods{name=&#39;basketball&#39;, price=130.99}, Goods{name=&#39;banana&#39;, price=5.13}, Goods{name=&#39;apple&#39;, price=5.13}]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-4-biginteger与bigdecimal" tabindex="-1"><a class="header-anchor" href="#_9-4-biginteger与bigdecimal"><span>9.4 BigInteger与BigDecimal</span></a></h2><ul><li><p>BigInteger可以表示不可变的任意精度的整数。</p></li><li><p>BigDecimal支持不可变的、任意精度的有符号十进制定点数。</p></li></ul>`,14);function dn(mn,vn){const a=o("front");return c(),i("div",null,[r,n("ul",null,[d,m,v,b,n("li",null,[n("p",null,[s("String代表了"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("不可变的字符串序列")]),_:1}),s("，简称不可变性，体现如下：")]),g]),f]),h,n("ul",null,[_,n("li",null,[S,y,j,t(a,{style:{background:"yellow"}},{default:p(()=>[s("面试题")]),_:1}),s('：String s = new String("abc")创建了几个对象？'),T])]),D,n("ul",null,[w,x,n("li",null,[n("p",null,[s("特别的，如果拼接结果调用了"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("intern()")]),_:1}),s("，返回结果在常量池中。")])]),q]),L,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("凡是涉及到对字符串进行修改的方法，原字符都没有变化，需要用新的变量去接收返回值")]),_:1}),s("，这提现了字符串的不可变性，")]),C,n("ul",null,[I,n("li",null,[s("String与byte[]之间的转换 "),n("ul",null,[n("li",null,[s("String --> byte[]：调用String的getBytes() --------->相当于"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("编码")]),_:1})]),n("li",null,[s("byte[] --> String ：调用String的构造器 --------->相当于"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("解码")]),_:1})])])])]),B,O,n("ul",null,[F,A,n("li",null,[s("StringBuilder：（"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("jdk5.0新增")]),_:1}),s("） "),E]),G]),M,P,n("ul",null,[J,N,n("li",null,[R,Y,H,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("开发中建议使用StringBuffer(int capacity)")]),_:1}),s("，给定一个长度，避免在append过程中进行扩容（这样就可以避免在扩容时复制数组）")]),z])]),X,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("JDK8新特性")]),_:1})]),U,n("ul",null,[V,n("li",null,[n("p",null,[s("设置属性：withXxx "),t(a,{style:{background:"yellow"}},{default:p(()=>[s("体现了不可变性")]),_:1})]),K]),n("li",null,[n("p",null,[s("对相关属性执行“+”操作：plusXxx() "),t(a,{style:{background:"yellow"}},{default:p(()=>[s("体现了不可变性")]),_:1})]),W]),n("li",null,[n("p",null,[s("对相关属性执行“-”操作：minusXxx() "),t(a,{style:{background:"yellow"}},{default:p(()=>[s("体现了不可变性")]),_:1})]),Z])]),Q,$,nn,sn,n("ul",null,[n("li",null,[an,n("ul",null,[n("li",null,[n("p",null,[s("方法一：使用now()获取当前时间 "),t(a,{style:{background:"yellow"}},{default:p(()=>[s("注：获取到的是本初子午线的时间，与东八区相差8小时")]),_:1})]),tn]),pn])]),en]),ln,n("ul",null,[on,n("li",null,[n("p",null,[s('实例化方法三：通过自定义的格式，如DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss") '),t(a,{style:{background:"yellow"}},{default:p(()=>[s("最常用")]),_:1})]),cn])]),un,kn,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("自定义类实现自然排序，需要实现`Comparable`接口，并重写``compareTo(Object o)``")]),_:1})]),rn])}const gn=l(k,[["render",dn],["__file","09_Java常用类.html.vue"]]),fn=JSON.parse('{"path":"/static/tang/java2/09_Java%E5%B8%B8%E7%94%A8%E7%B1%BB.html","title":"9 Java常用类","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"9.1 String","slug":"_9-1-string","link":"#_9-1-string","children":[{"level":3,"title":"9.1.1 特性","slug":"_9-1-1-特性","link":"#_9-1-1-特性","children":[]},{"level":3,"title":"9.1.2 String的初始化方式","slug":"_9-1-2-string的初始化方式","link":"#_9-1-2-string的初始化方式","children":[]},{"level":3,"title":"9.1.3 String常用方法","slug":"_9-1-3-string常用方法","link":"#_9-1-3-string常用方法","children":[]},{"level":3,"title":"9.1.4 String与部分数据结构之间的转换","slug":"_9-1-4-string与部分数据结构之间的转换","link":"#_9-1-4-string与部分数据结构之间的转换","children":[]},{"level":3,"title":"9.1.5 StringBuffer和StringBuilder","slug":"_9-1-5-stringbuffer和stringbuilder","link":"#_9-1-5-stringbuffer和stringbuilder","children":[]},{"level":3,"title":"9.1.6 JVM中字符串常量池存放位置","slug":"_9-1-6-jvm中字符串常量池存放位置","link":"#_9-1-6-jvm中字符串常量池存放位置","children":[]}]},{"level":2,"title":"9.2 日期时间的API","slug":"_9-2-日期时间的api","link":"#_9-2-日期时间的api","children":[{"level":3,"title":"9.2.1 JDK8之前的日期时间API","slug":"_9-2-1-jdk8之前的日期时间api","link":"#_9-2-1-jdk8之前的日期时间api","children":[]},{"level":3,"title":"9.2.2 JDK8中新的日期时间API","slug":"_9-2-2-jdk8中新的日期时间api","link":"#_9-2-2-jdk8中新的日期时间api","children":[]}]},{"level":2,"title":"9.3 Java比较器","slug":"_9-3-java比较器","link":"#_9-3-java比较器","children":[{"level":3,"title":"9.3.1 Comparable自然排序","slug":"_9-3-1-comparable自然排序","link":"#_9-3-1-comparable自然排序","children":[]},{"level":3,"title":"9.3.2 Comparator定制排序","slug":"_9-3-2-comparator定制排序","link":"#_9-3-2-comparator定制排序","children":[]}]},{"level":2,"title":"9.4  BigInteger与BigDecimal","slug":"_9-4-biginteger与bigdecimal","link":"#_9-4-biginteger与bigdecimal","children":[]}],"git":{},"filePathRelative":"static/tang/java2/09_Java常用类.md"}');export{gn as comp,fn as data};
