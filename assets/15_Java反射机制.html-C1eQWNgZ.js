import{_ as l,r as c,o,c as i,e as n,d as s,a as p,w as t,b as e}from"./app-CQavEA7Q.js";const u={},k=n("h1",{id:"_15-java反射机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_15-java反射机制"},[n("span",null,"15 Java反射机制")])],-1),r=n("h2",{id:"_15-1-java反射机制概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_15-1-java反射机制概述"},[n("span",null,"15.1 Java反射机制概述")])],-1),d=n("blockquote",null,[n("p",null,"Reflection--反射")],-1),v=e("<li><p>类加载的方式</p><ul><li>正常方式：<code>引入需要的“包类”名称</code> ---&gt; <code>通过new实例化</code> ---&gt; <code>取得实例化对象</code></li><li>反射方式：<code>实例化对象</code> ---&gt; <code>getClass()方法</code> ---&gt; <code>得到完整的“包类”名称</code></li></ul></li>",1),m=n("blockquote",null,[n("p",null,"反射的特征")],-1),b=n("p",null,"动态性",-1),g=n("blockquote",null,[n("p",null,"静态语言 VS 动态语言")],-1),y=n("li",null,"举例：Object-C、C#、JavaScript、PHP、Python、Erlang",-1),h=n("li",null,"举例：Java、C、C++",-1),f=n("strong",null,"可以利用反射机制、字节码操作获得类似动态语言的特性",-1),w=e("<blockquote><p>Java反射机制提供的功能</p></blockquote><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><blockquote><p>反射相关的主要API</p></blockquote><ul><li><code>java.lang.Class</code>：代表一个类。用来表示一个通用的类，是一个用来描述类的类</li><li><code>java.lang.reflect.Method</code>：代表类的方法</li><li><code>java.lang.reflect.Field</code>：代表类的成员变量</li><li><code>java.lang.reflect.Constructor</code>：代表类的构造器</li><li>...</li></ul><blockquote><p>疑问1：通过直接new的方式或反射的方式都可以调用公共结构，开发中到底使用哪个？</p></blockquote><ul><li>建议使用new的方式，但是不排除使用反射的方式</li><li>反射方式使用场景：当编译时不确定new哪个类的对象时</li></ul><blockquote><p>疑问2：反射机制与面向对象中的封装性是不是矛盾？如何看待这两个技术？</p></blockquote><p>（封装性是私有的外部不能访问，反射是可以访问私有的属性和方法）</p>",8),_=n("p",null,"封装性中私有的属性和方法等，外部不能访问，是指的没必要去访问，但是如果一定要访问的话，也是可以访问的。如果非要访问的话，就得使用反射技术了。",-1),j=n("h2",{id:"_15-2-java-lang-class",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_15-2-java-lang-class"},[n("span",null,"15.2 java.lang.Class")])],-1),C=n("blockquote",null,[n("p",null,"java.lang.Class类的理解与获取")],-1),q=n("p",null,"类的加载过程：",-1),S=e(`<li><p>换句话说：</p><p>Class的实例就对应着一个运行时类</p></li><li><p>加载到内存中的运行时类，会缓存一定的时间。在此时间内，可以通过不同的方式来获取此运行时类</p></li><li><p>获取Class实例的方式</p><ul><li>通过运行时类的属性：类.class</li><li>通过运行时类的对象，调用getClass()</li><li>调用Class的静态方法：forName(String className)。其中className是类的完整的“包类”名</li><li>使用类的加载器：ClassLoader</li></ul></li><li><p>获取Class实例方式的例子</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 获取Class的实例的方式</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 方式1：通过运行时类的属性：类.class</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式2：通过运行时类的对象，调用getClass()</span></span>
<span class="line">    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Class</span> clazz2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式3：调用Class的静态方法：forName(String className)。其中className是类的完整的“包类”名</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.tth.learn.java.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式4：使用类的加载器：ClassLoader</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ReflectTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz4 <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.tth.learn.java.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 验证在一定时间内，获取的同一个类的运行时类，是同一个Class实例</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,4),z=n("blockquote",null,[n("p",null,"哪些类型可以有Class对象？")],-1),x=n("li",null,[n("p",null,"class：外部类、成员（成员内部类。静态内部类），局部内部类，匿名内部类")],-1),P=n("li",null,[n("p",null,"interface：接口")],-1),T=n("p",null,"[]：数组",-1),F=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> arr2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=n("li",null,[n("p",null,"enum：枚举")],-1),I=n("li",null,[n("p",null,"annotation：注解@interface")],-1),N=n("li",null,[n("p",null,"primitive type：基本数据类型")],-1),D=n("li",null,[n("p",null,"void")],-1),L=n("blockquote",null,[n("p",null,"类的加载过程")],-1),A=n("p",null,"当程序主动使用某个类时，如果该类还未被加载到内存中，系统会经过如下三个步骤对该类进行初始化：",-1),O=n("li",null,"验证：确保加载的类信息符合JVM规范。如：以cafe开头，没有安全方面的内容",-1),J=n("li",null,"解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）",-1),E=n("code",null,"<clinit>()",-1),V=n("code",null,"<clinit>",-1),B=n("li",null,"当初始化一个类的时候，如果返现其父类还没初始化，则需要先触发其父类的初始化",-1),R=n("li",null,[s("虚拟机会保证一个类的"),n("code",null,"<clinit>()"),s("在多线程环境中被正确加锁和同步")],-1),H=n("blockquote",null,[n("p",null,"类加载器的作用")],-1),G=n("li",null,[n("p",null,"类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象")],-1),$=n("p",null,"JVM规范中定义了如下类型的类的加载器：",-1),K=n("code",null,"Bootstrap Classloader",-1),Q=n("code",null,"Extension Classloader",-1),U=n("code",null,"System Classloader",-1),W=n("li",null,[n("code",null,"自定义类加载器")],-1),X=e(`<li><p>获取类的加载器</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取当前类的类加载器：对于自定义类，使用系统类加载器进行加载。</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassloaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sun.misc.Launcher$AppClassLoader@18b4aac2（AppClassLoader是一个系统类加载器）</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调用系统类加载器的getParent()：获取到的是扩展类加载器</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> classLoaderParent <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoaderParent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sun.misc.Launcher$ExtClassLoader@54bedef2</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调用扩展类加载器的getParent()：无法获取引导类加载器</span></span>
<span class="line">    <span class="token comment">// 引导类加载器主要负责加载java核心类库，无法加载自定义类</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> classLoaderParentParent <span class="token operator">=</span> classLoaderParent<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoaderParentParent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// String是java的一个核心类库，是由引导类加载器加载的</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> classLoader1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用FileInputStream和类加载器读取配置文件</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 读取配置文件方式1：创建输入流，读取jdbc.properties。该文件是在当前module下</span></span>
<span class="line">    <span class="token comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span></span>
<span class="line">    <span class="token comment">//        pros.load(fis);</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 读取配置文件方式2：使用Classloader。配置文件jdbc1.properties在当前module的src下</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassloaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc1.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> is<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">String</span> user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user=&quot;</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">&quot;, password=&quot;</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),Y=e(`<h2 id="_15-3-创建运行时类的对象" tabindex="-1"><a class="header-anchor" href="#_15-3-创建运行时类的对象"><span>15.3 创建运行时类的对象</span></a></h2><h3 id="_15-3-1-class-newinstance-的使用" tabindex="-1"><a class="header-anchor" href="#_15-3-1-class-newinstance-的使用"><span>15.3.1 Class newInstance()的使用</span></a></h3><ul><li><p>作用：创建对应的运行时类。内部调用了运行时类的空参构造器</p></li><li><p>使用newInstance()的要求：</p><ul><li>运行时类必须有空参构造器，否则会报InstantiationException异常</li><li>空参构造器的访问权限得够。可以为缺省、protected、public，通常设置为public。</li></ul></li><li><p>扩展：在JavaBean中要求提供一个public的空参构造器，原因：</p><ul><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行时类，默认调用super()时，保证父类有此构造器</li></ul></li><li><p>举例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Person</span> person <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_15-3-2-体会反射的动态性" tabindex="-1"><a class="header-anchor" href="#_15-3-2-体会反射的动态性"><span>15.3.2 体会反射的动态性</span></a></h3>`,4),Z=e(`<p>如下代码中，在编译阶段是无法确定创建哪个对象的。只有在运行时获取到num的数值之后，才能确定创建的到底是哪个对象。这就提现了反射的动态性。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 体会反射的动态性</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随机生成0、1、2</span></span>
<span class="line">        <span class="token class-name">String</span> classpath <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></span>
<span class="line">                classpath <span class="token operator">=</span> <span class="token string">&quot;java.util.Date&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">                classpath <span class="token operator">=</span> <span class="token string">&quot;java.lang.Object&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">                classpath <span class="token operator">=</span> <span class="token string">&quot;com.tth.learn.java.Person&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>classpath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 获取类对象</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">classpath</span> 类的完整类名</span>
<span class="line"> * <span class="token keyword">@return</span></span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> classpath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classpath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-4-获取运行时类的完整结构" tabindex="-1"><a class="header-anchor" href="#_15-4-获取运行时类的完整结构"><span>15.4 获取运行时类的完整结构</span></a></h2><h3 id="_15-4-1-获取运行时类的属性结构" tabindex="-1"><a class="header-anchor" href="#_15-4-1-获取运行时类的属性结构"><span>15.4.1 获取运行时类的属性结构</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>Field[] getFields()</code>：获取当前运行时类及其父类中public修饰的属性</li><li><code>Field[] getDeclaredFields()</code>：获取当前运行时类中声明的所有属性，不包含父类中声明的属性</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取属性结构</span></span>
<span class="line">    <span class="token comment">// getFields()：获取当前运行时类及其父类中public修饰的属性</span></span>
<span class="line">    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f<span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;*****************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getDeclaredFields()：获取当前运行时类中声明的所有属性，不包含父类中声明的属性</span></span>
<span class="line">    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f<span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩展：获取属性的权限修饰符、数据类型、属性名称</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f<span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取属性的权限修饰符</span></span>
<span class="line">        <span class="token keyword">int</span> modifiers <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取属性的数据类型</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取属性名</span></span>
<span class="line">        <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-4-2-获取运行时类的方法结构" tabindex="-1"><a class="header-anchor" href="#_15-4-2-获取运行时类的方法结构"><span>15.4.2 获取运行时类的方法结构</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getMethods()</code>：获取当前运行时类及其父类中public修饰的方法</li><li><code>getDeclaredMethods()</code>：获取当前运行时类中声明的所有方法，不包含父类中的方法</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getMethods()：获取当前运行时类及其父类中public修饰的方法</span></span>
<span class="line">    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;********************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// getDeclaredMethods()：获取当前运行时类中声明的所有方法，不包含父类中的方法</span></span>
<span class="line">    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩展：获取方法声明的注解、权限修饰符、返回值类型、形参列表、抛出的异常</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取方法声明的注解</span></span>
<span class="line">        <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> a<span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取方法的权限修饰符</span></span>
<span class="line">        <span class="token keyword">int</span> modifiers <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取方法的返回值类型</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> returnType <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>returnType <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取方法名</span></span>
<span class="line">        <span class="token class-name">String</span> name <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取形参列表</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterTypes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parameterTypes<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> parameterTypes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;args_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;args_&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取方法抛出的异常</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptionTypes <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionTypes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> exceptionTypes<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; throws &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exceptionTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> exceptionTypes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>exceptionTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>exceptionTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-4-3-获取当前运行时类的构造器" tabindex="-1"><a class="header-anchor" href="#_15-4-3-获取当前运行时类的构造器"><span>15.4.3 获取当前运行时类的构造器</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getConstructors()</code>：获取当前运行时类中声明为public的构造器，不包含父类构造器</li><li><code>getDeclaredConstructors()</code>：获取当前运行时类中的所有构造器，不包含父类构造器</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getConstructors()：获取当前运行时类中声明为public的构造器，不包含父类构造器</span></span>
<span class="line">    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> c<span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;**************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// getDeclaredConstructors()：获取当前运行时类中的所有构造器，不包含父类构造器</span></span>
<span class="line">    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> c<span class="token operator">:</span> declaredConstructors<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-4-4-获取当前运行时类的父类" tabindex="-1"><a class="header-anchor" href="#_15-4-4-获取当前运行时类的父类"><span>15.4.4 获取当前运行时类的父类</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getSuperclass()</code>：获取当前运行时类的父类</li><li><code>getGenericSuperclass()</code>：获取当前运行时类带泛型的父类</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getSuperclass()：获取当前运行时类的父类</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> superclass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// getGenericSuperclass()：获取当前运行时类带泛型的父类</span></span>
<span class="line">    <span class="token class-name">Type</span> genericSuperclass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>genericSuperclass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ParameterizedType</span> paramType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericSuperclass<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取泛型类型</span></span>
<span class="line">    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> paramType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> actualTypeArguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> actualTypeArguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actualTypeArguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actualTypeArguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-4-5-获取当前运行时类实现的接口" tabindex="-1"><a class="header-anchor" href="#_15-4-5-获取当前运行时类实现的接口"><span>15.4.5 获取当前运行时类实现的接口</span></a></h3>`,24),nn=e(`<blockquote><p>相关方法</p></blockquote><ul><li><code>getInterfaces()</code>：获取当前运行时类的接口</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 获取当前运行时类实现的接口</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getInterfaces()：获取当前运行时类的接口</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> c<span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-4-6-获取当前运行时类所在的包" tabindex="-1"><a class="header-anchor" href="#_15-4-6-获取当前运行时类所在的包"><span>15.4.6 获取当前运行时类所在的包</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getPackage()</code>：获取当前运行时类所在的包</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 获取当前运行时类所在的包</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getPackage()：获取当前运行时类所在的包</span></span>
<span class="line">    <span class="token class-name">Package</span> pack <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pack<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-4-7-获取当前运行时类声明的注解" tabindex="-1"><a class="header-anchor" href="#_15-4-7-获取当前运行时类声明的注解"><span>15.4.7 获取当前运行时类声明的注解</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getAnnotations()</code>：获取当前运行时类声明的注解</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 获取当前运行时类声明的注解</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// getAnnotations()：获取当前运行时类声明的注解</span></span>
<span class="line">    <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> anno<span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anno<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-5-调用运行时类的指定结构" tabindex="-1"><a class="header-anchor" href="#_15-5-调用运行时类的指定结构"><span>15.5 调用运行时类的指定结构</span></a></h2><h3 id="_15-5-1-调用运行时类的指定属性" tabindex="-1"><a class="header-anchor" href="#_15-5-1-调用运行时类的指定属性"><span>15.5.1 调用运行时类的指定属性</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getField(String name)</code>：获取指定属性。要求运行时类中属性声明为public。通常不采用此方法</li><li><code>getDeclaredField(String name)</code>：获取运行时类中的指定属性</li><li><code>setAccessible(boolean flag)</code>：保证当前属性是可访问的</li><li><code>set(Object obj, Object value)</code>：设置当前属性的值 <ul><li>obj：指明设置哪个对象的属性</li><li>value：此属性的值设置为多少</li></ul></li><li><code>get(Object obj)</code>：获取当前属性的值 <ul><li>obj 指明获取哪个对象</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取运行时类的对象</span></span>
<span class="line">    <span class="token class-name">Person</span> person <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//  1.getDeclaredField(String name)：获取运行时类中的指定属性</span></span>
<span class="line">    <span class="token class-name">Field</span> name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 2.保证当前属性是可访问的</span></span>
<span class="line">    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 3.设置指定对象此属性的值</span></span>
<span class="line">    name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;小米&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 4.获取指定对象此属性的值</span></span>
<span class="line">    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-5-2-调用运行时类中指定的方法" tabindex="-1"><a class="header-anchor" href="#_15-5-2-调用运行时类中指定的方法"><span>15.5.2 调用运行时类中指定的方法</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：获取运行时类的指定方法 <ul><li>name：方法名称</li><li>parameterTypes：方法的形参列表</li></ul></li><li><code>setAccessible(boolean flag)</code>：保证方法是可以访问的</li><li><code>Object invoke(Object obj, Object... args)</code>：执行方法，并获取返回值 <ul><li>obj：指明是哪个对象。当方法是静态方法时，Obj可以为<code> null</code>，也可以为 <code>运行时类.class</code></li><li>args ：给方法的形参赋值</li><li>返回值： invoke()的返回值即为运行时类中指定方法的返回值。如果运行时类中的方法没有返回值，invoke()的返回值为null</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取运行时类的对象</span></span>
<span class="line">    <span class="token class-name">Person</span> person <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 1.获取指定方法</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * getDeclaredMethod(String name, Class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?</span><span class="token punctuation">&gt;</span></span>... parameterTypes)：获取运行时类的指定方法</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">name</span> 方法名称</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">parameterTypes</span> 方法的形参列表</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token class-name">Method</span> showNation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;showNation&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2.保证当前方法是可访问的</span></span>
<span class="line">    showNation<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3.调用方法，并获取方法返回值</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Object invoke(Object obj, Object... args)：执行方法，并获取返回值</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 指明是哪个对象。当方法是静态方法时，Obj可以为 null，也可以为 运行时类.class</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">args</span> 给方法的形参赋值</span>
<span class="line">     * <span class="token keyword">@return</span> invoke()的返回值即为运行时类中指定方法的返回值。如果运行时类中的方法没有返回值，invoke()的返回值为null</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token class-name">String</span> nation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> showNation<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;***********************调用静态方法**********************************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Method</span> showDesc <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;showDesc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    showDesc<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    showDesc<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    showDesc<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-5-3-调用运行时类指定的构造器" tabindex="-1"><a class="header-anchor" href="#_15-5-3-调用运行时类指定的构造器"><span>15.5.3 调用运行时类指定的构造器</span></a></h3><blockquote><p>相关方法</p></blockquote><ul><li><code>getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>：获取指定构造器</li><li><code>setAccessible(boolean flag)</code>：保证构造器是可以访问的</li><li><code>newInstance(Object ... initargs)</code>：调用构造器，创建运行时类对象 <ul><li>initargs：构造器形参列表</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 1.获取指定构造器</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * getDeclaredConstructor(Class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?</span><span class="token punctuation">&gt;</span></span>... parameterTypes)：获取指定构造器</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">parameterTypes</span>：指明构造器的形参列表</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2.保证构造器是可访问的</span></span>
<span class="line">    constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3.调用构造器创建运行时类对象</span></span>
<span class="line">    <span class="token class-name">Person</span> person1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-6-反射的应用-动态代理" tabindex="-1"><a class="header-anchor" href="#_15-6-反射的应用-动态代理"><span>15.6 反射的应用：动态代理</span></a></h2><blockquote><p>代理模式的原理</p></blockquote><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时讲方法调用转到原始对象上。</p><blockquote><p>静态代理的缺陷</p></blockquote>`,28),sn=n("blockquote",null,[n("p",null,"动态代理")],-1),an=n("li",null,[n("p",null,"定义"),n("p",null,"动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。")],-1),pn=n("li",null,[n("p",null,"使用场景"),n("ul",null,[n("li",null,"调试"),n("li",null,"远程方法调用")])],-1),tn=n("p",null,"抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法",-1),en=e(`<blockquote><p>静态代理的使用举例</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 静态代理类</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2022/12/30 14:29</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建被代理类对象</span></span>
<span class="line">        <span class="token class-name">NikeClothFactory</span> nike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NikeClothFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 创建代理类对象</span></span>
<span class="line">        <span class="token class-name">ProxyClothFactory</span> proxyClothFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span>nike<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 开始生产服装</span></span>
<span class="line">        proxyClothFactory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 服装工厂接口：定义生产衣服的接口</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">ClothFactory</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 代理类：服装代理加工厂</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ProxyClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ClothFactory</span> clothFactory<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span><span class="token class-name">ClothFactory</span> clothFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>clothFactory <span class="token operator">=</span> clothFactory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服装代理加工厂开始进行一些准备工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        clothFactory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服装代理加工厂开始进行收尾工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 被代理类</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">NikeClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Nike服装加工厂生产一批运动服&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>动态代理的使用举例</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 动态代理举例</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2022/12/30 14:42</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建被代理类</span></span>
<span class="line">        <span class="token class-name">NikeClothFactory1</span> nike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NikeClothFactory1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建代理类</span></span>
<span class="line">        <span class="token class-name">ClothFactory1</span> clothFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ClothFactory1</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>nike<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 调用服装生产方法</span></span>
<span class="line">        clothFactory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 服装工厂接口：定义生产衣服的接口</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">ClothFactory1</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 被代理类</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">NikeClothFactory1</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory1</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Nike服装加工厂生产一批运动服&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 要想实现动态代理，需要解决如下两个问题：</span>
<span class="line"> *  1.如何根据被代理类创建一个代理类？</span>
<span class="line"> *  2.如何在调用代理类a的方法时自动调用被代理类的a方法？</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 代理工厂类</span>
<span class="line"> *  用来解决“根据被代理类创建代理类”的问题</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 根据被代理类对象创建代理对象</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 被代理类对象</span>
<span class="line">     * <span class="token keyword">@return</span> 代理类对象</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyInvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        handler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 创建MyInvocationHandler实现InvocationHandler，并实现InvocationHandler的invoke()</span>
<span class="line"> * 用来解决“在调用代理类a方法时动态的去调用被代理类的a方法”问题</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 被代理类对象</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 被绑定代理类对象（该功能也可以使用构造方法实现）</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">obj</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 当通过代理类对象，调用方法a时，会自动的调用如下方法invoke()</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">proxy</span> 代理类对象</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">method</span> 代理类要调用的方法</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">args</span> 代理类要调用方法的参数</span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// method：代理类要调用的方法，同时，此方法也就作为了被代理类要调用的方法</span></span>
<span class="line">        <span class="token comment">// method.invoke()的返回值就作为当前类invoke()方法的返回值</span></span>
<span class="line">        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function ln(cn,on){const a=c("front");return o(),i("div",null,[k,r,d,n("ul",null,[n("li",null,[n("p",null,[s("Reflection（反射）是被视为"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("动态语言")]),_:1}),s("的关键，反射机制允许程序在执行期间借助于Reflection API获取任何类的内部信息，并能直接操作任意对象的内部属性及方法")])]),n("li",null,[n("p",null,[s("加载完类之后，在堆内存的方法区就产生了一个Class类型的对象（一个类只能有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射")]),_:1})])]),v]),m,b,g,n("ul",null,[n("li",null,[p(a,{color:"red"},{default:t(()=>[s("动态语言")]),_:1}),s("："),n("ul",null,[n("li",null,[s("定义：是一类在运行时可以改变其结构的语言，例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或者是其他结构上的变化。通俗来说就是"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("在运行时代码可以根据某些条件改变自身结构")]),_:1}),s("。")]),y])]),n("li",null,[p(a,{color:"red"},{default:t(()=>[s("静态语言")]),_:1}),s("："),n("ul",null,[n("li",null,[s("定义："),p(a,{style:{background:"yellow"}},{default:t(()=>[s("运行时结构不可变的语言")]),_:1})]),h])])]),p(a,{color:"red"},{default:t(()=>[s("Java不是动态语言，但是Java可以称为准动态语")]),_:1}),s("。即Java有一定的动态性，我们"),f,s("。"),w,n("p",null,[p(a,{color:"red"},{default:t(()=>[s("不矛盾")]),_:1}),s("。")]),_,j,C,n("ul",null,[n("li",null,[q,n("p",null,[s("程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾），接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。 将字节码文件加载到内存中（或者说使用java.exe命令对字节码文件进行解释运行）的过程就称为"),p(a,{color:"red"},{default:t(()=>[s("类的加载")]),_:1}),s("。"),n("strong",null,[s("加载到内存中的类，就称为"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("运行时类")]),_:1}),s("，此运行时类，就作为Class的一个实例。")])])]),S]),z,n("ul",null,[x,P,n("li",null,[T,n("p",null,[p(a,{color:"red"},{default:t(()=>[s("只要数组的类型和维度一样，就是同一个Class实例。")]),_:1})]),F]),M,I,N,D]),L,A,n("ul",null,[n("li",null,[p(a,{color:"red"},{default:t(()=>[s("类的加载")]),_:1}),s("：将class文件字节码内容加载到内存中，并将这些静态数据转成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器的参与。")]),n("li",null,[p(a,{color:"red"},{default:t(()=>[s("{类的链接")]),_:1}),s("：将java类的二进制字节码合并到JVM的运行过程中的过程。"),n("ul",null,[O,n("li",null,[s("准备：正式为类的static变量分配内存并"),p(a,{color:"magenta"},{default:t(()=>[s("设置类变量默认初始值")]),_:1}),s("，这些内存都将在方法区中进行分配")]),J])]),n("li",null,[p(a,{color:"red"},{default:t(()=>[s("类的初始化")]),_:1}),n("ul",null,[n("li",null,[s("执行"),p(a,{color:"magenta"},{default:t(()=>[s("类构造器"),E]),_:1}),s("方法的过程。执行"),p(a,{color:"magenta"},{default:t(()=>[s("类构造器"),V,s("()是由编译期自动收集类中所有类变量的复制动作和静态代码块中的语句合并产生的")]),_:1}),s("。（类构造器是构造类信息的，不是构造该类对象的构造器）")]),B,R])])]),H,n("ul",null,[n("li",null,[n("p",null,[s("类加载器的作用：将class文件字节码内容加载到内存中，并将这些静态数据执行"),p(a,{color:"magenta"},{default:t(()=>[s("转换成方法区的运行时数据结构")]),_:1}),s("，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口")])]),G,n("li",null,[$,n("p",null,[s("以下几个类加载器的加载原则：执行"),p(a,{color:"magenta"},{default:t(()=>[s("自底向上检查是否已装载，自顶向下尝试加载类")]),_:1}),s("。")]),n("ul",null,[n("li",null,[K,s("：执行"),p(a,{color:"magenta"},{default:t(()=>[s("引导类加载器")]),_:1}),s("。C++编写的，是JVM自带的类加载器，执行"),p(a,{color:"red"},{default:t(()=>[s("负责Java平台的核心库")]),_:1}),s("，用来装载核心类库。该加载器无法直接获取，自然也无法让Bootstrap Classloader加载自己定义的类。")]),n("li",null,[Q,s("：执行"),p(a,{color:"magenta"},{default:t(()=>[s("扩展类加载器")]),_:1}),s("。负责执行"),p(a,{color:"red"},{default:t(()=>[s("jre/lib/ext目录下的jar包或者-D java.ext.dirs 指定目录下的jar包")]),_:1}),s("装入工作库")]),n("li",null,[U,s("：执行"),p(a,{color:"magenta"},{default:t(()=>[s("系统类加载器")]),_:1}),s("。负责执行"),p(a,{color:"red"},{default:t(()=>[s("java -classpath或者-D java.class.path 指定目录下的类与jar包")]),_:1}),s("装入工作库，自定义的类也是通过System Classloader加载的")]),W])]),X]),Y,n("p",null,[s("Reflection（反射）是被视为"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("动态语言")]),_:1}),s("的关键，动态语言就是在"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("运行时")]),_:1}),s("代码可以根据某些条件改变自身结构")]),Z,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("动态代理中可能会用到")]),_:1})]),nn,n("p",null,[s("6.8小节中的代理机制的操作，属于静态代理，"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("特征")]),_:1}),s("是代理类和被代理类都是在编译期间确定下来的，不利于程序的扩展。同时，每一个代理类只能为一个（或者一套）接口服务，这样一来程序开发中必然产生过多的代理。执行"),p(a,{color:"red"},{default:t(()=>[s("最好是可以通过一个代理类完成全部的代理功能。")]),_:1})]),sn,n("ul",null,[an,pn,n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("相较于静态代理的优点")]),_:1}),tn])]),en])}const kn=l(u,[["render",ln],["__file","15_Java反射机制.html.vue"]]),rn=JSON.parse('{"path":"/static/tang/java2/15_Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html","title":"15 Java反射机制","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"15.1 Java反射机制概述","slug":"_15-1-java反射机制概述","link":"#_15-1-java反射机制概述","children":[]},{"level":2,"title":"15.2 java.lang.Class","slug":"_15-2-java-lang-class","link":"#_15-2-java-lang-class","children":[]},{"level":2,"title":"15.3 创建运行时类的对象","slug":"_15-3-创建运行时类的对象","link":"#_15-3-创建运行时类的对象","children":[{"level":3,"title":"15.3.1 Class newInstance()的使用","slug":"_15-3-1-class-newinstance-的使用","link":"#_15-3-1-class-newinstance-的使用","children":[]},{"level":3,"title":"15.3.2 体会反射的动态性","slug":"_15-3-2-体会反射的动态性","link":"#_15-3-2-体会反射的动态性","children":[]}]},{"level":2,"title":"15.4 获取运行时类的完整结构","slug":"_15-4-获取运行时类的完整结构","link":"#_15-4-获取运行时类的完整结构","children":[{"level":3,"title":"15.4.1 获取运行时类的属性结构","slug":"_15-4-1-获取运行时类的属性结构","link":"#_15-4-1-获取运行时类的属性结构","children":[]},{"level":3,"title":"15.4.2 获取运行时类的方法结构","slug":"_15-4-2-获取运行时类的方法结构","link":"#_15-4-2-获取运行时类的方法结构","children":[]},{"level":3,"title":"15.4.3 获取当前运行时类的构造器","slug":"_15-4-3-获取当前运行时类的构造器","link":"#_15-4-3-获取当前运行时类的构造器","children":[]},{"level":3,"title":"15.4.4 获取当前运行时类的父类","slug":"_15-4-4-获取当前运行时类的父类","link":"#_15-4-4-获取当前运行时类的父类","children":[]},{"level":3,"title":"15.4.5 获取当前运行时类实现的接口","slug":"_15-4-5-获取当前运行时类实现的接口","link":"#_15-4-5-获取当前运行时类实现的接口","children":[]},{"level":3,"title":"15.4.6 获取当前运行时类所在的包","slug":"_15-4-6-获取当前运行时类所在的包","link":"#_15-4-6-获取当前运行时类所在的包","children":[]},{"level":3,"title":"15.4.7 获取当前运行时类声明的注解","slug":"_15-4-7-获取当前运行时类声明的注解","link":"#_15-4-7-获取当前运行时类声明的注解","children":[]}]},{"level":2,"title":"15.5 调用运行时类的指定结构","slug":"_15-5-调用运行时类的指定结构","link":"#_15-5-调用运行时类的指定结构","children":[{"level":3,"title":"15.5.1 调用运行时类的指定属性","slug":"_15-5-1-调用运行时类的指定属性","link":"#_15-5-1-调用运行时类的指定属性","children":[]},{"level":3,"title":"15.5.2 调用运行时类中指定的方法","slug":"_15-5-2-调用运行时类中指定的方法","link":"#_15-5-2-调用运行时类中指定的方法","children":[]},{"level":3,"title":"15.5.3 调用运行时类指定的构造器","slug":"_15-5-3-调用运行时类指定的构造器","link":"#_15-5-3-调用运行时类指定的构造器","children":[]}]},{"level":2,"title":"15.6 反射的应用：动态代理","slug":"_15-6-反射的应用-动态代理","link":"#_15-6-反射的应用-动态代理","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/15_Java反射机制.md"}');export{kn as comp,rn as data};
