import{_ as t,o as a,c as e,b as l}from"./app-CW2dCZSC.js";const i={},c=l('<h1 id="_10-cap定理" tabindex="-1"><a class="header-anchor" href="#_10-cap定理"><span>10 CAP定理</span></a></h1><h2 id="_10-1-概念" tabindex="-1"><a class="header-anchor" href="#_10-1-概念"><span>10.1 概念</span></a></h2><ul><li><p>CAP定理，又称布鲁尔定理</p></li><li><p>C(Consistency)：一致性。指数据在多个副本之间能够保持一致的特性，在同一时刻是否具有同样的值。 一致性，可以分为强一致性和弱一致性。</p><ul><li>强一致性：在任意时刻，所有节点中的数据都保持一致性。</li><li>弱一致性：数据更新后，如果能容忍短时间内的访问只能访问到部分或者全部访问不到，就是弱一致性。最终一致性就属于弱一致性。</li></ul></li><li><p>A(Avaliablity)：可用性。指系统提供的服务必须一直处于可用状态。每次只要收到用户的请求，服务器就必须给出回应。在合理的时间内返回合理的相应（不是错误和超时的响应）。保证服务的可用性，就是搭建集群。</p></li><li><p>P(Partition tolerance)：在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，但是他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的分区。分区容错的意思是，区间通信可能失败。</p></li><li><p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP</p></li></ul><h2 id="_10-2-cap取舍策略" tabindex="-1"><a class="header-anchor" href="#_10-2-cap取舍策略"><span>10.2 CAP取舍策略</span></a></h2><p><strong>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。</strong></p><table><thead><tr><th>策略</th><th>分析结果</th></tr></thead><tbody><tr><td>CA</td><td>满足一致性和可用性，放弃分区容错。说白了，就是一个整体应用，不是分布式应用</td></tr><tr><td>CP</td><td>满足一致性和分区容错性，放弃可用性。当系统被分区，为了保证一致性，必须放弃可用性，让系统停掉。如银行系统</td></tr><tr><td>AP</td><td>满足可用性和分区容错性，放弃一致性。当系统被分区，为了保证可用性，就必须让节点继续对外服务，这就意味着失去一致性。分布式系统中最常用策略。</td></tr></tbody></table>',6),r=[c];function s(n,d){return a(),e("div",null,r)}const o=t(i,[["render",s],["__file","10_CAP定理.html.vue"]]),_=JSON.parse('{"path":"/static/tang/Elasticsearch/10_CAP%E5%AE%9A%E7%90%86.html","title":"10 CAP定理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"10.1 概念","slug":"_10-1-概念","link":"#_10-1-概念","children":[]},{"level":2,"title":"10.2 CAP取舍策略","slug":"_10-2-cap取舍策略","link":"#_10-2-cap取舍策略","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/Elasticsearch/10_CAP定理.md"}');export{o as comp,_ as data};
