import{_ as d,r as c,o as p,c as r,e as s,a,w as i,d as n,b as e}from"./app-CQavEA7Q.js";const t={},v=e('<h1 id="_18-mysql8-0新特性" tabindex="-1"><a class="header-anchor" href="#_18-mysql8-0新特性"><span>18 MySQL8.0新特性</span></a></h1><h2 id="_18-1-mysql80-0新特性概述" tabindex="-1"><a class="header-anchor" href="#_18-1-mysql80-0新特性概述"><span>18.1 MySQL80.0新特性概述</span></a></h2><h3 id="_18-1-1-mysql8-0新增特性" tabindex="-1"><a class="header-anchor" href="#_18-1-1-mysql8-0新增特性"><span>18.1.1 MySQL8.0新增特性</span></a></h3>',3),o=e("<li><p><strong>更简便的NoSQL支持</strong>。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。MySQL8.0对这一功能做了优化，以更灵活的方式实现NoSQL，不再依赖模式。</p></li><li><p><strong>更好的索引</strong>。新增<code>隐藏索引</code>和<code>降序索引</code>。<code>隐藏索引</code>可以用来测试去掉索引对查询性能的影响；在查询中混合存在多列索引时，使用<code>降序索引</code>可以提高查询性能。</p></li><li><p><strong>更完善的JSON支持</strong>。从5.7版本开始支持原生json数据的存储，8.0进行了优化。</p><ul><li>增加了聚合函数<code>JSON_ARRAYGG</code>和<code>JSON_OBJECTAGG</code>，将参数聚合为JSON数组或对象；</li><li>新增行内操作符<code>-&gt;&gt;</code>，是列路径运算符<code>-&gt;</code>的增强，对JSON排序做了提升；</li><li>优化了JSON的更新操作</li></ul></li><li><p><strong>安全和账户管理</strong>。新增<code>caching_sha2_password</code>授权插件、角色、密码历史记录和FIPS模式支持。提高了数据库的安全性和性能，使数据库管理员能更灵活的进行账户管理工作。</p></li><li><p><strong>InnoDB的变化</strong>。<code>InnoDB是MySQL默认的存储引擎</code>，8.0在其自增、索引、加密、死锁、共享锁等方面做了大量的<code>改进和优化</code>，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的支持。</p></li><li><p><strong>数据字典</strong>。新增事务数据字典，用来存储数据库对象信息。数据字典存储在内部事务表中。</p></li><li><p><strong>原子数据定义语言</strong>，即<code>原子DDL</code>。目前只有InnoDB引擎支持。</p><ul><li>定义：原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎操作、二进制日志写入结合到一个单独的原子事务中。</li><li>好处：即使服务器崩溃，事务也会提交或回滚。</li><li>具体表现：使用支持原子DDL的引擎所创建的表，在执行<code>DROP TABLE</code>、<code>CREATE TABLE</code>、<code>ALTER TABLE</code>、<code>RENAME TABLE</code>、<code>TRUNCATE TABLE</code>、<code>CREATE TABLESPACE</code>、<code>DROP TABLESPACE</code>等操作时，都支持原子操作，即<em>事务要么完全操作成功，要么失败后回滚，不再进行部分提交</em>。</li></ul></li><li><p><strong>资源管理</strong>。MySQL 8开始支持创建和管理<code>资源组</code>，允许将服务器内运行的线程分配给特定的分组，以便线程根据组内可用资源执行.</p></li><li><p><strong>字符集支持</strong>。MySQL 8默认字符集改为<code>utf8mb4</code> ，并首次增加了日语所特定使用的集 合，utf8mb4_ja_0900_as_cs。</p></li><li><p><strong>优化器增强</strong>。MySQL优化器开始支持隐藏索引和降序索引。隐藏索引不会被优化器使用，验证索引的必 要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许 优化器对多个列进行排序，并且允许排序顺序不一致。</p></li><li><p><strong>公用表表达式</strong>。公用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持<code>递归</code>和<code>非递归</code>两种形式的CTE。</p></li>",11),m=s("p",null,[s("strong",null,"窗口函数"),n("。在之前的版本中已存在的大部分 聚合函数 在MySQL 8中也可以 作为窗口函数来使用。")],-1),u=e("<li><p><strong>正则表达式支持</strong>。增加了<code>REGEXP_LIKE()</code>、<code> EGEXP_INSTR()</code>、<code>REGEXP_REPLACE()</code>和 <code>REGEXP_SUBSTR()</code>等函数来提升性能，另外，<code>regexp_stack_limit</code>和 <code>regexp_time_limit</code>系统变量能够通过匹配引擎来控制资源消耗。</p></li><li><p><strong>内部临时表</strong>。<code>TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎 </code>。TempTable存储 引擎为VARCHAR和VARBINARY列提供高效存储。<code>internal_tmp_mem_storage_engine</code>会话变量定义了内部 临时表的存储引擎，可选的值有两个，<code>TempTable</code>和<code>MEMORY</code>，其中TempTable为默认的存储引擎。 <code>temptable_max_ram</code>系统配置项定义了TempTable存储引擎可使用的最大内存数量。</p></li><li><p><strong>日志记录</strong>。在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量 log_error_services来配置，能够实现日志事件的过滤和写入。</p></li><li></li><li><p><strong>增强的MySQL复制</strong>。MySQL 8复制支持对<code>JSON文档</code>进行<code>部分更新</code>的<code>二进制日志记录</code> ，该记录使用紧凑的二进制格式 ，从而<em>节省记录完整JSON文档的空间</em>。当使用基于语句的日志记录时，这种紧凑的日志记录会自动完成，并且可以通过将新的<code>binlog_row_value_options</code>系统变量值设置为PARTIAL_JSON来启用。</p></li>",5),_=e(`<h3 id="_18-1-2-mysql8-0移除的就特性" tabindex="-1"><a class="header-anchor" href="#_18-1-2-mysql8-0移除的就特性"><span>18.1.2 MySQL8.0移除的就特性</span></a></h3><ul><li><strong>查询缓存</strong>。查询缓存已被移除 ，删除的项有： <ul><li>语句：FLUSH QUERY CACHE和RESET QUERY CACHE。</li><li>系统变量：query_cache_limit、query_cache_min_res_unit、query_cache_size、 query_cache_type、query_cache_wlock_invalidate。</li><li>状态变量：Qcache_free_blocks、 Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、 Qcache_queries_in_cache、Qcache_total_blocks。</li><li>线程状态：checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。</li></ul></li><li><strong>加密相关</strong>。 <ul><li>删除的加密相关的内容有：ENCODE()、DECODE()、ENCRYPT()、DES_ENCRYPT()和 DES_DECRYPT()函数，配置项des-key-file，系统变量have_crypt，FLUSH语句的DES_KEY_FILE选项， HAVE_CRYPT CMake选项。</li><li>对于移除的ENCRYPT()函数，考虑使用SHA2()替代，对于其他移除的函数，使 用AES_ENCRYPT()和AES_DECRYPT()替代。</li></ul></li><li><strong>空间函数相关</strong>。在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在MySQL 8中都已被 移除，只保留了对应的ST_和MBR函数。</li><li><strong>\\N和NULL</strong>。在SQL语句中，解析器不再将\\N视为NULL，所以在SQL语句中应使用NULL代替\\N。这项变化 不会影响使用LOAD DATA INFILE或者SELECT...INTO OUTFILE操作文件的导入和导出。在这类操作中，NULL 仍等同于\\N。</li><li><strong>mysql_install_db</strong>。在MySQL分布中，已移除了mysql_install_db程序，数据字典初始化需要调用带着-- initialize或者--initialize-insecure选项的mysqld来代替实现。另外，--bootstrap和INSTALL_SCRIPTDIR CMake也已被删除。</li><li><strong>通用分区处理程序</strong>。通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存 储引擎需要自有的分区处理程序。 提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在 MySQL 8中只支持InnoDB。</li><li><strong>系统和状态变量信息</strong>。在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。 GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS表都已被删除。另外，系 统变量show_compatibility_56也已被删除。被删除的状态变量有Slave_heartbeat_period、 Slave_last_heartbeat,Slave_received_heartbeats、Slave_retried_transactions、Slave_running。以上被删除 的内容都可使用性能模式中对应的内容进行替代。</li><li><strong>mysql_plugin工具</strong>。mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用--plugin-load或- -plugin-load-add选项在服务器启动时加载插件或者在运行时使用INSTALL PLUGIN语句加载插件来替代该 工具</li></ul><h2 id="_18-2-新特性1-窗口函数" tabindex="-1"><a class="header-anchor" href="#_18-2-新特性1-窗口函数"><span>18.2 新特性1-窗口函数</span></a></h2><h3 id="_18-2-1-概述" tabindex="-1"><a class="header-anchor" href="#_18-2-1-概述"><span>18.2.1 概述</span></a></h3><ul><li><p><strong>作用</strong>：类似于在查询中使用<code>GROUP BY</code>对数据进行分组，不同的是，分组操作会把分组的结果汇聚成一条记录，<em>窗口函数是将结果置于每一条数据记录中</em>。</p></li><li><p><strong>分类</strong>：</p><ul><li><code>静态窗口函数</code>：函数的窗口大小是固定的，不会因为记录的不同而不同</li><li><code>动态窗口函数</code>：函数的窗口大小会随着记录的不同而变化</li></ul></li><li><p><strong>概览</strong>：窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下：</p><table><thead><tr><th>函数分类</th><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>序号函数</td><td>ROW_NUMBER()</td><td>顺序排序</td></tr><tr><td>序号函数</td><td>RANK()</td><td>并列排序，会跳过重复的序号，如1、1、3</td></tr><tr><td>序号函数</td><td>DENSE_RANK()</td><td>并列排序，不会跳过重复的序号，如1、1、2</td></tr><tr><td>分布函数</td><td>PERCENT_RANK</td><td>等级值百分比</td></tr><tr><td>分布函数</td><td>CUME_DIST()</td><td>累积分布值</td></tr><tr><td>前后函数</td><td>LAG(expr, n)</td><td>返回当前行的往前数第n行的expr的值。expr是表中字段名</td></tr><tr><td>前后函数</td><td>LEAD(expr, n)</td><td>返回当前行的往后数第n行的expr的值。expr是表中字段名</td></tr><tr><td>首尾函数</td><td>FIRST_VALUE(expr)</td><td>返回第一个expr的值。expr是表中字段名</td></tr><tr><td>首尾函数</td><td>LAST_VALUE(expr)</td><td>返回最后一个expr的值。expr是表中字段名</td></tr><tr><td>其他函数</td><td>NTH_VALUE(expr, n)</td><td>返回第n个expr的值。expr是表中字段名</td></tr><tr><td>其他函数</td><td>NTILE(n)</td><td>将分区中的有序数据分成n个桶，记录桶编号</td></tr></tbody></table></li></ul><h3 id="_18-2-2-语法" tabindex="-1"><a class="header-anchor" href="#_18-2-2-语法"><span>18.2.2 语法</span></a></h3><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT [列名1, 列名2, ...,] 函数 OVER ([PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC])</span>
<span class="line">FROM ...</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT [列名1, 列名2, ...,] 函数 OVER 窗口名</span>
<span class="line">FROM ...</span>
<span class="line">[WHERE ...]</span>
<span class="line">WINDOW 窗口名 AS ([PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC])</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),b=e(`<ul><li><p><code>OVER</code>：指定窗口函数的范围。</p><ul><li><p>如果省略括号中的内容（即<code>函数 OVER()</code>），则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录并进行计算。</p></li><li><p>如果OVER()中使用了ORDER BY，FROM后边建议不要使用ORDER BY了，否则结果出人意料：</p><p>当sql语句中的order by子句里的内容和窗口函数over()中的order by子句里的内容一样，那么sql语句中的排序将先执行,窗口函数在分析时就不必再排序；order by 字段两者不一致时，那么sql语句中的排序将最后在窗口函数分析结束后执行排序。所以如果在over中已经添加了order by…，就不建议在from后面再添加相同的order by。二者一致的话还好(效果一样，没有差别)，但不一致时结果有时就可能令人费解了。</p></li><li><p><code>OVER ([PARTITION BY 字段名1 ORDER BY 字段名2 ASC|DESC])</code>表示根据字段名1进行分组，在分组内按照字段名2排序</p></li></ul></li><li><p><code>PARTITION BY</code>：指定窗口函数按照哪些字段进行分组。</p><p>分组后，窗口函数可以在每个分组中分别执行。</p></li><li><p><code>ORDER BY</code>：指定窗口函数按照哪些字段进行排序。</p><p>执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号</p></li><li><p><code>WINDOW 子句</code>：可以只用WINDOW子句为窗口函数命名，在窗口函数的OVER关键字后边直接使用窗口名即可</p></li></ul><h3 id="_18-2-3-序号函数" tabindex="-1"><a class="header-anchor" href="#_18-2-3-序号函数"><span>18.2.3 序号函数</span></a></h3><h5 id="_1-row-number" tabindex="-1"><a class="header-anchor" href="#_1-row-number"><span>① ROW_NUMBER()</span></a></h5><ul><li><p>语法：<code>ROW_NUMBER() OVER ([PARTITION BY 字段1 ORDER BY 字段名2 ASC|DESC])</code></p></li><li><p>含义：</p><ul><li>按照字段1分组，分组内按照字段2排序，然后按照排好的顺序给<strong>每个分组内</strong>的记录按照顺序编号。</li><li><strong>每个分组内的编号是连续且唯一的</strong>。</li><li>如果<code>PARTITION BY 字段1</code>省略，表示整个表是一个分组</li><li>如果<code>ORDER BY 字段名2</code>省略，按照默认排序方式进行排序</li></ul></li><li><p>举例：查询goods中商品信息，并给不用类型的服装以价格由高到低进行编号，且保持编号的唯一性。</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT row_number() OVER (PARTITION BY category_id ORDER BY price DESC) AS num, id, category_id, \`NAME\`, price</span>
<span class="line">    -&gt; FROM goods;</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">| num | id | category_id | NAME            | price   |</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">|   1 |  7 |           1 | 呢绒外套        |  399.90 |</span>
<span class="line">|   2 |  5 |           1 | 牛仔裤          |   89.90 |</span>
<span class="line">|   3 |  9 |           1 | 卫衣            |   89.90 |</span>
<span class="line">|   4 |  2 |           1 | 连衣裙          |   79.90 |</span>
<span class="line">|   5 |  1 |           1 | T恤             |   39.90 |</span>
<span class="line">|   6 | 11 |           1 | 百褶裙          |   29.90 |</span>
<span class="line">|   1 | 10 |           2 | 山地自行车      | 1399.90 |</span>
<span class="line">|   2 |  6 |           2 | 运动外套        |  799.90 |</span>
<span class="line">|   3 | 12 |           2 | 滑板            |  499.90 |</span>
<span class="line">|   4 |  4 |           2 | 骑行装备        |  399.90 |</span>
<span class="line">|   5 |  8 |           2 | 自行车          |  399.90 |</span>
<span class="line">|   6 |  3 |           2 | 登山杖          |   59.90 |</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">12 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_2-rank-函数" tabindex="-1"><a class="header-anchor" href="#_2-rank-函数"><span>② RANK()函数</span></a></h5><ul><li><p>语法：<code>RANK() OVER ([PARTITION BY 字段1 ]ORDER BY 字段名2 ASC|DESC)</code></p></li><li><p>含义：</p><ul><li>按照字段1分组，分组内按照字段2排序，然后按照排好的顺序给<strong>每个分组内</strong>的记录按照顺序编号。</li><li>序号是可以重复的。</li><li>会跳过重复序号，如1、2、2、4</li></ul></li><li><p>说明：OVER()中必须使用ORDER BY 语句，否则排序序号全都为1</p></li><li><p>举例：查询goods中商品信息，并给不用类型的服装以价格由高到低进行编号，且跳过重复序号</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS num, id, category_id, \`NAME\`, price</span>
<span class="line">    -&gt; FROM goods;</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">| num | id | category_id | NAME            | price   |</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">|   1 |  7 |           1 | 呢绒外套        |  399.90 |</span>
<span class="line">|   2 |  5 |           1 | 牛仔裤          |   89.90 |</span>
<span class="line">|   2 |  9 |           1 | 卫衣            |   89.90 |</span>
<span class="line">|   4 |  2 |           1 | 连衣裙          |   79.90 |</span>
<span class="line">|   5 |  1 |           1 | T恤             |   39.90 |</span>
<span class="line">|   6 | 11 |           1 | 百褶裙          |   29.90 |</span>
<span class="line">|   1 | 10 |           2 | 山地自行车      | 1399.90 |</span>
<span class="line">|   2 |  6 |           2 | 运动外套        |  799.90 |</span>
<span class="line">|   3 | 12 |           2 | 滑板            |  499.90 |</span>
<span class="line">|   4 |  4 |           2 | 骑行装备        |  399.90 |</span>
<span class="line">|   4 |  8 |           2 | 自行车          |  399.90 |</span>
<span class="line">|   6 |  3 |           2 | 登山杖          |   59.90 |</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">12 rows in set (0.00 sec)</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_3-dense-rank-函数" tabindex="-1"><a class="header-anchor" href="#_3-dense-rank-函数"><span>③ DENSE_RANK()函数</span></a></h5><ul><li><p>语法：<code>DENSE_RANK() OVER ([PARTITION BY 字段1 ]ORDER BY 字段名2 ASC|DESC)</code></p></li><li><p>含义：</p><ul><li>按照字段1分组，分组内按照字段2排序，然后按照排好的顺序给<strong>每个分组内</strong>的记录按照顺序编号。</li><li>序号是可以重复的。</li><li>不会跳过重复序号，如1、2、2、3</li></ul></li><li><p>说明：OVER()中必须使用ORDER BY 语句，否则排序序号全都为1</p></li><li><p>举例：查询goods中商品信息，并给不用类型的服装以价格由高到低进行编号，且不要跳过重复序号。</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT DENSE_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS num, id, category_id, \`NAME\`, price</span>
<span class="line">    -&gt; FROM goods;</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">| num | id | category_id | NAME            | price   |</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">|   1 |  7 |           1 | 呢绒外套        |  399.90 |</span>
<span class="line">|   2 |  5 |           1 | 牛仔裤          |   89.90 |</span>
<span class="line">|   2 |  9 |           1 | 卫衣            |   89.90 |</span>
<span class="line">|   3 |  2 |           1 | 连衣裙          |   79.90 |</span>
<span class="line">|   4 |  1 |           1 | T恤             |   39.90 |</span>
<span class="line">|   5 | 11 |           1 | 百褶裙          |   29.90 |</span>
<span class="line">|   1 | 10 |           2 | 山地自行车      | 1399.90 |</span>
<span class="line">|   2 |  6 |           2 | 运动外套        |  799.90 |</span>
<span class="line">|   3 | 12 |           2 | 滑板            |  499.90 |</span>
<span class="line">|   4 |  4 |           2 | 骑行装备        |  399.90 |</span>
<span class="line">|   4 |  8 |           2 | 自行车          |  399.90 |</span>
<span class="line">|   5 |  3 |           2 | 登山杖          |   59.90 |</span>
<span class="line">+-----+----+-------------+-----------------+---------+</span>
<span class="line">12 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_18-2-4-分布函数" tabindex="-1"><a class="header-anchor" href="#_18-2-4-分布函数"><span>18.2.4 分布函数</span></a></h3><h5 id="_1-percent-rank-函数" tabindex="-1"><a class="header-anchor" href="#_1-percent-rank-函数"><span>① PERCENT_RANK()函数</span></a></h5><ul><li><p>语法：<code>PERCENT_RANK() OVER ([PARTITION BY 字段1 ]ORDER BY 字段名2 ASC|DESC)</code></p></li><li><p>含义：</p><ul><li>按照RANK()函数计算出来的编号，计算当前分组中每条记录的<strong>等级值百分比</strong></li><li>公式为<code>(rank-1)/(rows-1)</code>，其中rank为使用RANK()产生的序号，rows为当前分组中的总记录条数</li></ul></li><li><p>说明：OVER()中必须使用ORDER BY语句，否则计算出来的值为0（因为rank=1）</p></li><li><p>举例：查询goods中商品信息，并计算不同类别的商品价格的等级百分比</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS r,</span>
<span class="line">    -&gt; PERCENT_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS &#39;pr_%&#39;,</span>
<span class="line">    -&gt; id, category_id, category, NAME, price, stock</span>
<span class="line">    -&gt; FROM goods;</span>
<span class="line">+---+------+----+-------------+---------------------+-----------------+---------+-------+</span>
<span class="line">| r | pr_% | id | category_id | category            | NAME            | price   | stock |</span>
<span class="line">+---+------+----+-------------+---------------------+-----------------+---------+-------+</span>
<span class="line">| 1 |    0 |  7 |           1 | 女装/女士精品       | 呢绒外套        |  399.90 |  1200 |</span>
<span class="line">| 2 |  0.2 |  5 |           1 | 女装/女士精品       | 牛仔裤          |   89.90 |  3500 |</span>
<span class="line">| 2 |  0.2 |  9 |           1 | 女装/女士精品       | 卫衣            |   89.90 |  1500 |</span>
<span class="line">| 4 |  0.6 |  2 |           1 | 女装/女士精品       | 连衣裙          |   79.90 |  2500 |</span>
<span class="line">| 5 |  0.8 |  1 |           1 | 女装/女士精品       | T恤             |   39.90 |  1000 |</span>
<span class="line">| 6 |    1 | 11 |           1 | 女装/女士精品       | 百褶裙          |   29.90 |   500 |</span>
<span class="line">| 1 |    0 | 10 |           2 | 户外运动            | 山地自行车      | 1399.90 |  2500 |</span>
<span class="line">| 2 |  0.2 |  6 |           2 | 户外运动            | 运动外套        |  799.90 |   500 |</span>
<span class="line">| 3 |  0.4 | 12 |           2 | 户外运动            | 滑板            |  499.90 |  1200 |</span>
<span class="line">| 4 |  0.6 |  4 |           2 | 户外运动            | 骑行装备        |  399.90 |  3500 |</span>
<span class="line">| 4 |  0.6 |  8 |           2 | 户外运动            | 自行车          |  399.90 |  1000 |</span>
<span class="line">| 6 |    1 |  3 |           2 | 户外运动            | 登山杖          |   59.90 |  1500 |</span>
<span class="line">+---+------+----+-------------+---------------------+-----------------+---------+-------+</span>
<span class="line">12 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_2-cume-dist-函数" tabindex="-1"><a class="header-anchor" href="#_2-cume-dist-函数"><span>② CUME_DIST()函数</span></a></h5><ul><li><p>语法：<code>CUME_DIST() OVER ([PARTITION BY 字段1 ]ORDER BY 字段名2 ASC|DESC)</code></p></li><li><p>含义：计算每条记录在当前分组中所占百分比，公式如下：</p><ul><li>使用<code>ASC</code>升序排序：根据公式<code>当前分组中小于等于当前值的数据行数 / 该分组总行数totalrows</code>计算每条记录的百分比</li><li>使用<code>DESC</code>降序排序：根据公式<code>当前分组中大于等于当前值的数据行数 / 该分组总行数totalrows</code>计算每条记录的百分比</li></ul></li><li><p>说明：OVER()中必须使用ORDER BY语句，否则计算出来的值都为1</p></li><li><p>举例：查询goods中商品信息，并计算不同类别的商品价格小于等于当前商品价格的比例</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT CUME_DIST() OVER (PARTITION BY category_id ORDER BY price ASC) AS &#39;cd_%&#39;,</span>
<span class="line">    -&gt; id, category, NAME, price</span>
<span class="line">    -&gt; FROM goods;</span>
<span class="line">+---------------------+----+---------------------+-----------------+---------+</span>
<span class="line">| cd_%                | id | category            | NAME            | price   |</span>
<span class="line">+---------------------+----+---------------------+-----------------+---------+</span>
<span class="line">| 0.16666666666666666 | 11 | 女装/女士精品       | 百褶裙          |   29.90 |</span>
<span class="line">|  0.3333333333333333 |  1 | 女装/女士精品       | T恤             |   39.90 |</span>
<span class="line">|                 0.5 |  2 | 女装/女士精品       | 连衣裙          |   79.90 |</span>
<span class="line">|  0.8333333333333334 |  5 | 女装/女士精品       | 牛仔裤          |   89.90 |</span>
<span class="line">|  0.8333333333333334 |  9 | 女装/女士精品       | 卫衣            |   89.90 |</span>
<span class="line">|                   1 |  7 | 女装/女士精品       | 呢绒外套        |  399.90 |</span>
<span class="line">| 0.16666666666666666 |  3 | 户外运动            | 登山杖          |   59.90 |</span>
<span class="line">|                 0.5 |  4 | 户外运动            | 骑行装备        |  399.90 |</span>
<span class="line">|                 0.5 |  8 | 户外运动            | 自行车          |  399.90 |</span>
<span class="line">|  0.6666666666666666 | 12 | 户外运动            | 滑板            |  499.90 |</span>
<span class="line">|  0.8333333333333334 |  6 | 户外运动            | 运动外套        |  799.90 |</span>
<span class="line">|                   1 | 10 | 户外运动            | 山地自行车      | 1399.90 |</span>
<span class="line">+---------------------+----+---------------------+-----------------+---------+</span>
<span class="line">12 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_18-2-5-前后函数" tabindex="-1"><a class="header-anchor" href="#_18-2-5-前后函数"><span>18.2.5 前后函数</span></a></h3>`,14),g=e(`<h5 id="_1-lag-expr-函数" tabindex="-1"><a class="header-anchor" href="#_1-lag-expr-函数"><span>① LAG(expr)函数</span></a></h5><ul><li><p>语法：<code>LAG(expr[,n, [default]]) OVER ([PARTITION BY 字段1 ORDER BY 字段名2 ASC|DESC])</code></p></li><li><p>含义：查询当前记录的<strong>往前数</strong>第n个expr的值。参数说明如下：</p><ul><li><code>expr</code>：必填。表示当前记录的哪个字段</li><li><code>n</code>：选填。默认为1</li><li><code>default</code>：选填。默认为null。表示当前行如果是当前分区内第一条则显示default值。</li></ul></li><li><p>举例：查询商品id为1的商品销售额，并计算当天销售额与<em>前1天</em>销售额的差值</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT g.id, g.\`NAME\`, g.category, t.sale_date, t.sales_sum,</span>
<span class="line">    -&gt; (t.sales_sum - LAG(t.sales_sum, 1, 0) OVER (PARTITION BY t.goods_id ORDER BY sale_date ASC)) diff_sales_num</span>
<span class="line">    -&gt; FROM goods g</span>
<span class="line">    -&gt; LEFT JOIN (</span>
<span class="line">    -&gt; SELECT goods_id, DATE_FORMAT(create_time, &#39;%Y-%m-%d&#39;) sale_date, SUM(sales) sales_sum</span>
<span class="line">    -&gt; FROM sale_log</span>
<span class="line">    -&gt; GROUP BY goods_id, DATE_FORMAT(create_time, &#39;%Y-%m-%d&#39;)</span>
<span class="line">    -&gt; ) t ON t.goods_id = g.id</span>
<span class="line">    -&gt; WHERE g.id = 1;</span>
<span class="line">+----+------+---------------------+------------+-----------+----------------+</span>
<span class="line">| id | NAME | category            | sale_date  | sales_sum | diff_sales_num |</span>
<span class="line">+----+------+---------------------+------------+-----------+----------------+</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-10 |         5 |              5 |</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-11 |         1 |             -4 |</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-12 |         1 |              0 |</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-13 |         3 |              2 |</span>
<span class="line">+----+------+---------------------+------------+-----------+----------------+</span>
<span class="line">4 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_2-lead-expr-函数" tabindex="-1"><a class="header-anchor" href="#_2-lead-expr-函数"><span>② LEAD(expr)函数</span></a></h5><ul><li>语法：<code>LEAD(expr[,n, [default]]) OVER ([PARTITION BY 字段1 ORDER BY 字段名2 ASC|DESC])</code></li><li>含义：查询当前记录的<strong>往后数</strong>第n个expr的值。参数说明如下： <ul><li><code>expr</code>：必填。表示当前记录的哪个字段</li><li><code>n</code>：选填。默认为1</li><li><code>default</code>：选填。默认为null。表示当前行如果是当前分区内最后一条则显示default值。</li></ul></li></ul><h3 id="_18-2-6-首尾函数" tabindex="-1"><a class="header-anchor" href="#_18-2-6-首尾函数"><span>18.2.6 首尾函数</span></a></h3><h5 id="_1-first-value-expr-函数" tabindex="-1"><a class="header-anchor" href="#_1-first-value-expr-函数"><span>① FIRST_VALUE(expr)函数</span></a></h5><ul><li><p>语法：<code>FIRST_VALUE(expr) OVER ([PARTITION BY 字段1 ORDER BY 字段名2 ASC|DESC])</code></p></li><li><p>含义：返回当前分组（排序后）的<strong>第一个值</strong></p></li><li><p>举例：查询商品id为1的商品销售额，并计算当天销售额与<em>最大</em>销售额的差值</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT g.id, g.\`NAME\`, g.category, t.sale_date, t.sales_sum,</span>
<span class="line">    -&gt; (FIRST_VALUE(t.sales_sum) OVER (PARTITION BY t.goods_id ORDER BY sales_sum DESC) - t.sales_sum) diff_sales_num</span>
<span class="line">    -&gt; FROM goods g</span>
<span class="line">    -&gt; LEFT JOIN (</span>
<span class="line">    -&gt; SELECT goods_id, DATE_FORMAT(create_time, &#39;%Y-%m-%d&#39;) sale_date, SUM(sales) sales_sum</span>
<span class="line">    -&gt; FROM sale_log</span>
<span class="line">    -&gt; GROUP BY goods_id, DATE_FORMAT(create_time, &#39;%Y-%m-%d&#39;)</span>
<span class="line">    -&gt; ) t ON t.goods_id = g.id</span>
<span class="line">    -&gt; WHERE g.id = 1;</span>
<span class="line">+----+------+---------------------+------------+-----------+----------------+</span>
<span class="line">| id | NAME | category            | sale_date  | sales_sum | diff_sales_num |</span>
<span class="line">+----+------+---------------------+------------+-----------+----------------+</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-10 |         5 |              0 |</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-13 |         3 |              2 |</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-11 |         1 |              4 |</span>
<span class="line">|  1 | T恤  | 女装/女士精品       | 2020-11-12 |         1 |              4 |</span>
<span class="line">+----+------+---------------------+------------+-----------+----------------+</span>
<span class="line">4 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_2-last-value-expr-函数" tabindex="-1"><a class="header-anchor" href="#_2-last-value-expr-函数"><span>② LAST_VALUE(expr)函数</span></a></h5><ul><li>语法：<code>LAST_VALUE(expr) OVER ([PARTITION BY 字段1 ORDER BY 字段名2 ASC|DESC])</code></li><li>含义：返回当前分组（排序后）的<strong>最后一个值</strong></li></ul><h3 id="_18-2-7-聚合函数" tabindex="-1"><a class="header-anchor" href="#_18-2-7-聚合函数"><span>18.2.7 聚合函数</span></a></h3>`,10),E=e(`<p>聚合函数：<code>SUM()</code>、<code>AVG()</code>、<code>COUNT()</code>、<code>MIN()</code>、<code>MAX()</code></p><p>举例：以SUM()为例，查询商品每天销售额</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT DISTINCT sl.goods_id, g.\`NAME\`, DATE_FORMAT(sl.create_time, &#39;%Y-%m-%d&#39;) sale_date,</span>
<span class="line">    -&gt; SUM(sl.sales) OVER (PARTITION BY sl.goods_id, DATE_FORMAT(sl.create_time, &#39;%Y-%m-%d&#39;)) sales_sum</span>
<span class="line">    -&gt; FROM sale_log sl</span>
<span class="line">    -&gt; LEFT JOIN goods g ON g.id = sl.goods_id;</span>
<span class="line">+----------+-----------------+------------+-----------+</span>
<span class="line">| goods_id | NAME            | sale_date  | sales_sum |</span>
<span class="line">+----------+-----------------+------------+-----------+</span>
<span class="line">|        1 | T恤             | 2020-11-10 |         5 |</span>
<span class="line">|        1 | T恤             | 2020-11-11 |         1 |</span>
<span class="line">|        1 | T恤             | 2020-11-12 |         1 |</span>
<span class="line">|        1 | T恤             | 2020-11-13 |         3 |</span>
<span class="line">|        2 | 连衣裙          | 2020-11-10 |         1 |</span>
<span class="line">|        2 | 连衣裙          | 2020-11-11 |         1 |</span>
<span class="line">|       10 | 山地自行车      | 2020-11-15 |         2 |</span>
<span class="line">+----------+-----------------+------------+-----------+</span>
<span class="line">7 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-2-8-其他函数" tabindex="-1"><a class="header-anchor" href="#_18-2-8-其他函数"><span>18.2.8 其他函数</span></a></h3><h5 id="_1-nth-value-expr-n-函数" tabindex="-1"><a class="header-anchor" href="#_1-nth-value-expr-n-函数"><span>① NTH_VALUE(expr,n)函数</span></a></h5><ul><li><p>语法：<code>NTH_VALUE(expr,n) OVER ([PARTITION BY 字段1 ORDER BY 字段名2 ASC|DESC])</code></p></li><li><p>含义：返回第n条记录的expr值</p></li><li><p>举例：查询goods中商品信息，并计算不同商品类型中排名第2高的价格信息</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT id, category, NAME, price,</span>
<span class="line">    -&gt; NTH_VALUE(price,2) OVER (PARTITION BY category_id ORDER BY price DESC) AS second_price</span>
<span class="line">    -&gt; FROM goods;</span>
<span class="line">+----+---------------------+-----------------+---------+--------------+</span>
<span class="line">| id | category            | NAME            | price   | second_price |</span>
<span class="line">+----+---------------------+-----------------+---------+--------------+</span>
<span class="line">|  7 | 女装/女士精品       | 呢绒外套        |  399.90 |         NULL |</span>
<span class="line">|  5 | 女装/女士精品       | 牛仔裤          |   89.90 |        89.90 |</span>
<span class="line">|  9 | 女装/女士精品       | 卫衣            |   89.90 |        89.90 |</span>
<span class="line">|  2 | 女装/女士精品       | 连衣裙          |   79.90 |        89.90 |</span>
<span class="line">|  1 | 女装/女士精品       | T恤             |   39.90 |        89.90 |</span>
<span class="line">| 11 | 女装/女士精品       | 百褶裙          |   29.90 |        89.90 |</span>
<span class="line">| 10 | 户外运动            | 山地自行车      | 1399.90 |         NULL |</span>
<span class="line">|  6 | 户外运动            | 运动外套        |  799.90 |       799.90 |</span>
<span class="line">| 12 | 户外运动            | 滑板            |  499.90 |       799.90 |</span>
<span class="line">|  4 | 户外运动            | 骑行装备        |  399.90 |       799.90 |</span>
<span class="line">|  8 | 户外运动            | 自行车          |  399.90 |       799.90 |</span>
<span class="line">|  3 | 户外运动            | 登山杖          |   59.90 |       799.90 |</span>
<span class="line">+----+---------------------+-----------------+---------+--------------+</span>
<span class="line">12 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_2-ntile-n-函数" tabindex="-1"><a class="header-anchor" href="#_2-ntile-n-函数"><span>② NTILE(n)函数</span></a></h5><ul><li><p>语法：<code>NTILE(n) OVER ([PARTITION BY 字段1 ORDER BY 字段名2 ASC|DESC])</code></p></li><li><p>含义：在每个分组中，将数据分为n个桶（组），并记录桶编号</p></li><li><p>举例：查询goods中商品信息，并将不同商品类型中的商品按照价格降序分为3个桶（组）</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; select NTILE(3) OVER (PARTITION BY category_id ORDER BY price DESC) AS num,</span>
<span class="line">    -&gt; id, \`NAME\`, category, price</span>
<span class="line">    -&gt; FROM goods;</span>
<span class="line">+------+----+-----------------+---------------------+---------+</span>
<span class="line">| num  | id | NAME            | category            | price   |</span>
<span class="line">+------+----+-----------------+---------------------+---------+</span>
<span class="line">|    1 |  7 | 呢绒外套        | 女装/女士精品       |  399.90 |</span>
<span class="line">|    1 |  5 | 牛仔裤          | 女装/女士精品       |   89.90 |</span>
<span class="line">|    2 |  9 | 卫衣            | 女装/女士精品       |   89.90 |</span>
<span class="line">|    2 |  2 | 连衣裙          | 女装/女士精品       |   79.90 |</span>
<span class="line">|    3 |  1 | T恤             | 女装/女士精品       |   39.90 |</span>
<span class="line">|    3 | 11 | 百褶裙          | 女装/女士精品       |   29.90 |</span>
<span class="line">|    1 | 10 | 山地自行车      | 户外运动            | 1399.90 |</span>
<span class="line">|    1 |  6 | 运动外套        | 户外运动            |  799.90 |</span>
<span class="line">|    2 | 12 | 滑板            | 户外运动            |  499.90 |</span>
<span class="line">|    2 |  4 | 骑行装备        | 户外运动            |  399.90 |</span>
<span class="line">|    3 |  8 | 自行车          | 户外运动            |  399.90 |</span>
<span class="line">|    3 |  3 | 登山杖          | 户外运动            |   59.90 |</span>
<span class="line">+------+----+-----------------+---------------------+---------+</span>
<span class="line">12 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_18-2-9-window语法的使用" tabindex="-1"><a class="header-anchor" href="#_18-2-9-window语法的使用"><span>18.2.9 WINDOW语法的使用</span></a></h3><ul><li><p>18.2.8-②例子可改写为：</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT DISTINCT sl.goods_id, g.\`NAME\`, DATE_FORMAT(sl.create_time, &#39;%Y-%m-%d&#39;) sale_date, </span>
<span class="line">	SUM(sl.sales) OVER w_sales_sum_cal sales_sum</span>
<span class="line">FROM sale_log sl</span>
<span class="line">LEFT JOIN goods g ON g.id = sl.goods_id</span>
<span class="line">WINDOW w_sales_sum_cal AS (PARTITION BY sl.goods_id, DATE_FORMAT(sl.create_time, &#39;%Y-%m-%d&#39;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>18.2.4-①例子可改写为：</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT RANK() OVER w_price_desc_rank AS r,</span>
<span class="line">	PERCENT_RANK() OVER w_price_desc_rank AS &#39;pr_%&#39;,</span>
<span class="line">	id, category_id, category, NAME, price, stock</span>
<span class="line">FROM goods</span>
<span class="line">-- WHERE category_id = 1 # 如果有where条件，where条件需要写在WINDOW语句之前</span>
<span class="line">WINDOW w_price_desc_rank AS (PARTITION BY category_id ORDER BY price DESC);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_18-2-10-小结-窗口函数的特点" tabindex="-1"><a class="header-anchor" href="#_18-2-10-小结-窗口函数的特点"><span>18.2.10 小结-窗口函数的特点</span></a></h3><ul><li>窗口函数可以对数据进行分组，并且可以在组内排序</li><li>窗口函数不会因分组而减少原表中的行数</li></ul><h3 id="_18-2-9-测试中用到的表及数据" tabindex="-1"><a class="header-anchor" href="#_18-2-9-测试中用到的表及数据"><span>18.2.9 测试中用到的表及数据</span></a></h3><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line"># 创建goods表</span>
<span class="line">CREATE TABLE goods(</span>
<span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span>
<span class="line">	category_id INT,</span>
<span class="line">	category VARCHAR(15),</span>
<span class="line">	NAME VARCHAR(30),</span>
<span class="line">	price DECIMAL(10,2),</span>
<span class="line">	stock INT,</span>
<span class="line">	upper_time DATETIME</span>
<span class="line">);</span>
<span class="line"></span>
<span class="line">INSERT INTO goods(category_id,category,NAME,price,stock,upper_time)</span>
<span class="line">VALUES</span>
<span class="line">(1, &#39;女装/女士精品&#39;, &#39;T恤&#39;, 39.90, 1000, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(1, &#39;女装/女士精品&#39;, &#39;连衣裙&#39;, 79.90, 2500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(2, &#39;户外运动&#39;, &#39;登山杖&#39;, 59.90, 1500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(2, &#39;户外运动&#39;, &#39;骑行装备&#39;, 399.90, 3500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(1, &#39;女装/女士精品&#39;, &#39;牛仔裤&#39;, 89.90, 3500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(2, &#39;户外运动&#39;, &#39;运动外套&#39;, 799.90, 500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(1, &#39;女装/女士精品&#39;, &#39;呢绒外套&#39;, 399.90, 1200, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(2, &#39;户外运动&#39;, &#39;自行车&#39;, 399.90, 1000, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(1, &#39;女装/女士精品&#39;, &#39;卫衣&#39;, 89.90, 1500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(2, &#39;户外运动&#39;, &#39;山地自行车&#39;, 1399.90, 2500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(1, &#39;女装/女士精品&#39;, &#39;百褶裙&#39;, 29.90, 500, &#39;2020-11-10 00:00:00&#39;),</span>
<span class="line">(2, &#39;户外运动&#39;, &#39;滑板&#39;, 499.90, 1200, &#39;2020-11-10 00:00:00&#39;);</span>
<span class="line"></span>
<span class="line"># 创建销售记录表</span>
<span class="line">create table sale_log(</span>
<span class="line">	id int PRIMARY KEY auto_increment,</span>
<span class="line">	goods_id int,</span>
<span class="line">	sales int COMMENT &#39;本次售出数量&#39;,</span>
<span class="line">	create_time datetime</span>
<span class="line">);</span>
<span class="line"></span>
<span class="line">INSERT INTO \`sale_log\` VALUES (1, 1, 1, &#39;2020-11-10 02:10:33&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (2, 1, 4, &#39;2020-11-10 12:10:33&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (3, 1, 1, &#39;2020-11-11 22:10:33&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (4, 2, 1, &#39;2020-11-10 22:10:33&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (5, 2, 1, &#39;2020-11-11 09:10:33&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (6, 1, 1, &#39;2020-11-12 11:11:13&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (7, 1, 1, &#39;2020-11-13 16:10:33&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (8, 1, 2, &#39;2020-11-13 17:50:33&#39;);</span>
<span class="line">INSERT INTO \`sale_log\` VALUES (9, 10, 2, &#39;2020-11-15 17:50:33&#39;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-3-新特性2-公用表表达式" tabindex="-1"><a class="header-anchor" href="#_18-3-新特性2-公用表表达式"><span>18.3 新特性2-公用表表达式</span></a></h2><blockquote><p>概念</p></blockquote>`,16),h=e(`<blockquote><p>分类</p></blockquote><p>按照<strong>语法结构和执行方式</strong>的不同，可以分为两类：</p><ul><li><code>普通公用表表达式</code></li><li><code>递归公用表表达式</code></li></ul><h3 id="_18-3-1-普通公用表表达式" tabindex="-1"><a class="header-anchor" href="#_18-3-1-普通公用表表达式"><span>18.3.1 普通公用表表达式</span></a></h3><ul><li><p>语法：</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">WITH CTE名称</span>
<span class="line">AS (查询语句)</span>
<span class="line">SELECT|DELETE|UPDATE 语句;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>举例：查询员工所在部门的详细信息。</p><p>因为有的部门没有员工，这些部门是不能显示的，所以不能直接返回部门表信息。</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">WITH cte_emps_dept_id</span>
<span class="line">AS (SELECT DISTINCT department_id FROM emps)</span>
<span class="line">SELECT d.*</span>
<span class="line">FROM depts d </span>
<span class="line">LEFT JOIN cte_emps_dept_id c ON c.department_id = d.department_id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_18-3-2-递归公用表表达式" tabindex="-1"><a class="header-anchor" href="#_18-3-2-递归公用表表达式"><span>18.3.2 递归公用表表达式</span></a></h3>`,6),R=e(`<p>语法：</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">WITH RECURSIVE CTE名称</span>
<span class="line">AS (查询语句①) </span>
<span class="line">SELECT|DELETE|UPDATE 语句;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T=e("<ul><li><p><code>查询语句①</code>由两部分组成：</p><ul><li><p><code>种子查询</code>：用来<strong>获取递归的初始值</strong>。这个查询只运行一次，以创建初始数据集</p></li><li><p><code>递归查询</code>：递归查询会一直执行，直到没有任何新的查询数据产生，递归返回。</p><p><strong>递归查询中，不用或慎用外连接，最好使用内连接（<code>[inner] join ... on</code>）</strong></p></li><li><p><strong>二者通过关键字<code>UNION [ALL]</code>进行连接</strong></p></li></ul></li></ul>",1),y=s("p",null,"举例：针对于我们常用的emps表，包含employee_id，last_name和manager_id三个字段。如果a是b 的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下 属。 要求：使用递归公用表表达式查询出所有具有下下属身份的人员信息。",-1),A=e(`<ul><li>① 通过种子查询，获取公司最大领导，即第一层员工。使用n记录员工层级，第一层员工记n=1</li><li>② 开始进行递归查询。查询出以公用表表达式中员工为领导的员工，并记录该层员工的n值为公用表表达式中的n值+1，递归返回</li><li>③ 最后的查询，筛选出公用表表达式中属于下下属身份的员工，即n&gt;=3的员工</li></ul><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">WITH RECURSIVE cte_emp</span>
<span class="line">AS (</span>
<span class="line">    -- 种子查询，获取第一层员工</span>
<span class="line">	SELECT employee_id, last_name, manager_id, 1 AS n FROM emps WHERE manager_id IS NULL </span>
<span class="line">	UNION ALL </span>
<span class="line">    -- 递归查询，获取每一层员工</span>
<span class="line">	SELECT e.employee_id, e.last_name, e.manager_id, cte_emp.n+1 </span>
<span class="line">    FROM emps e </span>
<span class="line">    JOIN cte_emp ON cte_emp.employee_id = e.manager_id</span>
<span class="line">)</span>
<span class="line">SELECT * FROM cte_emp WHERE n &gt;= 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S=s("h3",{id:"_18-3-3-小结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_18-3-3-小结"},[s("span",null,"18.3.3 小结")])],-1),N=s("p",null,"公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根 节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。",-1);function O(L,I){const l=c("front");return p(),r("div",null,[v,s("ul",null,[o,s("li",null,[m,s("p",null,[a(l,{style:{background:"yellow"}},{default:i(()=>[n("窗口函数如下：")]),_:1})]),n(" | 函数名称 | 描述 | | ------------------ | --------------------------------------------------- | | ROW_NUMBER() | 顺序排序 | | RANK() | 并列排序，会跳过重复的序号，如1、1、3 | | DENSE_RANK() | 并列排序，不会跳过重复的序号，如1、1、2 | | PERCENT_RANK | 等级值百分比 | | CUME_DIST() | 累积分布值 | | LAG(expr, n) | 返回当前行的往前数第n行的expr的值。expr是表中字段名 | | LEAD(expr, n) | 返回当前行的往后数第n行的expr的值。expr是表中字段名 | | FIRST_VALUE(expr) | 返回第一个expr的值。expr是表中字段名 | | LAST_VALUE(expr) | 返回最后一个expr的值。expr是表中字段名 | | NTH_VALUE(expr, n) | 返回第n个expr的值。expr是表中字段名 | | NTILE(n) | 将分区中的有序数据分成n个桶，记录桶编号 | ")]),u]),_,s("p",null,[a(l,{style:{background:"yellow"}},{default:i(()=>[n("说明：")]),_:1})]),b,s("p",null,[n("也称"),a(l,{style:{background:"yellow"}},{default:i(()=>[n("偏移量函数")]),_:1})]),g,s("p",null,[a(l,{style:{background:"yellow"}},{default:i(()=>[n("聚合函数也能当做窗口函数使用")]),_:1})]),E,s("p",null,[a(l,{style:{background:"yellow"}},{default:i(()=>[n("公用表表达式")]),_:1}),n("，简称**CTE**（Common Table Expressions）。 CTE是一个命名的临时结果集，作用范围是当前语句。可以将CTE理解成一个可以复用的子查询，但是**CTE可以引用其他CTE**，但是子查询不能引用其他子查询。")]),h,s("ul",null,[s("li",null,[R,s("p",null,[a(l,{style:{background:"yellow"}},{default:i(()=>[n("说明：")]),_:1})]),T]),s("li",null,[y,s("p",null,[a(l,{style:{background:"yellow"}},{default:i(()=>[n("步骤：")]),_:1})]),A])]),S,N])}const C=d(t,[["render",O],["__file","18_MySQL8.0新特性.html.vue"]]),D=JSON.parse('{"path":"/static/tang/mysql/18_MySQL8.0%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"18 MySQL8.0新特性","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"18.1 MySQL80.0新特性概述","slug":"_18-1-mysql80-0新特性概述","link":"#_18-1-mysql80-0新特性概述","children":[{"level":3,"title":"18.1.1 MySQL8.0新增特性","slug":"_18-1-1-mysql8-0新增特性","link":"#_18-1-1-mysql8-0新增特性","children":[]},{"level":3,"title":"18.1.2 MySQL8.0移除的就特性","slug":"_18-1-2-mysql8-0移除的就特性","link":"#_18-1-2-mysql8-0移除的就特性","children":[]}]},{"level":2,"title":"18.2 新特性1-窗口函数","slug":"_18-2-新特性1-窗口函数","link":"#_18-2-新特性1-窗口函数","children":[{"level":3,"title":"18.2.1 概述","slug":"_18-2-1-概述","link":"#_18-2-1-概述","children":[]},{"level":3,"title":"18.2.2 语法","slug":"_18-2-2-语法","link":"#_18-2-2-语法","children":[]},{"level":3,"title":"18.2.3 序号函数","slug":"_18-2-3-序号函数","link":"#_18-2-3-序号函数","children":[]},{"level":3,"title":"18.2.4 分布函数","slug":"_18-2-4-分布函数","link":"#_18-2-4-分布函数","children":[]},{"level":3,"title":"18.2.5 前后函数","slug":"_18-2-5-前后函数","link":"#_18-2-5-前后函数","children":[]},{"level":3,"title":"18.2.6 首尾函数","slug":"_18-2-6-首尾函数","link":"#_18-2-6-首尾函数","children":[]},{"level":3,"title":"18.2.7 聚合函数","slug":"_18-2-7-聚合函数","link":"#_18-2-7-聚合函数","children":[]},{"level":3,"title":"18.2.8 其他函数","slug":"_18-2-8-其他函数","link":"#_18-2-8-其他函数","children":[]},{"level":3,"title":"18.2.9  WINDOW语法的使用","slug":"_18-2-9-window语法的使用","link":"#_18-2-9-window语法的使用","children":[]},{"level":3,"title":"18.2.10 小结-窗口函数的特点","slug":"_18-2-10-小结-窗口函数的特点","link":"#_18-2-10-小结-窗口函数的特点","children":[]},{"level":3,"title":"18.2.9 测试中用到的表及数据","slug":"_18-2-9-测试中用到的表及数据","link":"#_18-2-9-测试中用到的表及数据","children":[]}]},{"level":2,"title":"18.3 新特性2-公用表表达式","slug":"_18-3-新特性2-公用表表达式","link":"#_18-3-新特性2-公用表表达式","children":[{"level":3,"title":"18.3.1 普通公用表表达式","slug":"_18-3-1-普通公用表表达式","link":"#_18-3-1-普通公用表表达式","children":[]},{"level":3,"title":"18.3.2 递归公用表表达式","slug":"_18-3-2-递归公用表表达式","link":"#_18-3-2-递归公用表表达式","children":[]},{"level":3,"title":"18.3.3 小结","slug":"_18-3-3-小结","link":"#_18-3-3-小结","children":[]}]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/mysql/18_MySQL8.0新特性.md"}');export{C as comp,D as data};
