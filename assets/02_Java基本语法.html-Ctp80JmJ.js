import{_ as o,r as p,o as c,c as i,e as n,a as t,w as e,d as s,b as l}from"./app-DRxAhH5h.js";const d="/assets/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-CeqQ6lV-.png",u="/assets/02_%E5%8F%98%E9%87%8F%E5%88%86%E7%B1%BB-CVCIwFEY.png",r={},k=l('<h1 id="_2-java基本语法" tabindex="-1"><a class="header-anchor" href="#_2-java基本语法"><span>2 Java基本语法</span></a></h1><h2 id="_2-1-变量的分类" tabindex="-1"><a class="header-anchor" href="#_2-1-变量的分类"><span>2.1 变量的分类</span></a></h2><blockquote><p>按照数据类型分</p></blockquote><p><img src="'+d+'" alt=""></p><ul><li><p>基本数据类型</p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th><th>备注</th></tr></thead><tbody><tr><td>byte</td><td>1字节=8bit位</td><td>[-128, 127]</td><td></td></tr><tr><td>short</td><td>2字节</td><td>[$-2^{15}$, $2^{15}-1$]</td><td></td></tr><tr><td>int</td><td>4字节</td><td>[$-2^{32}$, $2^{32}-1$]</td><td></td></tr><tr><td>long</td><td>8字节</td><td>[$-2^{64}$, $2^{64}-1$]</td><td>声明变量时，需要在后边加上<strong>l</strong>或<strong>L</strong></td></tr><tr><td>float</td><td>4字节</td><td>[$-3.403E^{38}$, $3.403E^{38}$]</td><td>单精度，尾数可以精确到7位有效数字；<br><strong>数值范围比long还大</strong></td></tr><tr><td>double</td><td>8字节</td><td>[$-1.798E^{308}$, $1.798E^{308}$]</td><td>双精度（<strong>默认的浮点型</strong>）</td></tr><tr><td>char</td><td>2字节（1个字符）</td><td>--</td><td>声明时，通常使一对<strong>单引号</strong>；<br>char c = &#39;&#39;;//编译不通过</td></tr><tr><td>boolean</td><td>--</td><td>--</td><td>取值只能是true或false</td></tr></tbody></table></li><li><p>引用数据类型</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul><blockquote><p>按声明的位置的不同分</p></blockquote><p><img src="'+u+'" alt=""></p><p><strong>注：</strong> 二者在初始化值方面的异同：</p><ul><li>同：都有声明周期</li><li>异：局部变量除形参外，需显示初始化</li></ul><h2 id="_2-2-基本数据类型间的运算规则" tabindex="-1"><a class="header-anchor" href="#_2-2-基本数据类型间的运算规则"><span>2.2 基本数据类型间的运算规则</span></a></h2>',10),h=n("li",null,[n("p",null,"自动类型提升"),n("p",null,[n("strong",null,[n("span",{style:{color:"red"}},"byte、char、short-->int-->long-->float-->double")])]),n("p",null,"结论："),n("ul",null,[n("li",null,"容量小的数据类型的变量与容量大的做运算时，结果自动提升为容量大的数据类型的数据"),n("li",null,"特别的，大概byte、char、short三种类型的变量做运算时，结果为int型")])],-1),b=n("p",null,"强制类型转换",-1),_=n("code",null,"short s = 128; byte b = (byte)s",-1),v=n("h2",{id:"_2-3-关于进制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-关于进制"},[n("span",null,"2.3 关于进制")])],-1),m=n("thead",null,[n("tr",null,[n("th",null,"进制"),n("th",null,"数值范围"),n("th",null,"写法"),n("th",null,"备注")])],-1),g=n("td",null,"二进制",-1),y=n("td",null,"0,1",-1),f=n("td",null,null,-1),w=n("tr",null,[n("td",null,"十进制"),n("td",null,"0-9"),n("td"),n("td")],-1),j=n("td",null,"八进制",-1),x=n("td",null,"0-7",-1),E=n("td",null,null,-1),$=n("td",null,"十六进制",-1),q=n("td",null,"0-9及A-F",-1),B=n("td",null,"A-F不区分大小写",-1),S=n("blockquote",null,[n("p",null,"二进制")],-1),C=l(`<p>正数的原码、反码、补码都是一样的，负数的反码是除符号位，对原码各位取反，补码则为反码+1。</p><h2 id="_2-4-与" tabindex="-1"><a class="header-anchor" href="#_2-4-与"><span>2.4 ++与--</span></a></h2><ul><li><p>前++（前--）：先自增（减）1，再运算</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果：a=11，b=11</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>后++（后--）：先运算，再自增（减）1</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果： a=11， b=10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,3),A=l(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">s<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果： s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_2-5-赋值运算符"><span>2.5 赋值运算符</span></a></h2><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></p>`,3),J=l(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 编译不通过</span></span>
<span class="line">s <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 正确，s值为11，short类型</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">i <span class="token operator">*=</span> <span class="token number">0.1</span><span class="token punctuation">;</span> <span class="token comment">// 正确，i值为0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),F=l(`<li><p>与<code>++</code>相关的计算题</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">n <span class="token operator">+=</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 上式可以等价写为：n = n + (n++) + (++n),==&gt;n = 10 + 10 + 12=32</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),N=l('<h2 id="_2-6-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_2-6-逻辑运算符"><span>2.6 逻辑运算符</span></a></h2><p><code>&amp;</code>、 <code>&amp;&amp;</code>、 <code>|</code>、 <code>||</code>、 <code>!</code>、 <code>^</code></p>',2),V=n("p",null,[n("code",null,"&"),s("、 "),n("code",null,"&&"),s("的对比")],-1),D=n("code",null,"&",-1),I=n("code",null,"&&",-1),z=n("ul",null,[n("li",null,"相同点1：二者运算结果相同"),n("li",null,"相同点2：当符号左边是true时，二者都会执行符号右边的运算"),n("li",null,[s("不同点：当符号左边是false时，"),n("code",null,"&"),s("会继续执行符号右边运算，"),n("code",null,"&&"),s("不再执行符号右边的运算")])],-1),K=n("p",null,[n("code",null,"|"),s("、 "),n("code",null,"||"),s("的对比")],-1),L=n("code",null,"|",-1),M=n("code",null,"||",-1),O=n("ul",null,[n("li",null,"相同点1：二者运算结果相同"),n("li",null,"相同点2：当符号左边是false时，二者都会执行符号右边的运算"),n("li",null,[s("不同点：当符号左边是true时，"),n("code",null,"|"),s("会继续执行符号右边运算，"),n("code",null,"||"),s("不再执行符号右边的运算")])],-1),P=n("h2",{id:"_2-7-位运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-7-位运算符"},[n("span",null,"2.7 位运算符")])],-1),Q=l(`<table><thead><tr><th>运算符</th><th>名称</th><th>细节</th><th>备注</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>左移运算符</td><td>空位补0，被移除的最高位丢弃</td><td>在一定范围内，每向左移1位，相当于 * 2</td></tr><tr><td>&gt;&gt;</td><td>右移运算符</td><td>若最高位是0，右移后空位补0；<br>若最高位是1，右移后空位补1</td><td>在一定范围内，每向右移1位，相当于 / 2</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>最高位无论是0或1，空位都补0</td><td>后边讲</td></tr><tr><td>&amp;</td><td>与</td><td>每一位只要有0就是0</td><td></td></tr><tr><td>|</td><td>或</td><td>每一位只要有1就是1</td><td></td></tr><tr><td>^</td><td>异或</td><td>每一位只要不同就是1</td><td>公式：k = (k ^n)^n</td></tr><tr><td>~</td><td>取反</td><td>包括符号位在内，每一位0变1，1变0</td><td></td></tr></tbody></table><blockquote><p>面试题</p><p>最高效方式计算2 * 8？</p></blockquote><p>答：<code>2 &lt;&lt; 3</code>或 <code>8 &lt;&lt; 1</code></p><h2 id="_2-8-三元运算符" tabindex="-1"><a class="header-anchor" href="#_2-8-三元运算符"><span>2.8 三元运算符</span></a></h2><p>三元运算符的效率比if-else高。</p><h2 id="_2-9-scanner类" tabindex="-1"><a class="header-anchor" href="#_2-9-scanner类"><span>2.9 Scanner类</span></a></h2><blockquote><p>作用</p></blockquote><p>获取用户输入的变量</p><blockquote><p>用法</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取String类型变量</span></span>
<span class="line">    <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取int类型变量</span></span>
<span class="line">    <span class="token keyword">int</span> age <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取double类型变量</span></span>
<span class="line">    <span class="token keyword">double</span> weight <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取boolean类型变量</span></span>
<span class="line">    <span class="token keyword">boolean</span> isMarried <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取char类型变量</span></span>
<span class="line">    <span class="token class-name">String</span> sex <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> sexChar <span class="token operator">=</span> sex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取索引值为0位置</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-10-switch-case" tabindex="-1"><a class="header-anchor" href="#_2-10-switch-case"><span>2.10 switch-case</span></a></h2>`,11),R=n("p",null,"switch中的表达式，只能是一下6种数据类型之一：byte、short、char、int、枚举、String（JDK7之后）",-1),T=n("h2",{id:"_2-11-break和continue",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-11-break和continue"},[n("span",null,"2.11 break和continue")])],-1),X=n("blockquote",null,[n("p",null,"二者区别")],-1),Y=l(`<ul><li>break可以用在switch-case语句和循环语句中。continue只能用在循环语句中</li><li>break是结束当前循环，continue是结束当次循环</li></ul><blockquote><p>break和continue结束指定标识的循环</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line">label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token keyword">break</span> label<span class="token punctuation">;</span><span class="token comment">//结束指定标识的这一个循环</span></span>
<span class="line">        <span class="token comment">//continue label;//结束指定标识的这一次循环</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其他</p></blockquote>`,4);function G(H,U){const a=p("front");return c(),i("div",null,[k,n("p",null,[t(a,{style:{background:"yellow"}},{default:e(()=>[s("前提：")]),_:1}),s(" 只讨论7种基本数据类型变量之前的计算，不包含boolean类型")]),n("ul",null,[h,n("li",null,[b,n("p",null,[s("强制类型转换，"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("可能")]),_:1}),s("会造成经度的损失")]),n("p",null,[_,s("，b的值为"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("-128")]),_:1}),s("，也是一种精度的损失")])])]),v,n("table",null,[m,n("tbody",null,[n("tr",null,[g,y,n("td",null,[s("以"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("0b")]),_:1}),s("或"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("0B")]),_:1}),s("开头")]),f]),w,n("tr",null,[j,x,n("td",null,[s("以"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("0")]),_:1}),s("开头")]),E]),n("tr",null,[$,q,n("td",null,[s("以"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("0x")]),_:1}),s("或"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("0X")]),_:1}),s("开头")]),B])])]),S,n("p",null,[s("计算机底层都是以"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("补码")]),_:1}),s("的形式存储数据。")]),C,t(a,{style:{background:"yellow"}},{default:e(()=>[s("++和--不会改变数据类型")]),_:1}),s("，如以下代码能正常运行："),A,n("ul",null,[n("li",null,[t(a,{style:{background:"yellow"}},{default:e(()=>[s("+=、-=、*=、/=、%=不会改变数据类型")]),_:1}),J]),F]),N,n("ul",null,[n("li",null,[V,n("p",null,[D,s("称"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("逻辑与")]),_:1}),s("，"),I,s("称"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("短路与")]),_:1})]),z]),n("li",null,[K,n("p",null,[L,s("称"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("逻辑或")]),_:1}),s("，"),M,s("称"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("短路或")]),_:1})]),O])]),t(a,{style:{background:"yellow"}},{default:e(()=>[s("开发中推荐使用短路与、短路或")]),_:1}),P,n("p",null,[t(a,{style:{background:"yellow"}},{default:e(()=>[s("位运算符操作的都是整型数据")]),_:1})]),Q,n("p",null,[t(a,{style:{background:"yellow"}},{default:e(()=>[s("注意事项：")]),_:1})]),R,T,X,n("p",null,[t(a,{style:{background:"yellow"}},{default:e(()=>[s("相同点：")]),_:1}),s("二者后边不可以再写其他语句，编译报错")]),Y,n("p",null,[s("也可以使用"),t(a,{style:{background:"yellow"}},{default:e(()=>[s("return")]),_:1}),s("关键字结束循环")])])}const Z=o(r,[["render",G],["__file","02_Java基本语法.html.vue"]]),nn=JSON.parse('{"path":"/static/tang/java2/02_Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html","title":"2 Java基本语法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"2.1 变量的分类","slug":"_2-1-变量的分类","link":"#_2-1-变量的分类","children":[]},{"level":2,"title":"2.2   基本数据类型间的运算规则","slug":"_2-2-基本数据类型间的运算规则","link":"#_2-2-基本数据类型间的运算规则","children":[]},{"level":2,"title":"2.3 关于进制","slug":"_2-3-关于进制","link":"#_2-3-关于进制","children":[]},{"level":2,"title":"2.4 ++与--","slug":"_2-4-与","link":"#_2-4-与","children":[]},{"level":2,"title":"2.5 赋值运算符","slug":"_2-5-赋值运算符","link":"#_2-5-赋值运算符","children":[]},{"level":2,"title":"2.6 逻辑运算符","slug":"_2-6-逻辑运算符","link":"#_2-6-逻辑运算符","children":[]},{"level":2,"title":"2.7 位运算符","slug":"_2-7-位运算符","link":"#_2-7-位运算符","children":[]},{"level":2,"title":"2.8 三元运算符","slug":"_2-8-三元运算符","link":"#_2-8-三元运算符","children":[]},{"level":2,"title":"2.9 Scanner类","slug":"_2-9-scanner类","link":"#_2-9-scanner类","children":[]},{"level":2,"title":"2.10 switch-case","slug":"_2-10-switch-case","link":"#_2-10-switch-case","children":[]},{"level":2,"title":"2.11 break和continue","slug":"_2-11-break和continue","link":"#_2-11-break和continue","children":[]}],"git":{},"filePathRelative":"static/tang/java2/02_Java基本语法.md"}');export{Z as comp,nn as data};
