import{_ as l,o as i,c as e,b as a}from"./app-DRxAhH5h.js";const t={},n=a('<h1 id="前端设计模式简介" tabindex="-1"><a class="header-anchor" href="#前端设计模式简介"><span>前端设计模式简介</span></a></h1><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。</p><h2 id="原则" tabindex="-1"><a class="header-anchor" href="#原则"><span>原则</span></a></h2><ul><li>单一职责原则: 一个程序只做好一件事,如果功能过于复杂就拆分开，每个部分保持独立</li><li>开放/封闭原则: 对扩展开放，对修改封闭 增加需求时，扩展新代码，而非修改已有代码</li><li>里氏替换原则: 子类能覆盖父类 父类能出现的地方子类就能出现</li><li>接口隔离原则: 保持接口的单一独立 类似单一职责原则，这里更关注接口</li><li>依赖倒转原则: 面向接口编程，依赖于抽象而不依赖于具体 使用方只关注接口而不关注具体类的实现</li><li>迪米特法则（最少知识原则）： 对外接口简单，当前类对其他类的知识越少越好。</li></ul><h2 id="创建型" tabindex="-1"><a class="header-anchor" href="#创建型"><span>创建型</span></a></h2><ol><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li><li>单例模式</li></ol><h2 id="结构型" tabindex="-1"><a class="header-anchor" href="#结构型"><span>结构型</span></a></h2><ol><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ol><h2 id="行为型" tabindex="-1"><a class="header-anchor" href="#行为型"><span>行为型</span></a></h2><ol><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li><li>迭代器模式</li><li>责任链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ol>',10),s=[n];function h(r,c){return i(),e("div",null,s)}const o=l(t,[["render",h],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/static/JavaScript/design/","title":"前端设计模式简介","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"原则","slug":"原则","link":"#原则","children":[]},{"level":2,"title":"创建型","slug":"创建型","link":"#创建型","children":[]},{"level":2,"title":"结构型","slug":"结构型","link":"#结构型","children":[]},{"level":2,"title":"行为型","slug":"行为型","link":"#行为型","children":[]}],"git":{},"filePathRelative":"static/JavaScript/design/readme.md"}');export{o as comp,p as data};
