import{_ as l,r as c,o,c as i,e as n,d as s,a as t,w as p,b as e}from"./app-CQavEA7Q.js";const u="/assets/17_REPL%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A81-Cq-Xsp-4.png",r="/assets/17_REPL%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A82-Ri6__Dgs.png",d="/assets/17_%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%8E%A8%E8%8D%90-SPa7gtz_.png",k={},v=n("h1",{id:"_17-java9-10-11新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-java9-10-11新特性"},[n("span",null,"17 Java9&10&11新特性")])],-1),m=n("blockquote",null,[n("p",null,"概述")],-1),b=n("li",null,"java9、java10不是长期支持的版本，java11是长期支持的版本。因此可以不用安装java9、java10，直接安装java11就行",-1),h=n("h2",{id:"_17-1-java9新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-1-java9新特性"},[n("span",null,"17.1 Java9新特性")])],-1),g=n("blockquote",null,[n("p",null,"概述")],-1),y=n("blockquote",null,[n("p",null,"Java9中不得不说的新特性")],-1),_=e("<li>多版本兼容jar包</li><li>语法改进之一：接口的私有方法</li><li>语法改进之二：钻石操作符(&lt;&gt;)的使用升级</li><li>语法改进之三：语法改进：try</li><li>API改进之一：String存储结构变更</li><li>API改进之二：便利的集合特性--of()创建只读集合</li><li>API改进之三：增强的Stream API</li><li>API改进之四：全新的HTTP客户端API</li><li>API改进之五：Deprecated的相关API</li><li>javadoc的HTML5支持</li><li>JavaScript引擎升级--Nashorn（Java11中被干掉了）</li><li>java的动态编译器</li>",12),f=n("h3",{id:"_17-1-1-模块化系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-1-1-模块化系统"},[n("span",null,"17.1.1 模块化系统")])],-1),j=n("blockquote",null,[n("p",null,"模块化系统提出的背景")],-1),w=n("ul",null,[n("li",null,[n("strong",null,"Java运行环境的膨胀和臃肿"),s("。每次启动JVM，至少会有30~60MB的内存加载，主要原因是"),n("strong",null,"JVM需要加载rt.jar")]),n("li",null,[n("strong",null,"当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长"),s("。不同版本的类库交叉依赖导致让人头疼的问题，这些都阻碍了Java开发和运行效率的提升")]),n("li",null,[s("很难真正的对代码进行封装，而系统并没有对不同部分（也就是JAR文件）之间的依赖有个明确的概念。"),n("strong",null,"每个公共类都可以被类路径下任何其他公共类访问到，这样就导致无意中使用了并不想公开访问的API")])],-1),S=n("blockquote",null,[n("p",null,"定义")],-1),q=n("blockquote",null,[n("p",null,"优点")],-1),x=n("ul",null,[n("li",null,"减少内存的开销"),n("li",null,"只须必要模块，而非全部jdk模块，可简化各种类库和大型应用的开发和维护"),n("li",null,"改进Java SE平台，使其可以适应不同大小的计算设备"),n("li",null,"改进其安全性、可维护性，提高性能")],-1),J=n("blockquote",null,[n("p",null,"例子：在day13模块中使用java9test模块中定义的Person类")],-1),L=n("li",null,[n("p",null,"注意事项："),n("p",null,"day13模块中使用Person类的类，所在的包不能和Person类所在包名字相同")],-1),T=n("p",null,"步骤",-1),E=n("li",null,"③在day13模块中使用java9test模块中的类",-1),P=e(`<li><p>代码</p><ul><li><p>java9test模块中Person类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>java<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2023/1/4 17:22</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 以下省略构造器、getter、setter、toString等方法</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>java9test模块中module-info.java文件</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">module</span> <span class="token namespace">java9test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>java<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>day13模块中module-info.java文件</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">module</span> <span class="token namespace">day13</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">requires</span> <span class="token namespace">java9test</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>day13模块中使用Person类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tth<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>java<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 模块化测试</span>
<span class="line"> *  在day13模块中调用java9test模块中的Person类</span>
<span class="line"> *</span>
<span class="line"> *  步骤：</span>
<span class="line"> *  ①在java9test模块中的src目录下创建module-info.java文件，写明要暴露出去的包(注意是包，不能详细到类)</span>
<span class="line"> *  ②在day13模块的src目录下中创建module-info.java文件，写明要导入的包(注意是包，不能详细到类)</span>
<span class="line"> *  ③在day13模块中使用java9test模块中的类</span>
<span class="line"> * @Author tth</span>
<span class="line"> * @Date 2023/1/4 17:11</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModuleTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,1),A=e('<h3 id="_17-1-2-java的repl工具-jshell命令" tabindex="-1"><a class="header-anchor" href="#_17-1-2-java的repl工具-jshell命令"><span>17.1.2 Java的REPL工具：jshell命令</span></a></h3><blockquote><p>REPL概念</p></blockquote><ul><li><p>定义：</p><p>REPL（read-evaluate-print-loop），以交互的方式对语句和表达式进行求值。开发者只需要输入一些代码，就可以在编译前获得对程序的反馈。</p><p><strong>之前的java版本要想执行代码，必须创建文件、声明类、提供测试方法方可实现</strong></p></li><li><p>设计理念：</p><p>即写即得，快速运行</p></li><li><p>实现目标：</p><ul><li>java9中开始由了REPL工具--jshell。在控制台启动jshell，在没有创建类的情况下，可以直接声明变量、计算表达式、执行语句。</li><li>jshell可以从文件中加载语句或者将语句保存到文件中</li><li>jshell中可以使用Tab键自动补全</li></ul></li></ul><blockquote><p>jshell工具的使用</p></blockquote>',4),I=e(`<li><p>使用控制台打开jshell工具，并尝试打印“hello world”：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>tangtianhua<span class="token operator">&gt;</span>D:<span class="token punctuation">\\</span>soft<span class="token punctuation">\\</span>jdk-11.0.16.1<span class="token punctuation">\\</span>bin<span class="token punctuation">\\</span>jshell.exe</span>
<span class="line"><span class="token operator">|</span>  欢迎使用 JShell -- 版本 <span class="token number">11.0</span>.16.1</span>
<span class="line"><span class="token operator">|</span>  要大致了解该版本, 请键入: /help intro</span>
<span class="line"></span>
<span class="line">jshell<span class="token operator">&gt;</span> System.out.println<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span></span>
<span class="line">hello world</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),O=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> int n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">n <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line">jshell<span class="token operator">&gt;</span> int m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">m <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">20</span></span>
<span class="line"></span>
<span class="line">jshell<span class="token operator">&gt;</span> System.out.println<span class="token punctuation">(</span>m+n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token number">30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),H=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> public int add<span class="token punctuation">(</span>int i1, int i2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token punctuation">..</span>.<span class="token operator">&gt;</span> <span class="token builtin class-name">return</span> i1 + i2<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">..</span>.<span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">|</span>  已创建 方法 add<span class="token punctuation">(</span>int,int<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C=e(`<li><p>方法调用：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> System.out.println<span class="token punctuation">(</span>add<span class="token punctuation">(</span>m,n<span class="token punctuation">))</span></span>
<span class="line"><span class="token number">30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>声明类：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> class Person <span class="token punctuation">{</span></span>
<span class="line">   <span class="token punctuation">..</span>.<span class="token operator">&gt;</span> private String name<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">..</span>.<span class="token operator">&gt;</span> private int age<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">..</span>.<span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">|</span>  已创建 类 Person</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>引入包：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> <span class="token function">import</span> java.net.URL<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>编译时异常的处理：</p><p>对于编译时异常，jshell在后台会将其隐藏，不会强制程序员捕获</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> URL url <span class="token operator">=</span> new URL<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">url <span class="token operator">==</span><span class="token operator">&gt;</span> http://www.baidu.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>/help</code>：获取jshell帮助</p></li><li><p><code>/edit</code>：打开编辑窗口。对之前输入的内容编辑完成后，点击<code>Accept</code>按钮编辑内容方可生效</p><p><img src="`+u+`" alt=""></p></li><li><p><code>/vars</code>：列出当前session下定义过的变量</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> /vars</span>
<span class="line"><span class="token operator">|</span>    int n <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token operator">|</span>    int m <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>/methods</code>：列出当前session下定义过的方法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> /methods</span>
<span class="line"><span class="token operator">|</span>    int add<span class="token punctuation">(</span>int,int<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>/list</code>：列出当前session里所有有效的代码片段</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> /list</span>
<span class="line"></span>
<span class="line">   <span class="token number">1</span> <span class="token builtin class-name">:</span> System.out.println<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token number">2</span> <span class="token builtin class-name">:</span> int n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token number">3</span> <span class="token builtin class-name">:</span> int m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token number">4</span> <span class="token builtin class-name">:</span> System.out.println<span class="token punctuation">(</span>m+n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token number">5</span> <span class="token builtin class-name">:</span> public int add<span class="token punctuation">(</span>int i1, int i2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token builtin class-name">return</span> i1 + i2<span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">   <span class="token number">6</span> <span class="token builtin class-name">:</span> System.out.println<span class="token punctuation">(</span>add<span class="token punctuation">(</span>m,n<span class="token punctuation">))</span></span>
<span class="line">   <span class="token number">7</span> <span class="token builtin class-name">:</span> class Person <span class="token punctuation">{</span></span>
<span class="line">       private String name<span class="token punctuation">;</span></span>
<span class="line">       private int age<span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>/open</code>：调用外部文件中的java代码</p><p>java文件中不需要定义类，只需按照jshell工具中的语法编写即可。</p><p><img src="`+r+`" alt=""></p></li><li><p><code>/exit</code>：退出</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jshell<span class="token operator">&gt;</span> /exit</span>
<span class="line"><span class="token operator">|</span>  再见</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,11),R=n("h3",{id:"_17-1-3-接口的私有方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-1-3-接口的私有方法"},[n("span",null,"17.1.3 接口的私有方法")])],-1),D=n("p",null,"Java8中接口除了抽象方法之外，还可以定义静态方法（静态方法只能接口自己调用，实现类不能调用）、默认方法（实现类可以选择是否重写接口中的默认方法）。",-1),B=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> tth</span>
<span class="line"> * <span class="token keyword">@description</span> 接口新特性</span>
<span class="line"> * <span class="token keyword">@date</span> 2023/1/5 11:19</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义抽象方法，访问权限是public</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">methodAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义静态方法，访问权限是public</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是接口中的静态方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义方法，访问权限是public</span></span>
<span class="line">    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是接口中的默认方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义私有方法。JDK9新特性</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">methodPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是接口中的私有方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-1-4-钻石操作符使用升级" tabindex="-1"><a class="header-anchor" href="#_17-1-4-钻石操作符使用升级"><span>17.1.4 钻石操作符使用升级</span></a></h3>`,2),N=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Java9新特性：钻石操作符与匿名实现类可以共同使用</span></span>
<span class="line">    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// JDK7新特性：类型推断</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-1-5-try语句的改进" tabindex="-1"><a class="header-anchor" href="#_17-1-5-try语句的改进"><span>17.1.5 try语句的改进</span></a></h3>`,2),M=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// java8之前的写法</span></span>
<span class="line">    <span class="token comment">//        InputStreamReader reader = null;</span></span>
<span class="line">    <span class="token comment">//        try {</span></span>
<span class="line">    <span class="token comment">//            reader = new InputStreamReader(System.in);</span></span>
<span class="line">    <span class="token comment">//            char[] buff = new char[1024];</span></span>
<span class="line">    <span class="token comment">//            int len;</span></span>
<span class="line">    <span class="token comment">//            while ((len = reader.read(buff)) != -1) {</span></span>
<span class="line">    <span class="token comment">//                String str = new String(buff, 0, len);</span></span>
<span class="line">    <span class="token comment">//                System.out.println(str);</span></span>
<span class="line">    <span class="token comment">//            }</span></span>
<span class="line">    <span class="token comment">//        } catch (IOException e) {</span></span>
<span class="line">    <span class="token comment">//            e.printStackTrace();</span></span>
<span class="line">    <span class="token comment">//        } finally {</span></span>
<span class="line">    <span class="token comment">//            if (null != reader) {</span></span>
<span class="line">    <span class="token comment">//                try {</span></span>
<span class="line">    <span class="token comment">//                    reader.close();</span></span>
<span class="line">    <span class="token comment">//                } catch (IOException e) {</span></span>
<span class="line">    <span class="token comment">//                    e.printStackTrace();</span></span>
<span class="line">    <span class="token comment">//                }</span></span>
<span class="line">    <span class="token comment">//            }</span></span>
<span class="line">    <span class="token comment">//        }</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// java8写法：需要自动关闭的资源的实例化必须写在try的()中</span></span>
<span class="line">    <span class="token comment">//        try(InputStreamReader reader = new InputStreamReader(System.in)) {</span></span>
<span class="line">    <span class="token comment">//            char[] buff = new char[1024];</span></span>
<span class="line">    <span class="token comment">//            int len;</span></span>
<span class="line">    <span class="token comment">//            while ((len = reader.read(buff)) != -1) {</span></span>
<span class="line">    <span class="token comment">//                String str = new String(buff, 0, len);</span></span>
<span class="line">    <span class="token comment">//                System.out.println(str);</span></span>
<span class="line">    <span class="token comment">//            }</span></span>
<span class="line">    <span class="token comment">//        } catch (IOException e) {</span></span>
<span class="line">    <span class="token comment">//            e.printStackTrace();</span></span>
<span class="line">    <span class="token comment">//        }</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// java9写法：需要自动关闭的资源的实例化可以放在try()外边，但是此时的资源对象是一个常量，无法更改。</span></span>
<span class="line">    <span class="token comment">// 如果有多个资源需要自动关闭，在try()中用;隔开</span></span>
<span class="line">    <span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">OutputStreamWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">(</span>reader<span class="token punctuation">;</span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-1-6-string存储结构的变更" tabindex="-1"><a class="header-anchor" href="#_17-1-6-string存储结构的变更"><span>17.1.6 String存储结构的变更</span></a></h3><p>String、StringBuilder、StringBuffer(线程安全)底层改用byte[]存储，不在使用char[]</p><h3 id="_17-1-7-新增创建只读集合的方法" tabindex="-1"><a class="header-anchor" href="#_17-1-7-新增创建只读集合的方法"><span>17.1.7 新增创建只读集合的方法</span></a></h3>`,4),U=e(`<ul><li><p>java9之前创建只读集合--使用<code>Collections.unmodifiableXxx()</code></p><p>以List为例。List还可以使用<code>Arrays.asList()</code>创建只读集合</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">     * java9之前创建只读集合。以List为例</span>
<span class="line">     */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// java9之前的写法1</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    nameList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    nameList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将list变为只读</span></span>
<span class="line">    nameList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>nameList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//        nameList.add(&quot;张三&quot;); // 抛异常 UnsupportedOperationException</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// java9之前的写法2</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameList2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Steven&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//        nameList2.add(&quot;张三&quot;); // 抛异常 UnsupportedOperationException</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameList2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>java9创建只读集合--使用<code>of()</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token operator">*</span><span class="token operator">*</span></span>
<span class="line">    <span class="token operator">*</span> java9新特性：集合工厂方法，创建只读集合</span>
<span class="line">    <span class="token operator">*</span><span class="token operator">/</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建只读List</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//        list.add(6); // 抛异常 UnsupportedOperationException</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建只读Set</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;纳兰性德&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李清照&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;辛弃疾&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//        set.add(&quot;李白&quot;); // 抛异常 UnsupportedOperationException</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建只读Set，方法一</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李煜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;poem&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浪淘沙令·帘外雨潺潺&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//        map.put(&quot;age&quot;, 41); // 抛异常 UnsupportedOperationExceptio</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建只读Set，方法二</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map2 <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">ofEntries</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李煜&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;poem&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;浪淘沙令·帘外雨潺潺&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//        map2.put(&quot;age&quot;, 41); // 抛异常 UnsupportedOperationExceptio</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_17-1-8-inputstream加强" tabindex="-1"><a class="header-anchor" href="#_17-1-8-inputstream加强"><span>17.1.8 InputStream加强</span></a></h3>`,2),K=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * java9新特性：InputStream的新方法--transferTo()</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将输入流中的所有数据直接自动的复制到输出流</span></span>
<span class="line">        is<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-1-9-增强的stream-api" tabindex="-1"><a class="header-anchor" href="#_17-1-9-增强的stream-api"><span>17.1.9 增强的Stream API</span></a></h3><p>Java9中新增了4个新方法：</p><ul><li><p><code>takeWhile()</code>：从开头开始查找满足指定规则的数据，直到找到不满足规则的第一个数据为止，并将这些数据返回</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//takeWhile()：从开头开始查找满足指定规则的数据，直到找到不满足规则的第一个数据为止，并将这些数据返回</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11 22 34</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>dropWhile()</code>：与takeWhile()相反。从开头开始查找不满足指定规则的数据，直到找到满足规则的第一个数据为止，并将这些数据返回</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//dropWhile()：与takeWhile()相反。从开头开始查找不满足指定规则的数据，直到找到满足规则的第一个数据为止，并将这些数据返回</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dropWhile</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 54 90 88 67 7 102</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>ofNullable()</code>：参数只有一个，且形参变量可以是单个的null</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Stream.of()参数中的多个元素，可以包含null值</span></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Stream.of()参数不能存储单个null。否则报NullPointerException</span></span>
<span class="line">    <span class="token comment">//        Stream&lt;Object&gt; stream2 = Stream.of(null);</span></span>
<span class="line">    <span class="token comment">//        System.out.println(stream2.count());</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Stream.of()可以存储多个null值</span></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream3<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Stream.ofNullable()：形参变量可以是单个的null</span></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream4 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream4<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream5 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream5<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>iterate()</code>：是一个重载方法。重载后的第二个参数可以表示终止条件</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// java8中使用Stream.terate(final T seed, final UnaryOperator&lt;T&gt; f) 创建无限流</span></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">::</span> <span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n**************************************************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// java9中重载了Stream.iterate(T seed, Predicate&lt;? super T&gt; hasNext, UnaryOperator&lt;T&gt; next)，其中第二个参数用来表示终止条件</span></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">::</span> <span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_17-1-10-optional获取stream的方法" tabindex="-1"><a class="header-anchor" href="#_17-1-10-optional获取stream的方法"><span>17.1.10 Optional获取Stream的方法</span></a></h3>`,5),G=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    nameList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    nameList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>nameList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将Optional实例转换为Stream实例</span></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">::</span> <span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-1-11-javascript引擎升级-nashorn" tabindex="-1"><a class="header-anchor" href="#_17-1-11-javascript引擎升级-nashorn"><span>17.1.11 JavaScript引擎升级：Nashorn</span></a></h3>`,2),W=n("li",null,"在Java11中，Nashorn被一个新的引擎所取代",-1),F=n("p",null,"附：完整的JavaScript实现包含3部分：",-1),V=n("ul",null,[n("li",null,"ECMAScript：描述该语言的语法和基本对象"),n("li",null,"DOM：文档对象模型。描述处理网页内容的方法和接口"),n("li",null,"BOM：浏览器对象模型。描述与浏览器进行交互的方法和接口")],-1),z=n("h2",{id:"_17-2-java10新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-2-java10新特性"},[n("span",null,"17.2 Java10新特性")])],-1),Z=n("blockquote",null,[n("p",null,"概述")],-1),X=e(`<h3 id="_17-2-1-局部变量类型推断" tabindex="-1"><a class="header-anchor" href="#_17-2-1-局部变量类型推断"><span>17.2.1 局部变量类型推断</span></a></h3><blockquote><p>定义</p></blockquote><p>局部变量类型推断是指，在声明局部变量时，可以根据<code>=</code>右侧的内容推断出变量的类型，此时<code>=</code>左侧不需要再注明变量的类型，直接使用<code>var</code>即可。</p><p><code>例子</code>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// num的类型为int</span></span>
<span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// list的类型为ArrayList&lt;String&gt;</span></span>
<span class="line"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>适用场景</p></blockquote><ul><li>声明局部变量</li><li>增强for循环的遍历操作</li><li>普通for循环的遍历操作</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 局部变量的类型推断--适用场景</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1.声明操作：声明变量时，根据所附的值，推断变量的类型</span></span>
<span class="line">    <span class="token comment">// 类型为int</span></span>
<span class="line">    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 类型为ArrayList&lt;String&gt;</span></span>
<span class="line">    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2.遍历操作</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3.普通的遍历操作</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不适用场景</p></blockquote><ul><li><p>没有初始化的局部变量</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">var</span> num<span class="token punctuation">;</span><span class="token comment">//编译报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Lambda表达式中，左边的函数式接口不能声明为var</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// Lambda表达式中，左边的函数式接口不能声明为var</span></span>
<span class="line"><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line"><span class="token comment">// var sup1 = () -&gt; Math.random(); // 编译报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法引用中，左边函数式接口不能声明为var</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 3.方法引用中，左边函数式接口不能声明为var</span></span>
<span class="line"><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">::</span> <span class="token function">println</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line"><span class="token comment">// var con1 = System.out :: println; // 编译报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数组的静态初始化中，当省略右侧数组元素类型时，左侧变量类型不能生命为var</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 4.数组的静态初始化中，当省略右侧数组元素类型时，左侧变量类型不能生命为var</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line"><span class="token comment">// var arr1 = {1,2,3,4}; // 编译报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>catch块中，异常类型不能声明为var</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 6.catch块中，异常类型不能声明为var</span></span>
<span class="line"><span class="token comment">//        try {</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">//        } catch (var e) { // 编译报错</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">//        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法的返回值类型，不能声明为var</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 方法的返回值类型，不能声明为var</span>
<span class="line"> * <span class="token keyword">@return</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">var</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 编译报错</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 编译报错</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法的形参，不能声明为var</p></li><li><p>构造器的形参，不能声明为var</p></li><li><p>类的属性，不能声明为var</p></li></ul><blockquote><p>工作原理</p></blockquote>`,11),Q=n("blockquote",null,[n("p",null,"注意事项")],-1),Y=n("p",null,[n("img",{src:d,alt:""})],-1),$=n("h3",{id:"_17-2-2-再次新增创建只读集合的方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-2-2-再次新增创建只读集合的方法"},[n("span",null,"17.2.2 再次新增创建只读集合的方法")])],-1),nn=e(`<blockquote><p>使用方法</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;木兰花令&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// list1为只读集合</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项</p></blockquote>`,3),sn=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;浪淘沙令&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;木兰花令&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> copy1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> copy1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;浪淘沙令&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;木兰花令&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> copy2 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> copy2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-3-java11新特性" tabindex="-1"><a class="header-anchor" href="#_17-3-java11新特性"><span>17.3 Java11新特性</span></a></h2>`,2),an=e('<h3 id="_17-3-1-string新增的方法" tabindex="-1"><a class="header-anchor" href="#_17-3-1-string新增的方法"><span>17.3.1 String新增的方法</span></a></h3><table><thead><tr><th>方法</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>boolean isBlank()</td><td>判断字符串是否是空白</td><td>&quot; &quot;.isBlank(); // true</td></tr><tr><td>String strip()</td><td>去掉首尾空格</td><td>&quot; JavaStack &quot;.strip(); // &quot;JavaStack&quot;</td></tr><tr><td>String stripTrailing()</td><td>去掉尾部空格</td><td>&quot; JavaStack &quot;.stripTrailing(); // &quot; JavaStack&quot;</td></tr><tr><td>String stripLeading()</td><td>去掉首部空格</td><td>&quot; JavaStack &quot;.stripLeading(); // &quot;JavaStack &quot;</td></tr><tr><td>String repeat(int count)</td><td>复制count次字符串</td><td>&quot;Java&quot;.repeat(3); // &quot;JavaJavaJava&quot;</td></tr><tr><td>Stream&lt;String&gt; lines()</td><td>行数统计</td><td>&quot;A\\nB\\nC&quot;.lines().count(); // 3</td></tr></tbody></table><h3 id="_17-3-2-optional加强" tabindex="-1"><a class="header-anchor" href="#_17-3-2-optional加强"><span>17.3.2 Optional加强</span></a></h3><p>Optional也新增了几个方法，可以方便的将一个Optional转换成一个Stream，或者当一个空Optional时给它一个替代的。</p><table><thead><tr><th>方法</th><th>描述</th><th>新增的版本</th></tr></thead><tbody><tr><td>boolean isEmpty()</td><td>判断value是否为空（与JDK8中的isPresent()正好相反）</td><td>JDK11</td></tr><tr><td>void ifPresentOrElse(Consumer action, Runnable emptyAction)</td><td>若value非空，执行参数1；否则，执行参数2</td><td>JDK9</td></tr><tr><td>Optional&lt;T&gt; or(Supplier supplier)</td><td>若value非空，返回对应的Optional；否则，返回形参包装的Optional</td><td>JDK9</td></tr><tr><td>Stream&lt;T&gt; stream()</td><td>若value非空，返回包含此value的Stream；否则，返回空的Stream</td><td>JDK9</td></tr><tr><td>T orElseThrow()</td><td>若value非空，返回value；否则，抛异常NoSuchElementException</td><td>JDK10</td></tr></tbody></table><h3 id="_17-3-3-局部变量类型推断升级" tabindex="-1"><a class="header-anchor" href="#_17-3-3-局部变量类型推断升级"><span>17.3.3 局部变量类型推断升级</span></a></h3>',6),tn=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 用注解去修饰Lambda表达中的参数</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 注：当注解去修饰变量的时候，变量的类型一定要有</span></span>
<span class="line">    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@Deprecated</span> <span class="token keyword">var</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-4-全新的http客户端api" tabindex="-1"><a class="header-anchor" href="#_17-4-全新的http客户端api"><span>17.4 全新的HTTP客户端API</span></a></h2><blockquote><p>概述</p></blockquote>`,3),pn=n("p",null,"HTTP/1.1和HTTP/2（2015年成为标准）两个协议的主要区别",-1),en=n("ul",null,[n("li",null,[n("strong",null,"HTTP/1.1依赖于相应周期")]),n("li",null,[n("strong",null,"HTTP/2允许服务器“push”数据：它可以发送比客户端请求更多的数据"),s("。这使得它可以优先处理并发送对于首先加载网页至关重要的数据")])],-1),ln=n("li",null,[n("p",null,"在JDK9中引入Http Client API，该API支持同步和异步，而且在JDK11中对其进行了修改，此时成为正式可用状态。可以在java.net包中找到该API")],-1),cn=n("blockquote",null,[n("p",null,"使用举例")],-1),on=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 同步方式</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseHandler <span class="token operator">=</span> <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// send是同步发送</span></span>
<span class="line">        <span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> responseHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 异步方式</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseHandler <span class="token operator">=</span> <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// sendAsync是异步发送</span></span>
<span class="line">        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpResponse</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sendAsync <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">sendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> responseHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> sendAsync<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-5-更简化的编译运行程序" tabindex="-1"><a class="header-anchor" href="#_17-5-更简化的编译运行程序"><span>17.5 更简化的编译运行程序</span></a></h2>`,2),un=n("blockquote",null,[n("p",null,"只用一个java命令就运行程序的要求")],-1),rn=n("ul",null,[n("li",null,"该方法运行java文件，是去执行源文件中的第一个类，且第一个类必须包含main方法"),n("li",null,"不可以使用其它源文件中的类")],-1),dn=n("h2",{id:"_17-6-废弃nashorn引擎",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-6-废弃nashorn引擎"},[n("span",null,"17.6 废弃Nashorn引擎")])],-1),kn=n("p",null,"废除Nashorn JavaScript引擎，有需要可以考虑使用G让AIVM。",-1),vn=n("h2",{id:"_17-7-zgc垃圾回收",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-7-zgc垃圾回收"},[n("span",null,"17.7 ZGC垃圾回收")])],-1),mn=e('<blockquote><p>背景</p></blockquote><p>现代系统中可用的内存不断增长，用户和程序员希望JVM能够以高效的方式充分利用这些内存，并且无需长时间的GC暂停时间</p><blockquote><p>概念</p></blockquote><p>ZGC是一个并发、基于region、压缩型的垃圾回收器，只有root扫描阶段会STW（stop the world），因此GC停顿时间不会随着堆的增长和存活对象的增长而变长。</p><p>但是目前还是处于试验阶段，开发环境不建议使用</p><blockquote><p>优势</p></blockquote><ul><li>GC暂停时间不会超过10ms</li><li>既能处理几百兆的小堆, 也能处理几个T的大堆(OMG)</li><li>和G1相比, 应用吞吐能力不会下降超过15%</li><li>为未来的GC功能和利用colord指针以及Load barriers优化奠定基础</li><li>初始只支持64位系统</li></ul><h2 id="_17-8-其他新特性" tabindex="-1"><a class="header-anchor" href="#_17-8-其他新特性"><span>17.8 其他新特性</span></a></h2><ul><li>Unicode 10</li><li>Deprecate the Pack200 Tools and API</li><li>新的Epsilon垃圾收集器</li><li>完全支持Linux容器（包括Docker）</li><li>支持G1上的并行完全垃圾收集</li><li>最新的HTTPS安全协议TLS 1.3</li><li>Java Flight Recorder</li></ul><h2 id="_17-9-jdk展望" tabindex="-1"><a class="header-anchor" href="#_17-9-jdk展望"><span>17.9 JDK展望</span></a></h2><ul><li>缺乏一个标准化和轻量级的JSON API</li><li>缺乏新的货币API</li></ul>',11);function bn(hn,gn){const a=c("front");return o(),i("div",null,[v,m,n("ul",null,[n("li",null,[s("从java9开始，java的从"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("以特性驱动")]),_:1}),s("的发布周期转变为"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("以时间驱动")]),_:1}),s("的发布周期。 Java的计划发布周期是"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("6个月")]),_:1}),s("，Oracle（在Java11之后）将以"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("三年为周期")]),_:1}),s("发布长期支持版本。")]),b]),h,n("p",null,[s("Java9中最重要的两大改变："),t(a,{color:"red"},{default:p(()=>[s("模块化系统")]),_:1}),s("、"),t(a,{color:"red"},{default:p(()=>[s("jshell命令")]),_:1})]),g,n("p",null,[s("Java9提供了"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("超过150项新功能")]),_:1}),s("特性，包括备受期待的模块化系统、可交互的REPL工具（jshell、JDK编译工具）、Java公共API和私有代码，以及安全增强、扩展提升、性能管理改善等。可以说"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("Java9是一个庞大的系统工程，完全做了一个整体改变")]),_:1}),s("。")]),y,n("ul",null,[n("li",null,[s("最主要之一："),t(a,{style:{background:"yellow"}},{default:p(()=>[s("模块化系统")]),_:1})]),n("li",null,[s("最主要之二："),t(a,{style:{background:"yellow"}},{default:p(()=>[s("jshell命令")]),_:1})]),_]),f,j,t(a,{style:{background:"yellow"}},{default:p(()=>[s("谈到Java9大家往往第一个想到的就是Jigsaw项目。")]),_:1}),s("Java自出生以来，Java和相关生态在不断丰富的同时，也暴露出一些问题："),w,S,n("p",null,[s("本质上讲，"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("模块（module）的概念，其实就是package外再裹一层")]),_:1}),s("。也就是说，用模块来管理各个package，通过声明某个package暴露，不声明默认就是隐藏。因此，模块化使得代码组织上"),t(a,{color:"red"},{default:p(()=>[s("更安全")]),_:1}),s("， 因为它可以"),t(a,{color:"red"},{default:p(()=>[s("指定哪些部分可以暴露，哪些部分需要隐藏")]),_:1}),s("。")]),q,x,J,n("ul",null,[L,n("li",null,[T,n("ul",null,[n("li",null,[s("①在java9test模块中的"),t(a,{color:"red"},{default:p(()=>[s("src")]),_:1}),s("目录下创建"),t(a,{color:"red"},{default:p(()=>[s("module-info.java文件")]),_:1}),s("，写明要暴露出去的包(注意是包，不能详细到类)")]),n("li",null,[s("②在day13模块的"),t(a,{color:"red"},{default:p(()=>[s("src")]),_:1}),s("目录下中创建"),t(a,{color:"red"},{default:p(()=>[s("module-info.java文件")]),_:1}),s("，写明要导入的包(注意是包，不能详细到类)")]),E])]),P]),A,n("ul",null,[I,n("li",null,[n("p",null,[s("声明变量："),t(a,{color:"red"},{default:p(()=>[s("如果变量名被重复定义，后边定义的会覆盖之前的")]),_:1})]),O]),n("li",null,[n("p",null,[s("声明方法："),t(a,{color:"red"},{default:p(()=>[s("如果方法名被重复定义，后边定义的会覆盖之前的")]),_:1})]),H]),C]),R,D,t(a,{style:{background:"yellow"}},{default:p(()=>[s("Java9中接口的方法可以定义为private的。")]),_:1}),s("私有方法只能在接口内部使用，外部不允许调用。"),B,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("在Java9中，钻石操作符与匿名实现类可以共同存在")]),_:1}),s("，在java9之前是不可以的。")]),n("p",null,[s("此外，"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("该特性要与jdk7中新特性--类型推断区分开")]),_:1}),s("。")]),N,n("p",null,[s("在java8和java9中可以实现"),t(a,{color:"red"},{default:p(()=>[s("资源的自动关闭")]),_:1}),s("。")]),n("ul",null,[n("li",null,[s("在java8中，需要关闭的资源的实例化需要在"),t(a,{color:"red"},{default:p(()=>[s("try后边的()")]),_:1}),s("中进行。此时")]),n("li",null,[s("在java9中，需要关闭的资源的实例化可以在"),t(a,{color:"red"},{default:p(()=>[s("try外边")]),_:1}),s("实现，"),t(a,{color:"red"},{default:p(()=>[s("try对应的()中写明要关闭的资源")]),_:1}),s("。"),t(a,{color:"red"},{default:p(()=>[s("多个资源用 ; 隔开")]),_:1})])]),M,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("java9中可以使用具体集合的of()方法创建只读集合")]),_:1}),s("。")]),U,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("java9中，`InputStream`新增方法`transferTO()`，可以将数据直接传输到`OutputStream`")]),_:1})]),K,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("Optional本质是一个容器")]),_:1}),s("，因此也可以调用`stream()`方法将其转换为Stream实例")]),G,n("ul",null,[n("li",null,[s("Java8之前使用Rhino解析JavaScript，Java8开始使用Nashorn，"),t(a,{color:"red"},{default:p(()=>[s("在Java9中对Nashorn进行改进--Nashorn为java提供了轻量级的JavaScript运行时")]),_:1})]),n("li",null,[t(a,{color:"red"},{default:p(()=>[s("Java9包含一个用来解析Nashorn的ECMAScript语法树的API")]),_:1}),s("。这个API使得IED和服务端框架不需要依赖Nashorn项目的内部实现类，就能分析ECMAScript代码")]),W]),F,V,z,n("p",null,[s("Java10中最重要的改变："),t(a,{color:"red"},{default:p(()=>[s("局部变量类型推断")]),_:1})]),Z,n("p",null,[s("Java10提供了"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("超过109项新特性")]),_:1}),s("，其中包含12个JEP(JDK特性加强协议)，"),t(a,{color:"red"},{default:p(()=>[s("对于程序员来讲，真正的新特性就一个")]),_:1}),s("。")]),X,t(a,{color:"red"},{default:p(()=>[s("在处理var时，编译器先是看表达式右边部分")]),_:1}),s("，并根据右边变量值的类型进行推断，作为左边的类型，然后"),t(a,{color:"red"},{default:p(()=>[s("将该类型写入字节码文件中")]),_:1}),s("。"),Q,n("ul",null,[n("li",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("var不是关键字")]),_:1}),s("。var是一个类型名，也是一个普通的标识符。作为类型名，在编译器需要知道类型的地方才会用到它。作为一个普通的标识符，除了不能用它作为类名外，声明的变量、方法等都可以使用var来命名")]),n("li",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("这不是JavaScript")]),_:1}),s("。JavaScript是一门边解释边运行的语言，是一门动态语言。虽然Java10中引入了var，但是"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("var 并不会改变Java是一门静态语言的事实")]),_:1}),s("。在遇到var声明的变量时，编译器负责推断出类型，并将其写入字节码文件。var的出现只是简化了程序的编写，对字节码文件没有任何作用。也就是说源文件中用var声明的变量，在字节码中会将var转换为对应的类型，如下图："),Y])]),$,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("java10中可以新增copyOf()方法用来将一个集合转为只读集合。")]),_:1})]),nn,n("p",null,[s("List copyOf(Collection coll)在返回只读集合时，会"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("先判断coll是不是AbstractImmutableList类型的")]),_:1}),s("。如果coll是AbstractImmutableList类型的，会将coll直接返回。否则会调用List.of()方法创建一个新的AbstractImmutableList集合并返回。")]),sn,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("Java11是一个长期支持的版本。")]),_:1})]),n("p",null,[s("Java11中最重要的两个改变："),t(a,{color:"red"},{default:p(()=>[s("引入了两种新的GC，包括Epsilon和ZGC（也许具有跨时代的意义）")]),_:1})]),an,n("p",null,[s("可以在"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("在var上添加注解")]),_:1})]),tn,n("ul",null,[n("li",null,[pn,n("p",null,[s("二者的主要区别是"),t(a,{color:"red"},{default:p(()=>[s("如何在客户端和服务器之间构建和传输数据")]),_:1}),s("。")]),en]),ln,n("li",null,[n("p",null,[s("它将"),t(a,{color:"red"},{default:p(()=>[s("替代仅适用于blocking模式的HttpURLConnection")]),_:1}),s("(HttpURLConnection是在HTTP1.0的时代创建的)，"),t(a,{color:"red"},{default:p(()=>[s("并提供对 WebSocket 和 HTTP/2 的支持")]),_:1}),s("。")])])]),cn,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("需要在module-info.java中引入java.net.http包")]),_:1})]),on,n("p",null,[s("在JDK11之前，运行一个Java源码，需要先编译，再运行。"),t(a,{style:{background:"yellow"}},{default:p(()=>[s("在JDK11中只用一个java命令就可以直接编译运行程序")]),_:1}),s("。")]),un,rn,dn,kn,vn,n("p",null,[t(a,{style:{background:"yellow"}},{default:p(()=>[s("ZGC是Java11最瞩目的特性")]),_:1})]),mn])}const _n=l(k,[["render",bn],["__file","17_Java9_10_11新特性.html.vue"]]),fn=JSON.parse('{"path":"/static/tang/java2/17_Java9_10_11%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"17 Java9&10&11新特性","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"17.1 Java9新特性","slug":"_17-1-java9新特性","link":"#_17-1-java9新特性","children":[{"level":3,"title":"17.1.1 模块化系统","slug":"_17-1-1-模块化系统","link":"#_17-1-1-模块化系统","children":[]},{"level":3,"title":"17.1.2 Java的REPL工具：jshell命令","slug":"_17-1-2-java的repl工具-jshell命令","link":"#_17-1-2-java的repl工具-jshell命令","children":[]},{"level":3,"title":"17.1.3 接口的私有方法","slug":"_17-1-3-接口的私有方法","link":"#_17-1-3-接口的私有方法","children":[]},{"level":3,"title":"17.1.4 钻石操作符使用升级","slug":"_17-1-4-钻石操作符使用升级","link":"#_17-1-4-钻石操作符使用升级","children":[]},{"level":3,"title":"17.1.5 try语句的改进","slug":"_17-1-5-try语句的改进","link":"#_17-1-5-try语句的改进","children":[]},{"level":3,"title":"17.1.6 String存储结构的变更","slug":"_17-1-6-string存储结构的变更","link":"#_17-1-6-string存储结构的变更","children":[]},{"level":3,"title":"17.1.7 新增创建只读集合的方法","slug":"_17-1-7-新增创建只读集合的方法","link":"#_17-1-7-新增创建只读集合的方法","children":[]},{"level":3,"title":"17.1.8 InputStream加强","slug":"_17-1-8-inputstream加强","link":"#_17-1-8-inputstream加强","children":[]},{"level":3,"title":"17.1.9 增强的Stream API","slug":"_17-1-9-增强的stream-api","link":"#_17-1-9-增强的stream-api","children":[]},{"level":3,"title":"17.1.10 Optional获取Stream的方法","slug":"_17-1-10-optional获取stream的方法","link":"#_17-1-10-optional获取stream的方法","children":[]},{"level":3,"title":"17.1.11 JavaScript引擎升级：Nashorn","slug":"_17-1-11-javascript引擎升级-nashorn","link":"#_17-1-11-javascript引擎升级-nashorn","children":[]}]},{"level":2,"title":"17.2 Java10新特性","slug":"_17-2-java10新特性","link":"#_17-2-java10新特性","children":[{"level":3,"title":"17.2.1 局部变量类型推断","slug":"_17-2-1-局部变量类型推断","link":"#_17-2-1-局部变量类型推断","children":[]},{"level":3,"title":"17.2.2 再次新增创建只读集合的方法","slug":"_17-2-2-再次新增创建只读集合的方法","link":"#_17-2-2-再次新增创建只读集合的方法","children":[]}]},{"level":2,"title":"17.3 Java11新特性","slug":"_17-3-java11新特性","link":"#_17-3-java11新特性","children":[{"level":3,"title":"17.3.1 String新增的方法","slug":"_17-3-1-string新增的方法","link":"#_17-3-1-string新增的方法","children":[]},{"level":3,"title":"17.3.2 Optional加强","slug":"_17-3-2-optional加强","link":"#_17-3-2-optional加强","children":[]},{"level":3,"title":"17.3.3 局部变量类型推断升级","slug":"_17-3-3-局部变量类型推断升级","link":"#_17-3-3-局部变量类型推断升级","children":[]}]},{"level":2,"title":"17.4 全新的HTTP客户端API","slug":"_17-4-全新的http客户端api","link":"#_17-4-全新的http客户端api","children":[]},{"level":2,"title":"17.5 更简化的编译运行程序","slug":"_17-5-更简化的编译运行程序","link":"#_17-5-更简化的编译运行程序","children":[]},{"level":2,"title":"17.6 废弃Nashorn引擎","slug":"_17-6-废弃nashorn引擎","link":"#_17-6-废弃nashorn引擎","children":[]},{"level":2,"title":"17.7 ZGC垃圾回收","slug":"_17-7-zgc垃圾回收","link":"#_17-7-zgc垃圾回收","children":[]},{"level":2,"title":"17.8 其他新特性","slug":"_17-8-其他新特性","link":"#_17-8-其他新特性","children":[]},{"level":2,"title":"17.9 JDK展望","slug":"_17-9-jdk展望","link":"#_17-9-jdk展望","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/17_Java9&10&11新特性.md"}');export{_n as comp,fn as data};
