import{_ as e,p as i,q as a,a1 as l}from"./framework-5866ffd3.js";const t={},r=l('<h1 id="前端设计模式简介" tabindex="-1"><a class="header-anchor" href="#前端设计模式简介" aria-hidden="true">#</a> 前端设计模式简介</h1><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。</p><h2 id="原则" tabindex="-1"><a class="header-anchor" href="#原则" aria-hidden="true">#</a> 原则</h2><ul><li>单一职责原则: 一个程序只做好一件事,如果功能过于复杂就拆分开，每个部分保持独立</li><li>开放/封闭原则: 对扩展开放，对修改封闭 增加需求时，扩展新代码，而非修改已有代码</li><li>里氏替换原则: 子类能覆盖父类 父类能出现的地方子类就能出现</li><li>接口隔离原则: 保持接口的单一独立 类似单一职责原则，这里更关注接口</li><li>依赖倒转原则: 面向接口编程，依赖于抽象而不依赖于具体 使用方只关注接口而不关注具体类的实现</li><li>迪米特法则（最少知识原则）： 对外接口简单，当前类对其他类的知识越少越好。</li></ul>',4),n=[r];function c(d,s){return i(),a("div",null,n)}const o=e(t,[["render",c],["__file","index.html.vue"]]);export{o as default};
