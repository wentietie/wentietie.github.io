import{_ as l,r as o,o as c,c as i,e as n,a as p,w as t,d as s,b as e}from"./app-DRxAhH5h.js";const u="/assets/image-20230109114138032-CgDCuhgY.png",r="/assets/image-20230110153153672-zcK1vh9X.png",k={},d=n("h1",{id:"_20-排序算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_20-排序算法"},[n("span",null,"20 排序算法")])],-1),m=n("h2",{id:"_20-1-排序算法概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_20-1-排序算法概述"},[n("span",null,"20.1 排序算法概述")])],-1),v=n("blockquote",null,[n("p",null,"衡量排序算法的优劣")],-1),b=n("blockquote",null,[n("p",null,"排序算法分类")],-1),_=n("span",{style:{color:"red"}},"多路归并排序",-1),h=n("blockquote",null,[n("p",null,"十大排序算法")],-1),g=n("p",null,"将待排序的元素分为已排序（初始为空）和未排序两组，依次将未排序的元素中值最小的元素放入已排序的组中。",-1),y=e("<li><p>交换排序</p><ul><li>冒泡排序</li><li>快速排序</li></ul></li><li><p>插入排序</p><ul><li>直接插入排序</li><li>折半插入排序</li><li>希尔排序</li></ul></li><li><p>归并排序</p></li><li><p>桶式排序</p></li><li><p>基数排序</p></li>",5),w=n("blockquote",null,[n("p",null,"算法5大特性")],-1),f=e('<h2 id="_20-2-选择排序" tabindex="-1"><a class="header-anchor" href="#_20-2-选择排序"><span>20.2 选择排序</span></a></h2><h3 id="_20-2-1-简单选择排序" tabindex="-1"><a class="header-anchor" href="#_20-2-1-简单选择排序"><span>20.2.1 简单选择排序</span></a></h3><blockquote><p>基本过程</p></blockquote><ul><li>在一组元素R[i]到R[n]中选择最小的元素</li><li>如果他不是这组元素中的第一个元素，则将其与该组元素中的第一个元素交换</li><li>除去具有最小关键字的元素，在剩下的元素中重复以上两步骤，直到元素只有一个为止</li></ul><blockquote><p>效率分析</p></blockquote><ul><li><p><span style="color:red;">比较次数</span>：$(n-1)+(n-2)+...+2+1=n(n-1)/2$</p><p>无论初始状况如何，在第i趟排序中选择最小元素的时候，都需要做$(n-i)$次比较</p></li><li><p><span style="color:red;">交换次数</span>：</p><ul><li><p>最好情况：0次</p><p>序列恰好为正序时，需要交换0次</p></li><li><p>最差情况：${(n-1)}$次</p><p>如将数组[${5,1,2,3,4}$]按照有小到大的顺序排列，需要移动4次</p></li></ul></li></ul>',6),$=n("blockquote",null,[n("p",null,"稳定性")],-1),q=e(`<p>由于在直接选择排序中存在不相邻元素的交换，因此它是一个不稳定的排序方法。</p><p>比如给定数组[$3,7,3&#39;,2,1$]，按照有小到大的顺序排列后的结果为[$1,2,3&#39;,3,7$]</p><blockquote><p>示例代码</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 开始排序</span></span>
<span class="line"><span class="token comment">// 说明1：循环条件是 i &lt; arr.length - 1，而不是i &lt; arr.length的原因：最后一个数无需和自身进行比较、交换</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 记录最小值的下标</span></span>
<span class="line">    <span class="token comment">// 循环找到数组中的最小值对应的下标</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            index <span class="token operator">=</span> j<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将最小值和无序数组中的第一个元素进行交换（当最小值下标和当前下标不相等的时候再交换）</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    	arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    	arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 排序完成</span></span>
<span class="line"><span class="token comment">// 打印</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-2-2-堆排序" tabindex="-1"><a class="header-anchor" href="#_20-2-2-堆排序"><span>20.2.2 堆排序</span></a></h3><h2 id="_20-3-交换排序" tabindex="-1"><a class="header-anchor" href="#_20-3-交换排序"><span>20.3 交换排序</span></a></h2><h3 id="_20-3-1-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_20-3-1-冒泡排序"><span>20.3.1 冒泡排序</span></a></h3><blockquote><p>基本思想</p></blockquote><p>对待排序序列从前往后，依次比较相邻元素排序码，如果逆序则交换，使排序码较大的元素逐渐从前往后移动。</p><blockquote><p>效率分析</p></blockquote><ul><li><p><span style="color:red;">比较次数</span>：</p><ul><li><p>最好情况：$n-1$次</p><p>此时待排序序列恰好是按照要求的顺序进行排序</p></li><li><p>最坏情况：$(n-1)+(n-2)+...+2+1=n(n-1)/2$次</p><p>此时待排序序列恰好是按照要求的顺序的逆序进行排序</p></li></ul></li><li><p><span style="color:red;">交换次数</span>：</p><ul><li><p>最好情况：0次</p><p>此时待排序序列恰好是按照要求的顺序进行排序</p></li><li><p>最坏情况：$(n-1)+(n-2)+...+2+1=n(n-1)/2$</p></li></ul></li></ul><blockquote><p>稳定性</p></blockquote><blockquote><p>示例代码</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 开始排序</span></span>
<span class="line"><span class="token comment">// 说明1：循环条件是 i &lt; arr.length - 1，而不是i &lt; arr.length的原因：最后一个数无需和自身进行比较、交换</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 说明2：循环条件是arr.length - 1 - i的原因：每完成一次排序，最后（i+1）个数都已完成排序，不需要再进行比较、交换</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 排序完成</span></span>
<span class="line"><span class="token comment">// 打印</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-3-2-快速排序" tabindex="-1"><a class="header-anchor" href="#_20-3-2-快速排序"><span>20.3.2 快速排序</span></a></h3><h2 id="_20-4-插入排序" tabindex="-1"><a class="header-anchor" href="#_20-4-插入排序"><span>20.4 插入排序</span></a></h2><h3 id="_20-4-1-直接插入排序" tabindex="-1"><a class="header-anchor" href="#_20-4-1-直接插入排序"><span>20.4.1 直接插入排序</span></a></h3><blockquote><p>基本过程</p></blockquote><ul><li>视R[m]为有序序列</li><li>比较R[m+1]和R[m]大小，如果R[m+1] &gt;= R[m]，继续下一循环。否则，进入下一步。</li><li>如果R[m+1] &lt; R[m]，比较R[m+1]与R[m]中的元素，将R[m+1]插入合适位置</li></ul><blockquote><p>效率分析</p></blockquote><p><img src="`+u+'" alt="image-20230109114138032"></p>',21),j=n("p",null,[n("span",{style:{color:"red"}},"最好情况"),s("：输入的数组已经排好序")],-1),x=n("p",null,[n("span",{style:{color:"red"}},"最坏情况"),s("：输入的数组恰好是倒序排序")],-1),O=n("p",null,[n("span",{style:{color:"red"}},"平均情况"),s("：数组A[1...j]中,一般元素大于A[j],一般元素小于A[j]，计算起来时间复杂度和最坏请款一致")],-1),R=n("blockquote",null,[n("p",null,"稳定性")],-1),A=e(`<blockquote><p>示例代码</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 插入排序--直接插入排序</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">            j<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-4-2-折半插入排序" tabindex="-1"><a class="header-anchor" href="#_20-4-2-折半插入排序"><span>20.4.2 折半插入排序</span></a></h3><h3 id="_20-4-3-希尔排序" tabindex="-1"><a class="header-anchor" href="#_20-4-3-希尔排序"><span>20.4.3 希尔排序</span></a></h3><h2 id="_20-5-归并排序" tabindex="-1"><a class="header-anchor" href="#_20-5-归并排序"><span>20.5 归并排序</span></a></h2><blockquote><p>基本过程</p></blockquote>`,6),T=n("ul",null,[n("li",null,[n("strong",null,"分解"),s("：分解待排序的n个元素序列成各有n/2个元素的子序列")]),n("li",null,[n("strong",null,"解决"),s("：使用归并排序递归的排列两个子列")]),n("li",null,[n("strong",null,"合并"),s("：合并两个已排序的子列以产生已排序的答案")])],-1),C=n("blockquote",null,[n("p",null,"效率分析--合并步骤的时间复杂度")],-1),E=n("p",null,[n("img",{src:r,alt:"image-20230110153153672"})],-1),S=n("blockquote",null,[n("p",null,"效率分析--归并排序时间复杂度")],-1),B=e("<ul><li><p>当归并排序<strong>一个元素</strong>（一个元素为最小输入）时需要的时间为常量时间。</p></li><li><p>当$n\\geq 1$时，分析运行时间如下：</p><ul><li><strong>分解</strong>：分解步骤仅仅计算子数组的中间位置，需要常量时间，因此D(n)=O(1)</li><li><strong>解决</strong>：递归算法中是递归的求解将原问题分为2个规模为n/2的子问题，即a=2，b=2</li><li><strong>合并</strong>：在【效率分析--合并步骤的时间复杂度】中已知，合并所需的时间C(n)=O(n)</li></ul></li><li><p>综上，归并排序算法最坏情况下时间复杂度公式为</p><p>（注：分解时间D(n)=O(1)，可以忽略） $$ T(n) = \\begin{cases} O(1), &amp; \\text {$n\\leq 1$}\\ 2T(n/2)+O(n), &amp; \\text {$n &gt; 1$} \\end{cases} $$</p></li></ul>",1),D=n("span",{style:{color:"red"}},"最坏情况",-1),N=n("blockquote",null,[n("p",null,"稳定性")],-1),V=e(`<blockquote><p>示例代码</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 归并排序</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">arr</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">start</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">end</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> midd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> midd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> midd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> midd<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 将两个有序数组合并成一个有序数组（使用哨兵的方式）</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">arr</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">start</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">midd</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">end</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> midd<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>midd <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>end <span class="token operator">-</span> midd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> midd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        l<span class="token punctuation">[</span>i<span class="token operator">-</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> midd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        r<span class="token punctuation">[</span>i<span class="token operator">-</span>midd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    l<span class="token punctuation">[</span>midd <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// 哨兵</span></span>
<span class="line">    r<span class="token punctuation">[</span>end <span class="token operator">-</span> midd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// 哨兵</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">,</span> li <span class="token operator">=</span> i <span class="token operator">-</span> start<span class="token punctuation">,</span> ri <span class="token operator">=</span> li<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span>li<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> r<span class="token punctuation">[</span>ri<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>li<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            li<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>ri<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            ri<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-6-桶式排序" tabindex="-1"><a class="header-anchor" href="#_20-6-桶式排序"><span>20.6 桶式排序</span></a></h2><h2 id="_20-7-基数排序" tabindex="-1"><a class="header-anchor" href="#_20-7-基数排序"><span>20.7 基数排序</span></a></h2><h2 id="_20-8-算法设计" tabindex="-1"><a class="header-anchor" href="#_20-8-算法设计"><span>20.8 算法设计</span></a></h2><h3 id="_20-8-1-分治模式" tabindex="-1"><a class="header-anchor" href="#_20-8-1-分治模式"><span>20.8.1 分治模式</span></a></h3><blockquote><p>使用场景</p></blockquote><p>适用于递归算法中</p><blockquote><p>思想</p></blockquote><p>将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解</p><blockquote><p>步骤</p></blockquote>`,11),M=e("<ul><li><strong>分解</strong>原问题为若干子问题，这些子问题都是原问题的规模较小的实例</li><li><strong>解决</strong>这些子问题，递归的求解各个子问题。当子问题规模足够小时，可以直接求解</li><li><strong>合并</strong>这些子问题的解成原问题的解、</li></ul><blockquote><p>分析分治算法的时间复杂度</p></blockquote><p>当一个算法包含自身的递归调用时，可以使用<strong>递归方程</strong>或<strong>递归式</strong>来描述其运行时间，该方程根据在<strong>最小输入上的运行时间</strong>来描述在规模n问题上的总运行时间。然后，通过数学工具来求解递归式并给出算法性能的<strong>界</strong>。</p>",3),X=n("p",null,"①假设T(n)是规模为n的一个问题的运行时间。",-1),z=n("p",null,"②如果问题足够小(假设对于常量c，n<=c)，则直接求解需要常量时间，记为O(1)。",-1),I=n("p",null,"③当问题比较大时，将原问题分解为a个子问题，每个子问题的规模是原问题的1/b，即子问题的规模为n/b。那么规模为n的问题的运行时间T(n)可以写成：T(n) = a*T(n/b)。",-1),L=n("p",null,"④假设分解大问题为小问题所需时间为D(n)，小问题的解合并成大问题的解所需时间C(n)，那么，便可以得到递归式： $$ T(n) = \\begin{cases} O(1), & \\text {$n\\leq c$}\\ aT(n/b)+D(n)+C(n), & \\text {$n > c$} \\end{cases} $$ ⑤对该递归式求解，即可得到该算法的时间复杂度",-1);function U(F,J){const a=o("front");return c(),i("div",null,[d,m,v,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("时间复杂度")]),_:1}),s("：分析关键字的比较次数和记录的移动次数")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("空间复杂度")]),_:1}),s("：分析算法中需要多少辅助内存")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("稳定性")]),_:1}),s("：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种算法是稳定的")])]),b,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("内部排序")]),_:1}),s("：整个排序过程不需要借助外部存储器（如磁盘等），所有排序操作都在内存中完成。")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("外部排序")]),_:1}),s("：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助外部存储器（如磁盘）等。外部排序最常见的算法有"),_,s("。可以认为外部排序是由多次内部排序组成的。")])]),h,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("选择排序")]),_:1}),g,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("简单选择排序")]),_:1})]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("堆排序")]),_:1})])])]),y]),w,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("输入")]),_:1}),s("：有0个或多个输入数据，这些输入必须有清楚的描述和定义")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("输出")]),_:1}),s("：至少有1个或多个输出结果，不可以没有输出")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("有穷性（有限性）")]),_:1}),s("：算法可以在有限的步骤之后会自动结束而不是无线循环，并且每一个步骤可以在可接受的时间内完成")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("确定性（明确性）")]),_:1}),s("：算法中的每一步都有确定的含义，不会出现二义性")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("可行性（有效性）")]),_:1}),s("：算法的每一步骤都是清楚且可行的，能让用户用纸笔计算而求出答案")])]),f,n("p",null,[s("综上，简单选择排序的"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("时间复杂度为$O(n^{2})$")]),_:1})]),$,p(a,{style:{background:"yellow"}},{default:t(()=>[s("不稳定")]),_:1}),q,n("ul",null,[n("li",null,[j,p(a,{style:{background:"yellow"}},{default:t(()=>[s("时间复杂度为$O(n)$")]),_:1})]),n("li",null,[x,p(a,{style:{background:"yellow"}},{default:t(()=>[s("时间复杂度为$O(n^{2})$")]),_:1})]),n("li",null,[O,p(a,{style:{background:"yellow"}},{default:t(()=>[s("时间复杂度为$O(n^{2})$")]),_:1})])]),R,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("稳定")]),_:1})]),A,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("归并排序算法完全遵循分治模式")]),_:1}),s("，步骤如下：")]),T,C,E,n("p",null,[s("合并步骤的时间复杂度："),p(a,{style:{background:"yellow"}},{default:t(()=>[s("O(n)")]),_:1})]),S,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("归并排序算法完全遵循分治模式")]),_:1}),s("，其中分治模式算法的时间复杂度公式为：")]),s(" $$ T(n) = \\begin{cases} O(1), & \\text {$n\\leq c$}\\\\ aT(n/b)+D(n)+C(n), & \\text {$n > c$} \\end{cases} $$ "),B,n("p",null,[s("经求解，"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("归并排序算法"),D,s("下的时间复杂度为O(nlgn)")]),_:1})]),N,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("稳定")]),_:1})]),V,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("分治模式在每层递归时都有三个步骤：")]),_:1})]),M,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("步骤如下：")]),_:1})]),X,z,I,L])}const P=l(k,[["render",U],["__file","20_排序算法.html.vue"]]),Y=JSON.parse('{"path":"/static/tang/java2/20_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html","title":"20 排序算法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"20.1 排序算法概述","slug":"_20-1-排序算法概述","link":"#_20-1-排序算法概述","children":[]},{"level":2,"title":"20.2 选择排序","slug":"_20-2-选择排序","link":"#_20-2-选择排序","children":[{"level":3,"title":"20.2.1 简单选择排序","slug":"_20-2-1-简单选择排序","link":"#_20-2-1-简单选择排序","children":[]},{"level":3,"title":"20.2.2 堆排序","slug":"_20-2-2-堆排序","link":"#_20-2-2-堆排序","children":[]}]},{"level":2,"title":"20.3 交换排序","slug":"_20-3-交换排序","link":"#_20-3-交换排序","children":[{"level":3,"title":"20.3.1 冒泡排序","slug":"_20-3-1-冒泡排序","link":"#_20-3-1-冒泡排序","children":[]},{"level":3,"title":"20.3.2 快速排序","slug":"_20-3-2-快速排序","link":"#_20-3-2-快速排序","children":[]}]},{"level":2,"title":"20.4 插入排序","slug":"_20-4-插入排序","link":"#_20-4-插入排序","children":[{"level":3,"title":"20.4.1 直接插入排序","slug":"_20-4-1-直接插入排序","link":"#_20-4-1-直接插入排序","children":[]},{"level":3,"title":"20.4.2 折半插入排序","slug":"_20-4-2-折半插入排序","link":"#_20-4-2-折半插入排序","children":[]},{"level":3,"title":"20.4.3 希尔排序","slug":"_20-4-3-希尔排序","link":"#_20-4-3-希尔排序","children":[]}]},{"level":2,"title":"20.5 归并排序","slug":"_20-5-归并排序","link":"#_20-5-归并排序","children":[]},{"level":2,"title":"20.6 桶式排序","slug":"_20-6-桶式排序","link":"#_20-6-桶式排序","children":[]},{"level":2,"title":"20.7 基数排序","slug":"_20-7-基数排序","link":"#_20-7-基数排序","children":[]},{"level":2,"title":"20.8 算法设计","slug":"_20-8-算法设计","link":"#_20-8-算法设计","children":[{"level":3,"title":"20.8.1 分治模式","slug":"_20-8-1-分治模式","link":"#_20-8-1-分治模式","children":[]}]}],"git":{},"filePathRelative":"static/tang/java2/20_排序算法.md"}');export{P as comp,Y as data};
