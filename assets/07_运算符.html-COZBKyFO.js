import{_ as s,r as c,o as i,c as a,e as t,a as o,w as n,b as l,d as e}from"./app-CQavEA7Q.js";const u={},r=t("h1",{id:"_7-运算符",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_7-运算符"},[t("span",null,"7 运算符")])],-1),p=t("h1",{id:"_7-1-算术运算符",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_7-1-算术运算符"},[t("span",null,"7.1 算术运算符")])],-1),b=l(`<blockquote><p>加法与减法</p></blockquote><ul><li>整型 <code>+(-)</code> 整型 = 整型</li><li>整型 <code>+(-) </code>浮点型 = 浮点型</li><li><code>+</code>只表示数 值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL 中字符串拼接要使用字符串函数CONCAT()实现）</li></ul><blockquote><p>乘法与除法</p></blockquote><ul><li>一个数 <code>*(/)</code> 整数1 = 原数</li><li>一个数 <code>*(/)</code>浮点数1 = 浮点数，且数值与原数相等</li><li>一个数 <code>/</code> 整数 = 浮点数</li><li>一个数 <code>/</code> 另一个数 = 浮点数，且当除不尽时，保留到小数点后4位</li><li>一个数 <code>/</code> 0 = null</li></ul><h1 id="_7-2-比较运算符" tabindex="-1"><a class="header-anchor" href="#_7-2-比较运算符"><span>7.2 比较运算符</span></a></h1><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的<strong>结果为真则返回1</strong>，比较的<strong>结果为假则返回0</strong>，其他情况则返回NULL。</p><ul><li><p><code>=</code>：判断等号两边的值、字符串或表达式是否相等</p><ul><li>如果等号两遍都为<strong>字符串</strong>，则MySQL会按照字符串进行比较，其<strong>比较的是每个字符串中字符的ANSI编码是否相等</strong>。</li><li>如果等号两边都是<strong>整数</strong>，则MySQL会按照整数来比较两个值的大小。</li><li>如果等号两边一个是整数，一个是字符串，则MySQL会将字符串转化为数字进行比较。</li><li>如果等号两边有一个为NULL，则比较结果为NULL</li></ul></li><li><p><code>&lt;=&gt;</code>：安全等于运算符（&lt;=&gt;）与等于运算符（=）的作用是相似的，<strong>唯一的区别</strong>是<code>&lt;=&gt;</code>可 以用来<strong>对NULL进行判断</strong>。在两个操作数均为NULL时，其返回值为1；当一个操作数为NULL 时，其返回值为0。</p></li><li><p><code>&lt;&gt;</code>或<code>!=</code>：不等于运算符。</p><ul><li>不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL， 或两边都为NULL，则结果为NULL</li></ul></li><li><p><code>IS NULL</code>或<code>ISNULL(值)</code>：判断一个值是否为null</p></li><li><p><code>IS NOT NULL</code>：判断一个值是否不为null</p></li><li><p><code>LEAST(值1, 值2, ..., 值n)</code>：返回最小值</p></li><li><p><code>GREATEST(值1, 值2, ..., 值n)</code>：返回最大值</p></li><li><p><code>BETWEEN 值1 AND 值2</code>：判断一个值是否在闭区间[值1, 值2]之间</p></li><li><p><code>IN(值1, 值2, ..., 值n)</code>：判断一个值是否是（值1, 值2, ..., 值n）中的一个值</p></li><li><p><code>NOT IN(值1, 值2, ..., 值n)</code>：判断一个值是否不是（值1, 值2, ..., 值n）中的任意一个值</p></li><li><p><code>LIKE</code>：模糊匹配</p><ul><li>常和如下通配符配合使用： <ul><li><code>%</code>：匹配0个或多个字符</li><li><code>_</code>：匹配单个字符</li></ul></li></ul></li><li><p><code>ESCAPE</code>：指定一个字符去替代转义字符(&quot;<code>\\</code>&quot;)</p><p>在mysql中，如果表中某个字段存储了一些特殊符号（如%、_等），在使用<code>LIKE</code>进行模糊查询时，需要对特殊字符进行转义。</p><p>对特殊字符的转义有两种方法：①使用转义字符<code>\\</code> ②使用关键字<code>ESCAPE</code>。使用方法如下</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">### 查询名字带有%字符的用户---使用转义字符&#39;\\&#39;</span>
<span class="line">-- % 转义前，%全查</span>
<span class="line">SELECT * FROM escape_test WHERE NAME LIKE CONCAT(&quot;%&quot;, &quot;%&quot;, &quot;%&quot;);</span>
<span class="line">-- % 转义后 只匹配含有%的</span>
<span class="line">SELECT * FROM escape_test WHERE NAME LIKE CONCAT(&quot;%&quot;, &quot;\\%&quot;, &quot;%&quot;);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">### 使用关键字escape</span>
<span class="line">### 假设存在名字为 %a 和 %_ 两个的用户</span>
<span class="line">SELECT * FROM escape_test WHERE NAME LIKE &quot;a%_&quot; ESCAPE &quot;a&quot; ;    ### 查询到的结果包含 %a %_ </span>
<span class="line">SELECT * FROM escape_test WHERE NAME LIKE &quot;a%a&quot; ESCAPE &quot;a&quot; ;    ### 查询到的结果只有 %a </span>
<span class="line">SELECT * FROM escape_test WHERE NAME LIKE &quot;a%a_&quot; ESCAPE &quot;a&quot; ;   ### 查询到的结果只有：%_</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>REGEXP</code>：使用正则表达式来匹配字符串，语法格式<code>字符串 regexp 正则表达式</code></p><p>常用通配符如下：</p><table><thead><tr><th>通配符</th><th>说明</th><th>例子</th><th>匹配值示例</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配以该字符后面的字符<strong>开头</strong>的字符串</td><td>^b</td><td><u>b</u>ig， <u>b</u>anana</td></tr><tr><td><code>$</code></td><td>匹配以该字符前面的字符<strong>结尾</strong>的字符串</td><td>st$</td><td>te<u>st</u>， persi<u>st</u></td></tr><tr><td><code>.</code></td><td>匹配任何一个<strong>单字符</strong></td><td>b.t</td><td>b<u>i</u>t， b<u>a</u>t</td></tr><tr><td><code>*</code></td><td>匹配<strong>零个或多个</strong>在它<strong>前面</strong>的字符。<br>如果前面没有字符，表示匹配任何数量的任何字符串</td><td>f*n</td><td>fn， f<u>a</u>n，f<u>aa</u>n，f<u>abc</u>n</td></tr><tr><td><code>+</code></td><td>匹配<strong>1次或多次</strong>在它<strong>前面</strong>的字符</td><td>ba+</td><td>ba，bay，bare，battle</td></tr><tr><td><code>&lt;字符串&gt;</code></td><td>匹配<strong>包含指定字符串</strong>的文本</td><td>&lt;fa&gt;</td><td><u>fa</u>n， a<u>fa</u>，aaa<u>fa</u>bbb</td></tr><tr><td><code>[字符串集合]</code></td><td>匹配字符串集合中<strong>任意一个字符</strong>。<br>可以使用一 个<code>-</code>表明命名字符的范围：<br><code>[a-z]</code>匹配任何字母,<code>[0-9]</code>匹配任何数字</td><td>[xz]</td><td>di<u>z</u><u>z</u>y，<u>x</u>-ray</td></tr><tr><td><code>[^字符串集合]</code></td><td>匹配<strong>不包含字符串集合中任意字符</strong>的文本</td><td>[^abc]</td><td>desk， k8s</td></tr><tr><td><code>字符串{n,}</code></td><td>匹配<strong>至少n次</strong>它<strong>前面的字符串</strong></td><td>b{2}</td><td>bb，bbb，bbbb，bbbbbbb</td></tr><tr><td><code>字符串{n,m}</code></td><td>匹配**[n, m]次<strong>它</strong>前面的字符串**。<br>如果n为0，n可省</td><td>b{2, 4}</td><td>bb，bbb，bbbb</td></tr></tbody></table></li></ul><h1 id="_7-3-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_7-3-逻辑运算符"><span>7.3 逻辑运算符</span></a></h1>`,8),g=l("<li><p><code>NOT</code>或<code>!</code>：逻辑非</p><ul><li>当给定的值为0时返回1；</li><li>当给定的值为非0值时返回0；</li><li>当给定的值为NULL时，返回NULL</li></ul></li><li><p><code>AND</code>或<code>&amp;&amp;</code>：逻辑与。</p><ul><li>当给定的所有值均为非0值，并且都不为NULL时，返回 1；</li><li>当给定的一个值或者多个值为0时则返回0；</li><li>否则返回NULL</li></ul></li>",2),_=t("p",null,[t("code",null,"OR"),e("或"),t("code",null,"||"),e("：逻辑或。")],-1),L=t("ul",null,[t("li",null,"当给定的值都不为NULL，并且任何一个值为非0值时，则返回1，否则返回0；"),t("li",null,"当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；"),t("li",null,"当两个值都为 NULL时，返回NULL")],-1),E=t("li",null,[t("p",null,[t("code",null,"XOR"),e("：逻辑异或。")]),t("ul",null,[t("li",null,"当给定的值中任意一个是null时，返回null"),t("li",null,"当两个非null的值都是0或者都不是0时，返回0"),t("li",null,"当一个值为0，另一个不为0时，返回1")])],-1),h=l('<h1 id="_7-4-位运算符" tabindex="-1"><a class="header-anchor" href="#_7-4-位运算符"><span>7.4 位运算符</span></a></h1><ul><li><code>&amp;</code>：按位与。将给定值对应的二进制数进行逻辑与运算（逻辑与：两个二进制位都是1时返回1，其他返回0）。</li><li><code>|</code>：按位或。将给定值对应的二进制数进行逻辑或运算（逻辑或：两个二进制位全为0时返回0，其他返回1）。</li><li><code>^</code>：按位异或。将给定值对应的二进制数进行逻辑异或运算（逻辑异或：两个二进制位数值相同时返回1，否则返回0）。</li><li><code>~</code>：按位取反。将给定值对应的二进制数进行取反操作（取反：0变1，1变0）。</li><li><code>&gt;&gt;</code>：按位右移，语法<code>数值 &gt;&gt; 位数</code>。</li><li><code>&lt;&lt;</code>：按位左移，语法<code>数值 &lt;&lt; 位数</code>。</li></ul>',2);function m(N,q){const d=c("front");return i(),a("div",null,[r,p,t("p",null,[o(d,{style:{background:"yellow"}},{default:n(()=>[e("加 （+）、减（-）、乘（*）、除（/或DIV）和取模（%或MOD）")]),_:1})]),b,t("ul",null,[g,t("li",null,[_,L,t("p",null,[o(d,{style:{background:"yellow"}},{default:n(()=>[e("`AND`的优先级高于`OR`")]),_:1})])]),E]),h])}const f=s(u,[["render",m],["__file","07_运算符.html.vue"]]),A=JSON.parse('{"path":"/static/tang/mysql/07_%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"7 运算符","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/mysql/07_运算符.md"}');export{f as comp,A as data};
