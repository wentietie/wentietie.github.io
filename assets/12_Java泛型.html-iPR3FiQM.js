import{_ as l,r as c,o,c as i,e as s,a as t,w as e,d as n,b as a}from"./app-CQavEA7Q.js";const u={},k=s("h1",{id:"_12-java泛型",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_12-java泛型"},[s("span",null,"12 Java泛型")])],-1),r=a(`<h2 id="_12-1-概述" tabindex="-1"><a class="header-anchor" href="#_12-1-概述"><span>12.1 概述</span></a></h2><blockquote><p>定义</p></blockquote><p>所谓泛型，就是允许在定义类、接口时通过一个标识表明类中某个属性的类型、某个方法的返回值、参数类型。这个类型参数将在使用时（如：继承或者实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。</p><h2 id="_12-2-自定义泛型结构" tabindex="-1"><a class="header-anchor" href="#_12-2-自定义泛型结构"><span>12.2 自定义泛型结构</span></a></h2><blockquote><p>自定义泛型类、泛型接口</p></blockquote><ul><li><p>泛型类、泛型接口可能有多个参数，此时应该将多个参数放到一对尖括号中，并用逗号隔开。如&lt;E1, E2, E3&gt;</p></li><li><p>泛型如果不指定，将被擦除，单行对应的类型均按照Object处理，但不等价于Object</p></li><li><p>JDK7中，实例化泛型类时可以简化为：<code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;()</code></p></li><li><p>泛型不能是基本数据类型，可以使用包装类替换</p></li><li><p>泛型类或者泛型接口中，不能在静态方法中使用类的泛型</p><p>泛型的具体类型需要在类实例化的时候指定，静态方法在类实例化之前就可以被调用</p></li><li><p>异常类不能有泛型</p></li><li><p>创建泛型数组：<code>T[] arr = (T[]) new Object[10]</code></p><p>不可以使用 T[] arr = new T[10]</p></li><li><p>父类有泛型，子类可以选择保留泛型，也可以选择指定泛型类型</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>子类不保留父类的泛型：按需实现</p><ul><li><p>没有类型（泛型会被擦除）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Son1</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 等价于 class Son1 extends Father&lt;Object, Object&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>具体类型</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Son2</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>子类保留父类泛型：泛型子类</p><ul><li><p>全部保留</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Son3</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>部分保留</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Son4</span><span class="token generics"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><blockquote><p>自定义泛型方法</p></blockquote><ul><li><p>泛型方法，是在方法中出现了泛型的结构。该泛型结构与所在类的泛型参数没有任何关系</p><p>换句话说，泛型方法所在的类是不是泛型类都没有关系</p></li><li><p>泛型方法可以声明为静态的。</p><p>因为泛型参数是在调用方法的时候确定的，并非实例化类的时候才确定</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">GenericTest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 定义泛型方法</span>
<span class="line">    * 第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>E</span><span class="token punctuation">&gt;</span></span> 表明泛型的类类型。如果不写，后边的E会被识别为某一个类</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyFromArray</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> list<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-3-泛型在继承方面的体现" tabindex="-1"><a class="header-anchor" href="#_12-3-泛型在继承方面的体现"><span>12.3 泛型在继承方面的体现</span></a></h2>`,10),d=a(`<p>类A是类B的父类，<code>G&lt;A&gt;</code>和<code>G&lt;B&gt;</code>不具备子父类关系，二者是并列关系。即：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    o <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">// 代码正确</span></span>
<span class="line">    </span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> oList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    oList <span class="token operator">=</span> sList<span class="token punctuation">;</span> <span class="token comment">// 编译不通过</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v=s("code",null,"A<G>",-1),m=s("code",null,"B<G>",-1),b=a(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> aList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    list <span class="token operator">=</span> aList<span class="token punctuation">;</span> <span class="token comment">// 代码正确</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g=s("li",null,[s("p",null,[n("类A是类B的父类，"),s("code",null,"G<A>"),n("和"),s("code",null,"G<B>"),n("二者共同的父类是"),s("code",null,"G<?>")])],-1),h=s("h2",{id:"_12-4-通配符的使用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_12-4-通配符的使用"},[s("span",null,"12.4 通配符的使用")])],-1),y=a(`<blockquote><p>类A是类B的父类，<code>G&lt;A&gt;</code>和<code>G&lt;B&gt;</code>二者共同的父类是<code>G&lt;?&gt;</code></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> oList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    list <span class="token operator">=</span> oList<span class="token punctuation">;</span> <span class="token comment">// 代码正确</span></span>
<span class="line">    list <span class="token operator">=</span> sList<span class="token punctuation">;</span> <span class="token comment">// 代码正确</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>oList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代码正确</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>sList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代码正确</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通配符的写入与读取</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;BB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    list <span class="token operator">=</span> sList<span class="token punctuation">;</span> <span class="token comment">// 代码正确</span></span>
<span class="line">    <span class="token comment">// 写入（添加）元素：对于List&lt;?&gt;除了null不能add其他数据</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;DD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span></span>
<span class="line">    <span class="token comment">// 读取元素：允许读取数据，读取到的数据是Object类型</span></span>
<span class="line">    <span class="token class-name">Object</span> o <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>有限制条件的通配符</p></blockquote><ul><li><p>通配符指定上限</p><p>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口。即&lt;=</p></li><li><p>通配符指定下线</p><p>下限super：使用时指定的类型不能小于操作的类，即&gt;=</p></li><li><p>举例</p><ul><li><p><code>? extends A</code></p><p>?可以是类A，也可以是类A的子类</p></li><li><p><code>? super A</code></p><p><code>?</code>可以是类A，也可以是类A的父类</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> sList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> pList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> oList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        list1 <span class="token operator">=</span> sList<span class="token punctuation">;</span></span>
<span class="line">        list1 <span class="token operator">=</span> pList<span class="token punctuation">;</span></span>
<span class="line">        list1 <span class="token operator">=</span> oList<span class="token punctuation">;</span><span class="token comment">//编译不通过</span></span>
<span class="line">        <span class="token comment">// 添加数据：除了null，别的不允许</span></span>
<span class="line">        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        list2 <span class="token operator">=</span> sList<span class="token punctuation">;</span><span class="token comment">//编译不通过</span></span>
<span class="line">        list2 <span class="token operator">=</span> pList<span class="token punctuation">;</span></span>
<span class="line">        list2 <span class="token operator">=</span> oList<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 添加数据：允许添加</span></span>
<span class="line">        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,6);function j(w,_){const p=c("front");return o(),i("div",null,[k,s("p",null,[t(p,{style:{background:"yellow"}},{default:e(()=>[n("JDK5.0新增特性")]),_:1})]),r,s("ul",null,[s("li",null,[d,t(p,{style:{background:"yellow"}},{default:e(()=>[n("补充")]),_:1}),n("：类A是类B的父类(接口)，那么"),v,n("是"),m,n("的父类"),b]),g]),h,s("p",null,[t(p,{style:{background:"yellow"}},{default:e(()=>[n("通配符：?")]),_:1})]),y])}const f=l(u,[["render",j],["__file","12_Java泛型.html.vue"]]),x=JSON.parse('{"path":"/static/tang/java2/12_Java%E6%B3%9B%E5%9E%8B.html","title":"12 Java泛型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"12.1 概述","slug":"_12-1-概述","link":"#_12-1-概述","children":[]},{"level":2,"title":"12.2 自定义泛型结构","slug":"_12-2-自定义泛型结构","link":"#_12-2-自定义泛型结构","children":[]},{"level":2,"title":"12.3 泛型在继承方面的体现","slug":"_12-3-泛型在继承方面的体现","link":"#_12-3-泛型在继承方面的体现","children":[]},{"level":2,"title":"12.4 通配符的使用","slug":"_12-4-通配符的使用","link":"#_12-4-通配符的使用","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/12_Java泛型.md"}');export{f as comp,x as data};
