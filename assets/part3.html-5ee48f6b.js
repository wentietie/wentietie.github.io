import{_ as t,p as e,q as d,a1 as l}from"./framework-5866ffd3.js";const a={},n=l(`<h1 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h1><h2 id="c-的令牌-token" tabindex="-1"><a class="header-anchor" href="#c-的令牌-token" aria-hidden="true">#</a> C 的令牌（Token）</h2><p>C 程序由各种令牌组成，令牌可以是关键字、标识符、常量、字符串值，或者是一个符号。例如，下面的 C 语句包括五个令牌：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World! \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这五个令牌分别是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>printf
(
&quot;Hello, World! \\n&quot;
)
;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分号" tabindex="-1"><a class="header-anchor" href="#分号" aria-hidden="true">#</a> 分号 ;</h2><p>在 C 程序中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p><p>例如，下面是两个不同的语句：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>printf(&quot;Hello, World! \\n&quot;);
return 0;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p><strong>C 语言有两种注释方式：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 单行注释
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以 <strong>//</strong> 开始的单行注释，这种注释可以单独占一行。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* 单行注释 */
/* 
 多行注释
 多行注释
 多行注释
 */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>/* */</strong> 这种格式的注释可以单行或多行。</p><p>您不能在注释内嵌套注释，注释也不能出现在字符串或字符值中。</p><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p><p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是<strong>区分大小写</strong>的编程语言。因此，在 C 中，<em>Manpower</em> 和 <em>manpower</em> 是两个不同的标识符。下面列出几个有效的标识符：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mohd       zara    abc   move_name  a_123
myname50   _temp   j     a23b9      retVal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h2><p>下表列出了 C 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。</p><table><thead><tr><th style="text-align:left;">关键字</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">auto</td><td style="text-align:left;">声明自动变量</td></tr><tr><td style="text-align:left;">break</td><td style="text-align:left;">跳出当前循环</td></tr><tr><td style="text-align:left;">case</td><td style="text-align:left;">开关语句分支</td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">声明字符型变量或函数返回值类型</td></tr><tr><td style="text-align:left;">const</td><td style="text-align:left;">定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td style="text-align:left;">continue</td><td style="text-align:left;">结束当前循环，开始下一轮循环</td></tr><tr><td style="text-align:left;">default</td><td style="text-align:left;">开关语句中的&quot;其它&quot;分支</td></tr><tr><td style="text-align:left;">do</td><td style="text-align:left;">循环语句的循环体</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">声明双精度浮点型变量或函数返回值类型</td></tr><tr><td style="text-align:left;">else</td><td style="text-align:left;">条件语句否定分支（与 if 连用）</td></tr><tr><td style="text-align:left;">enum</td><td style="text-align:left;">声明枚举类型</td></tr><tr><td style="text-align:left;">extern</td><td style="text-align:left;">声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">声明浮点型变量或函数返回值类型</td></tr><tr><td style="text-align:left;">for</td><td style="text-align:left;">一种循环语句</td></tr><tr><td style="text-align:left;">goto</td><td style="text-align:left;">无条件跳转语句</td></tr><tr><td style="text-align:left;">if</td><td style="text-align:left;">条件语句</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">声明整型变量或函数</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">声明长整型变量或函数返回值类型</td></tr><tr><td style="text-align:left;">register</td><td style="text-align:left;">声明寄存器变量</td></tr><tr><td style="text-align:left;">return</td><td style="text-align:left;">子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">声明短整型变量或函数</td></tr><tr><td style="text-align:left;">signed</td><td style="text-align:left;">声明有符号类型变量或函数</td></tr><tr><td style="text-align:left;">sizeof</td><td style="text-align:left;">计算数据类型或变量长度（即所占字节数）</td></tr><tr><td style="text-align:left;">static</td><td style="text-align:left;">声明静态变量</td></tr><tr><td style="text-align:left;">struct</td><td style="text-align:left;">声明结构体类型</td></tr><tr><td style="text-align:left;">switch</td><td style="text-align:left;">用于开关语句</td></tr><tr><td style="text-align:left;">typedef</td><td style="text-align:left;">用以给数据类型取别名</td></tr><tr><td style="text-align:left;">unsigned</td><td style="text-align:left;">声明无符号类型变量或函数</td></tr><tr><td style="text-align:left;">union</td><td style="text-align:left;">声明共用体类型</td></tr><tr><td style="text-align:left;">void</td><td style="text-align:left;">声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td style="text-align:left;">volatile</td><td style="text-align:left;">说明变量在程序执行中可被隐含地改变</td></tr><tr><td style="text-align:left;">while</td><td style="text-align:left;">循环语句的循环条件</td></tr></tbody></table><h3 id="c99-新增关键字" tabindex="-1"><a class="header-anchor" href="#c99-新增关键字" aria-hidden="true">#</a> C99 新增关键字</h3><table><thead><tr><th><code>_Bool</code></th><th><code>_Complex</code></th><th><code>_Imaginary</code></th><th><code>inline</code></th><th><code>restrict</code></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="c11-新增关键字" tabindex="-1"><a class="header-anchor" href="#c11-新增关键字" aria-hidden="true">#</a> C11 新增关键字</h3><table><thead><tr><th><code>_Alignas</code></th><th><code>_Alignof</code></th><th><code>_Atomic</code></th><th><code>_Generic</code></th><th><code>_Noreturn</code></th></tr></thead><tbody><tr><td><code>_Static_assert</code></td><td><code>_Thread_local</code></td><td></td><td></td><td></td></tr></tbody></table><h2 id="c-中的空格" tabindex="-1"><a class="header-anchor" href="#c-中的空格" aria-hidden="true">#</a> C 中的空格</h2><p>只包含空格的行，被称为空白行，可能带有注释，C 编译器会完全忽略它。</p><p>在 C 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int age;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fruit = apples + oranges;   // 获取水果的总数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>fruit 和 =，或者 = 和 apples 之间的空格字符不是必需的，但是为了增强可读性，您可以根据需要适当增加一些空格。</p>`,35),i=[n];function s(r,c){return e(),d("div",null,i)}const g=t(a,[["render",s],["__file","part3.html.vue"]]);export{g as default};
