import{_ as l,r as c,o,c as i,e as s,d as n,a as p,w as t,b as e}from"./app-CQavEA7Q.js";const u={},k=e('<h1 id="_99-面试题" tabindex="-1"><a class="header-anchor" href="#_99-面试题"><span>99 面试题</span></a></h1><h2 id="_1-最高效方式计算2-8" tabindex="-1"><a class="header-anchor" href="#_1-最高效方式计算2-8"><span>1.最高效方式计算2 * 8？</span></a></h2><p>答：<code>2 &lt;&lt; 3</code>或 <code>8 &lt;&lt; 1</code></p><h2 id="_2-多态是编译时行为还是运行时行为-如何证明" tabindex="-1"><a class="header-anchor" href="#_2-多态是编译时行为还是运行时行为-如何证明"><span>2.多态是编译时行为还是运行时行为？如何证明？</span></a></h2>',4),r=e(`<p>证明代码如下：</p><p>随机生成index，获取不同的Animal实例。当调用eat()时，在编译期间是看不出来会调用哪一个，只有运行完成后才可以判断到底是调用的哪个类的eat()方法。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practise</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 随机生成index，获取不同的Animal实例。当调用eat()时，在编译期间是看不出来会调用哪一个，只有运行完成后才可以判断到底是调用的哪个类的eat()方法</span></span>
<span class="line">        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;index: &quot;</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">// 根据index，返回不同的对象</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Animal</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 父类</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;动物吃饭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 子类</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗吃骨头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 子类</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;猫吃鱼&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 子类</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;羊吃草&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-方法的重载与重写" tabindex="-1"><a class="header-anchor" href="#_3-方法的重载与重写"><span>3.方法的重载与重写</span></a></h2>`,4),d=e('<blockquote><p>二者的定义细节</p></blockquote><ul><li>重载：同一个类中，允许有一个以上的同名方法，只要它们的参数类型或者参数个数不同即可。</li><li>重写：在子类中可以根据需要，对从父类继承来的方法进行改造，也称为方法的<span style="color:red;">覆盖、重置</span>。在程序执行时，子类的方法将覆盖父类的方法。</li></ul><blockquote><p>从编译运行的角度看</p></blockquote><ul><li><p>重载，是指允许存在多个重名方法，而这些方法的参数列表不同。编译器根据不同的参数列表，对同名方法进行修饰。对于编译器而言，这些同名方法就成了不同的方法，<span style="color:red;">他们的调用地址在编译期就确定了</span>。Java的重载是可以包含父类和子类的，即子类可以重载父类的同名不同餐的方法。</p><p>所以，对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“<span style="color:red;">早绑定</span>”或“<span style="color:red;">静态绑定</span>”。</p></li><li><p>多态（重写），只有等到方法调用那一刻，解释运行器才会确定所要调用的具体方法，这称为“<span style="color:red;">晚绑定</span>”或“<span style="color:red;">动态绑定</span>”。</p></li></ul><h2 id="_4-和equals-的区别" tabindex="-1"><a class="header-anchor" href="#_4-和equals-的区别"><span>4.==和equals()的区别</span></a></h2>',5),m=e(`<ul><li><p>==</p><ul><li><p>是一个运算符</p></li><li><p>可以使用在基本数据类型和引用数据类型中</p></li><li><p>如果比较的是基本类型变量：比较的是两个变量保存的数据是否相等（类型不一定相同）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同，即两个变量是否指向同一个实体对象。</p><p>此外，比较引用数据类型的变量的时候，必须保证==左右变量类型一致。如<code>System.out.println(&quot;hello&quot; == new java.util.Date())</code>，编译不通过</p></li></ul></li><li><p>equals()</p><ul><li>是一个方法，而非运算符</li><li>只能适用于引用数据类型</li><li>Object类中的equals()方法和==的作用是相同的：比较的是两个对象的地址值是否相等</li><li>像String、Date、File、包装类等都重写了Object的equals()方法。重写后，比较的是两个对象的“实体内容”是否相同</li><li>通常情况下，我们自定义的类如果使用equals()的话，也通常比较的是两个对象的“实体内容”是否相同，一般来说都需要对其重写。重写的原则就是比较两个对象的“实体内容”是否相同</li></ul></li></ul><h2 id="_5-三元运算符与包装类" tabindex="-1"><a class="header-anchor" href="#_5-三元运算符与包装类"><span>5.三元运算符与包装类</span></a></h2><p>如下代码中，o1和o2的输出结果相同吗，分别是什么？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Object</span> o2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v=s("p",null,"二者结果不相同。o1输出为1.0，o2输出为1。",-1),b=s("p",null,"分析：",-1),h=s("code",null,":",-1),y=e(`<h2 id="_6-包装类" tabindex="-1"><a class="header-anchor" href="#_6-包装类"><span>6.包装类</span></a></h2><p>如下代码的输出分别是什么？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g=s("p",null,"以上输出分别是false、true、false。",-1),w=s("p",null,"分析：",-1),f=s("code",null,"Integer x = 128;",-1),_=s("code",null,"Integer y = 128;",-1),S=s("h2",{id:"_7-接口-排错题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_7-接口-排错题"},[s("span",null,"7.接口-排错题")])],-1),q=e(`<p>以下代码是否有问题？如无，输出的内容为多少？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x=s("p",null,[n("代码编译不通过。报错信息为“Reference to 'x' is ambiguous, both 'B.x' and 'A.x' match”，意为接口A和接口B中都有x属性，C中对x的引用不明确。可以使用"),s("code",null,"System.out.println(super.x)"),n("输出类B中的x，可以使用"),s("code",null,"System.out.println(A.x)"),n("输出接口A中的x。")],-1),j=e(`<p>以下代码是否有问题？如无，输出的内容是什么？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Playable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Bounceable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Rollable</span> <span class="token keyword">extends</span> <span class="token class-name">Playable</span><span class="token punctuation">,</span> <span class="token class-name">Bounceable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Ball</span> ball <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ball</span><span class="token punctuation">(</span><span class="token string">&quot;PingPang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Ball</span> <span class="token keyword">implements</span> <span class="token class-name">Rollable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Ball</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ball <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ball</span><span class="token punctuation">(</span><span class="token string">&quot;Football&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ball<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A=s("p",null,[n("代码编译失败。接口中定义的变量是"),s("code",null,"public static final"),n("修饰的全局常量，是不可以更改的。")],-1),C=e('<h2 id="_8-抽象类和接口的共同点和区别" tabindex="-1"><a class="header-anchor" href="#_8-抽象类和接口的共同点和区别"><span>8.抽象类和接口的共同点和区别</span></a></h2><ul><li>相同点： <ul><li>不能实例化</li><li>都可以定义抽象方法</li></ul></li><li>不同点： <ul><li>抽象类有构造器、属性</li><li>接口在JDK7及以前只能定义全局内部类和抽象方法，JDK8之后还可以定义静态方法和默认方法（接口中的方法可以写方法体了，使得接口更像抽象类了），JDK9之后可以定义私有方法</li><li>子类只能继承一个抽象类，但是可以实现多个接口，同样，接口也可以继承多个接口</li></ul></li></ul><h2 id="_9-throw和throws的区别" tabindex="-1"><a class="header-anchor" href="#_9-throw和throws的区别"><span>9.throw和throws的区别</span></a></h2><ul><li>throw：抛出异常，生成异常对象；用在方法体内</li><li>throws：捕获异常，是处理异常的一种手段：用在方法的声明处</li></ul><h2 id="_10-final、finally、finalize的区别" tabindex="-1"><a class="header-anchor" href="#_10-final、finally、finalize的区别"><span>10.final、finally、finalize的区别</span></a></h2><ul><li>final：修饰符，可以修饰类、变量、方法。修饰类表示类不能被继承，修饰变量表示变量的值不可以被修改，修饰方法表示不能被子类重写</li><li>finally：处理异常的一个关键字，和try-catch组合使用，finally代码块中的代码一定会被执行</li><li>finalize：垃圾回收方法。一个类的finalize()只会被系统自动调用一次，如果对象面临下一次回收，他的finalize()方法不会被再次执行</li></ul><blockquote><p>引申</p></blockquote><ul><li>Collection和Collections的区别</li><li>String、StringBuffer、StringBuilder的区别</li><li>ArrayList和LinkedList的区别</li><li>HashMap和LinkedHashMap的区别</li><li>重写和重载的区别</li></ul><blockquote><p>拓展</p></blockquote><ul><li>抽象类和接口的区别</li><li>==和equals()的区别</li><li>sleep()和wait()的区别</li></ul><h2 id="_11-synchronized和lock的异同" tabindex="-1"><a class="header-anchor" href="#_11-synchronized和lock的异同"><span>11.synchronized和Lock的异同？</span></a></h2>',11),L=e(`<ul><li><p>相同点：二者都可以解决线程安全问题</p></li><li><p>不同点：</p><ul><li>synchronized机制在执行完同步代码之后，自动的释放同步监视器；Lock需要手动加锁（调用lock())、手动释放锁（调用unlock())</li><li>synchronized有代码块锁和方法锁；Lock只有代码块锁</li><li>使用Lock，JVM将花费较少的时间来调度线程，性能更好，并且具有更好的扩展性</li></ul></li><li><p>二者如何选择</p><p>Lock &gt; 同步代码块 &gt;同步方法</p></li></ul><h2 id="_12-sleep-和wait-的异同" tabindex="-1"><a class="header-anchor" href="#_12-sleep-和wait-的异同"><span>12.sleep()和wait()的异同？</span></a></h2><ul><li>相同点：都会使当前线程进入阻塞状态</li><li>不同点： <ul><li>两个方法声明的位置不同：sleep()是在Thread中声明的，wait()是在Object中声明的</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用；wait()必须在同步代码块或者同步方法中由同步监视器调用</li><li>关于是否释放锁：如果两个方法都是用在同步代码块或者同步方法中，sleep()不会释放锁，wait()会释放锁</li></ul></li></ul><h2 id="_13-string拼接相关面试题" tabindex="-1"><a class="header-anchor" href="#_13-string拼接相关面试题"><span>13.String拼接相关面试题</span></a></h2><p>如下代码输出结果是什么？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;javaEEhadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;hadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">&quot;hadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s8 <span class="token operator">=</span> s5<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">final</span> <span class="token class-name">String</span> s9 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> s10 <span class="token operator">=</span> s9 <span class="token operator">+</span> <span class="token string">&quot;hadoop&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s10<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),T=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>分析</p></blockquote>`,2),B=s("li",null,'常量与常量的拼接结果在常量池中（如String s = "abc"+"def";s指向常量池中的"abcdef"），且常量池中不会存在相同内容的常量。',-1),I=s("li",null,'常量与变量的拼接、变量与变量的拼接结果在堆空间中（如String s = "abc"; String s2 = s1+"def";s2指向堆空间，相当于new了一个变量）',-1),z=s("li",null,"final 声明的变量是常量，所以s3 == s10",-1),H=e(`<h2 id="_14-string值传递相关面试题" tabindex="-1"><a class="header-anchor" href="#_14-string值传递相关面试题"><span>14.String值传递相关面试题</span></a></h2><p>如下代码，输出结果是什么？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;good&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        str <span class="token operator">=</span> <span class="token string">&quot;test ok&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">StringTest</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//good</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//best</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>分析</p></blockquote><ul><li><p><strong>如果参数是<span style="color:red;">引用数据类型</span>，实参传递给形参的是实参存储数据的<span style="color:red;">地址值</span></strong></p><p>change(String str, char ch[])两个参数都是引用类型，所以传递过去的都是地址值</p></li><li><p>又因<strong>String类型的变量是不可变的</strong>，所以当对str参数执行<code>str=&quot;test ok&quot;</code>操作时，形参str指向新的常量池地址，但是ex.str的地址并没有发生变化，因此ex.str仍为good</p></li><li><p>另外，change方法中是对char[]中的一个元素进行修改，该元素是char类型，是基本数据类型，修改完成后，ch的地址值并没有变化，因此ex.ch值为改动后的值best</p></li></ul><h2 id="_15-arraylist、linkedlist、vector三者的异同" tabindex="-1"><a class="header-anchor" href="#_15-arraylist、linkedlist、vector三者的异同"><span>15.ArrayList、LinkedList、Vector三者的异同</span></a></h2><ul><li>相同点 <ul><li>三个类都是实现了List接口，存储的数据都是有序的、可重复的</li></ul></li><li>不同点 <ul><li>ArrayList：作为List接口的主要实现类；线程不安全的，效率比Vector高；底层使用的是数组存储</li><li>LinkedList：底层使用的是双向链表存储；对于频繁的插入、删除操作，LinkedList的效率比ArrayList效率高</li><li>Vector：作为List接口的古老实现类，现在很少使用；线程安全的，效率比ArrayList低；底层使用的是数组存储</li></ul></li></ul><h2 id="_16-list中remove-相关面试题" tabindex="-1"><a class="header-anchor" href="#_16-list中remove-相关面试题"><span>16.List中remove()相关面试题</span></a></h2><p>如下代码，输出的分别是什么？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),E=e(`<p>第一次输出：[1, 2, 4, 5]</p><p>第二次输出：[1, 2, 4]</p><blockquote><p>解析：</p></blockquote><p><code>list.remove(2);</code>删除的是第二个元素</p><p><code>list.remove(new Integer(5));</code>删除的是元素5</p><h2 id="_17-set相关面试题" tabindex="-1"><a class="header-anchor" href="#_17-set相关面试题"><span>17.Set相关面试题</span></a></h2><p>如下代码分别输出是什么？</p><p>Teacher类已重写equals()和hashCode()</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Teacher</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Teacher</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">&quot;BB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),D=e('<p>第1次输出：[Teacher{id=1002, name=&#39;BB&#39;}, Teacher{id=1001, name=&#39;AA&#39;}] 第2次输出：[Teacher{id=1002, name=&#39;BB&#39;}, Teacher{id=1001, name=&#39;CC&#39;}] 第3次输出：[Teacher{id=1002, name=&#39;BB&#39;}, Teacher{id=1001, name=&#39;CC&#39;}, Teacher{id=1001, name=&#39;CC&#39;}] 第4次输出：[Teacher{id=1002, name=&#39;BB&#39;}, Teacher{id=1001, name=&#39;CC&#39;}, Teacher{id=1001, name=&#39;CC&#39;}, Teacher{id=1001, name=&#39;AA&#39;}]</p><blockquote><p>解析</p></blockquote><p>第1次输出：略</p><p>第2次输出：t1.name改为CC，其hash值变了，在remove的时候比较的是新的hash值处的对象。因为新的hash值处没有元素，所以删除失败。因此输出两个元素，且t1的name值是CC</p><p>第3次输出：新添加的new Teacher(1001, &quot;CC&quot;)hash值处没有元素，所以添加成功。因此输出三个元素</p><p>第4次输出：新添加的new Teacher(1001, &quot;AA&quot;)hash值处有元素t1，且t1和新元素不相等，所以添加成功。因此输出4个元素</p><h2 id="_18-hashmap的底层实现原理" tabindex="-1"><a class="header-anchor" href="#_18-hashmap的底层实现原理"><span>18.HashMap的底层实现原理？</span></a></h2><h2 id="_19-hashmap和hashtable的异同" tabindex="-1"><a class="header-anchor" href="#_19-hashmap和hashtable的异同"><span>19.HashMap和Hashtable的异同？</span></a></h2><ul><li>相同点：都是作为Map的实现类，用来存储key-value对</li><li>不同点： <ul><li>HashMap： <ul><li>是Map的主要实现类；</li><li>线程不安全，效率比Hashtable高</li><li>可以存储值为null的key和value</li></ul></li><li>Hashtable： <ul><li>是Map的古老实现类，现在很少用；</li><li>线程安全，效率比HashMap低</li><li>不可以存储值为null的key和value</li></ul></li></ul></li></ul><h2 id="_20-加载因子值的大小-对hashmap有什么影响" tabindex="-1"><a class="header-anchor" href="#_20-加载因子值的大小-对hashmap有什么影响"><span>20.加载因子值的大小，对HashMap有什么影响？</span></a></h2><ul><li>加载因子的大小决定了HashMap的数据密度</li><li>加载因子越大，密度越大，发生碰撞的几率越高，数组中链表越容易长，造成查询和插入时的比较次数增多，性能会下降</li><li>加载因子越小，就越容易发生扩容，数据密度也越小，碰撞的几率也越小，数组中的链表就越短，查询和插入时比较的次数也越小，性能就会越高。但是会浪费一定的内存空间。且经常扩容也影响性能</li><li>按照其他语言的参考及研究经验，会考虑将加载因子设置为0.7-0.75，此时平均检索长度接近于常数</li></ul>',11);function N(O,V){const a=c("front");return o(),i("div",null,[k,s("p",null,[n("答："),p(a,{style:{background:"yellow"}},{default:t(()=>[n("多态是运行时行为")]),_:1}),n("。")]),r,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),d,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),m,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),v,b,p(a,{style:{background:"yellow"}},{default:t(()=>[n("三元运算符`:`两侧的运算符需要能统一成一个类型")]),_:1}),n("，这是在编译过程中就需要确定的（如果"),h,n("两边分别是int和String，会编译不通过），所以Integer类型变量会提升为Double。因此最终o1输出为浮点型的1.0。"),y,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),g,w,p(a,{style:{background:"yellow"}},{default:t(()=>[n("Integer内部定义了IntegerCache结构，IntegerCache中定义了一个Integer类型的数组，保存了从[-128,127]范围的整数。")]),_:1}),n("如果使用自动装箱的方式，且给Integer赋值的范围在[-128,127]内时，可以直接使用数组中的元素，不用再去new了。"),f,n("和"),_,n("各自创建了一个对象，因此二者不相等。"),S,s("ul",null,[s("li",null,[q,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答")]),_:1}),n("："),x]),s("li",null,[j,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答")]),_:1}),n("："),A])]),C,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),L,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),T,s("ul",null,[B,I,s("li",null,[n("特别的，如果拼接结果调用了"),p(a,{style:{background:"yellow"}},{default:t(()=>[n("intern()")]),_:1}),n("，返回结果在常量池中。")]),z]),H,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),M,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),E,p(a,{style:{background:"yellow"}},{default:t(()=>[n("答：")]),_:1}),D])}const P=l(u,[["render",N],["__file","99_面试题.html.vue"]]),R=JSON.parse('{"path":"/static/tang/java2/99_%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"99 面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.最高效方式计算2 * 8？","slug":"_1-最高效方式计算2-8","link":"#_1-最高效方式计算2-8","children":[]},{"level":2,"title":"2.多态是编译时行为还是运行时行为？如何证明？","slug":"_2-多态是编译时行为还是运行时行为-如何证明","link":"#_2-多态是编译时行为还是运行时行为-如何证明","children":[]},{"level":2,"title":"3.方法的重载与重写","slug":"_3-方法的重载与重写","link":"#_3-方法的重载与重写","children":[]},{"level":2,"title":"4.==和equals()的区别","slug":"_4-和equals-的区别","link":"#_4-和equals-的区别","children":[]},{"level":2,"title":"5.三元运算符与包装类","slug":"_5-三元运算符与包装类","link":"#_5-三元运算符与包装类","children":[]},{"level":2,"title":"6.包装类","slug":"_6-包装类","link":"#_6-包装类","children":[]},{"level":2,"title":"7.接口-排错题","slug":"_7-接口-排错题","link":"#_7-接口-排错题","children":[]},{"level":2,"title":"8.抽象类和接口的共同点和区别","slug":"_8-抽象类和接口的共同点和区别","link":"#_8-抽象类和接口的共同点和区别","children":[]},{"level":2,"title":"9.throw和throws的区别","slug":"_9-throw和throws的区别","link":"#_9-throw和throws的区别","children":[]},{"level":2,"title":"10.final、finally、finalize的区别","slug":"_10-final、finally、finalize的区别","link":"#_10-final、finally、finalize的区别","children":[]},{"level":2,"title":"11.synchronized和Lock的异同？","slug":"_11-synchronized和lock的异同","link":"#_11-synchronized和lock的异同","children":[]},{"level":2,"title":"12.sleep()和wait()的异同？","slug":"_12-sleep-和wait-的异同","link":"#_12-sleep-和wait-的异同","children":[]},{"level":2,"title":"13.String拼接相关面试题","slug":"_13-string拼接相关面试题","link":"#_13-string拼接相关面试题","children":[]},{"level":2,"title":"14.String值传递相关面试题","slug":"_14-string值传递相关面试题","link":"#_14-string值传递相关面试题","children":[]},{"level":2,"title":"15.ArrayList、LinkedList、Vector三者的异同","slug":"_15-arraylist、linkedlist、vector三者的异同","link":"#_15-arraylist、linkedlist、vector三者的异同","children":[]},{"level":2,"title":"16.List中remove()相关面试题","slug":"_16-list中remove-相关面试题","link":"#_16-list中remove-相关面试题","children":[]},{"level":2,"title":"17.Set相关面试题","slug":"_17-set相关面试题","link":"#_17-set相关面试题","children":[]},{"level":2,"title":"18.HashMap的底层实现原理？","slug":"_18-hashmap的底层实现原理","link":"#_18-hashmap的底层实现原理","children":[]},{"level":2,"title":"19.HashMap和Hashtable的异同？","slug":"_19-hashmap和hashtable的异同","link":"#_19-hashmap和hashtable的异同","children":[]},{"level":2,"title":"20.加载因子值的大小，对HashMap有什么影响？","slug":"_20-加载因子值的大小-对hashmap有什么影响","link":"#_20-加载因子值的大小-对hashmap有什么影响","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/99_面试题.md"}');export{P as comp,R as data};
