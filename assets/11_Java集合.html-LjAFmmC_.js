import{_ as l,r as c,o,c as i,e as n,a as p,w as t,d as s,b as e}from"./app-CW2dCZSC.js";const u={},k=e(`<h1 id="_11-java集合" tabindex="-1"><a class="header-anchor" href="#_11-java集合"><span>11 Java集合</span></a></h1><h2 id="_11-1-概述" tabindex="-1"><a class="header-anchor" href="#_11-1-概述"><span>11.1 概述</span></a></h2><blockquote><p>数组在存储多个数据方面的特点</p></blockquote><ul><li>数组一旦初始化，长度就确定了</li><li>数组一旦定义好，其元素的类型也就确定了</li></ul><blockquote><p>数组在存储多个数据方面的缺点</p></blockquote><ul><li>数组一旦初始化，长度就不可修改了，无法实现扩容</li><li>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便</li><li>获取数组中实际元素的个数的需求，数组中没有线程的属性或方法可用</li><li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足</li></ul><h2 id="_11-2-java集合框架" tabindex="-1"><a class="header-anchor" href="#_11-2-java集合框架"><span>11.2 Java集合框架</span></a></h2><blockquote><p>Java集合可以分为Collection和Map两种体系：</p></blockquote><ul><li>Collection接口：单列集合，用来存储一个一个的对象 <ul><li>List接口：存储的是元素有序、可重复的集合 <ul><li>实现类：ArrayList、LinkedList、Vector</li></ul></li><li>Set接口：存储的是元素无序、不可重复的集合 <ul><li>实现类：HashSet、LinkedHashSet、TreeSet</li></ul></li></ul></li><li>Map接口：双列集合，保存具有映射关系“key-value对”的集合 <ul><li>实现类：HashMap、LinkedHashMap、TreeMap、HashTable、Properties</li></ul></li></ul><blockquote><p>注意事项</p></blockquote><ul><li>集合Collection中存储的如果是自定义类的对象，需要自定义类重写的方法： <ul><li>如果Collection的实现类是List的子类，需要重写equals()</li><li>如果Collection的实现类是Set的子类HashSet、LinkedHashSet，需要重写equals()和hashCode()</li><li>如果Collection的实现类是Set的子类TreeSet，需要提供排序方法。排序方法的提供有如下两种方法 <ul><li>放入TreeSet的元素的所在类实现Comparable接口，并重写compareTo()</li><li>创建Comparator实现类，在初始化TreeSet时作为参数传入</li></ul></li></ul></li></ul><h2 id="_11-3-collection接口中的方法" tabindex="-1"><a class="header-anchor" href="#_11-3-collection接口中的方法"><span>11.3 Collection接口中的方法</span></a></h2><ul><li><p>add(Object o)： 将元素o添加到集合中</p></li><li><p>size()：获取集合中元素的个数</p></li><li><p>addAll(Collection c)：将集合c中的元素添加到当前集合中</p></li><li><p>isEmpty()：判断当前集合是否为空，即判断当前集合中的size()是否等于0</p></li><li><p>clear()：清空集合中的元素</p></li><li><p>contains(Object o)：判断当前集合是否包含元素o</p><p>比较时，调用的是元素o所对应的类的equals()方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;XiaoMing&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true.String重写了equals()方法，比较的是内容</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，未重写equals()，比较的是地址值</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;XiaoMing&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true。重写了equals()，比较的是内容</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> score <span class="token operator">==</span> student<span class="token punctuation">.</span>score <span class="token operator">&amp;&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>containsAll(Collection c)：判断c中的元素是否都在当前结合中</p></li><li><p>remove(Object o)：在当前集合中删除元素o，返回是否移除成功</p><p>需要调用元素o所对应的类的equals()</p></li><li><p>removeAll(Collection c)：在当前集合中删除集合c中所有元素</p><p>需要调用c中所有元素对应的类的equals()方法</p></li><li><p>retainAll(Collection c)：计算当前集合和集合c的交集（结果赋值给当前集合），返回值为boolean类型，即当前集合和集合c是否有交集</p><p>如果二者没有交集，当前集合被修改为[]，返回值为false</p></li><li><p>equals(Object o)：判断当前集合和o是否相等。</p><p>调用的是元素o锁对应的类中的equals()</p></li><li><p>hashCode()：返回当前对象的hash值</p></li><li><p>toArray()：集合 ---&gt; 数组</p><p>Arrays.asList(Object[] o)：数组 ---&gt; 集合</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CC&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出[AA, BB, CC]</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span> list1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处会把new int[]当做一个元素放到list1中</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出[[I@66cd51c3]</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span> list2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出[1, 2, 3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>iterator()：返回Iterator接口的实例，用于遍历集合元素</p></li></ul><h2 id="_11-4-iterator迭代器接口" tabindex="-1"><a class="header-anchor" href="#_11-4-iterator迭代器接口"><span>11.4 Iterator迭代器接口</span></a></h2><blockquote><p>概述</p></blockquote>`,15),r=n("li",null,"Iterator对象称为迭代器（设计模式的一种），主要用于遍历Collection集合中的元素",-1),d=n("strong",null,"迭代器模式，就是为容器而生",-1),v=n("li",null,"Collection接口继承了java.lang.Iterator接口，该接口有一个iterator()，所有实现了Collection接口的集合类都有一个iterator()， 用以返回一个实现了Iterator接口的对象",-1),m=n("li",null,"Iterator仅用于遍历集合",-1),b=n("strong",null,"之前",-1),h=n("blockquote",null,[n("p",null,"常用方法")],-1),y=n("li",null,[n("p",null,"hasNext()：判断是否还有下一个元素")],-1),g=n("p",null,"next()：获取下一个元素",-1),w=n("ul",null,[n("li",null,"指针下移"),n("li",null,"将下移后的集合位置上的元素返回")],-1),f=n("li",null,[n("p",null,"remove()：在遍历的时候，删除集合中的元素。"),n("p",null,"如果还未调用next()或者在上一次调用next()之后已经调用了remove()，再调用remove()，即连续两次调用remove()，会报IllegalStateException。")],-1),_=e(`<blockquote><p>举例</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 遍历 </span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;XiaoMing&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 移除元素</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;XiaoMing&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Object</span> o <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 移除元素</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 重新遍历</span></span>
<span class="line">    <span class="token class-name">Iterator</span> iterator1 <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-5-list接口" tabindex="-1"><a class="header-anchor" href="#_11-5-list接口"><span>11.5 List接口</span></a></h2><h3 id="_11-5-1-arraylist源码分析" tabindex="-1"><a class="header-anchor" href="#_11-5-1-arraylist源码分析"><span>11.5.1 ArrayList源码分析</span></a></h3><blockquote><p>JDK7中的ArrayList</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 底层创建了长度是10的Object[]数组elementData</span></span>
<span class="line"></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// elementData[0] = new Integer(123)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果此次的添加导致底层elementData数组容量不够，则扩容。默认情况下，扩容为原来的容量的**1.5倍**，同时需要将原有数组中的数据复制到新的数组中。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),q=e(`<blockquote><p>JDK8中的ArrayList</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 底层Object[] elementData初始化为{}，并没有创建长度为10的数组</span></span>
<span class="line"></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次调用add()时，底层会创建长度为10的数组，并执行如下操作elementData[0] = new Integer(123)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 后续操作与JDK7中无异</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>小结</p></blockquote><p>JDK7中的ArrayList的对象创建类似于单例的饿汉式，JDK8中的ArrayList对象的创建类似于单例的懒汉式，<strong>延迟了数组的创建，节省内存</strong>。</p><h3 id="_11-5-2-linkedlist源码分析" tabindex="-1"><a class="header-anchor" href="#_11-5-2-linkedlist源码分析"><span>11.5.2 LinkedList源码分析</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">LinkedList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内部声明了Node类型的first和last属性</span></span>
<span class="line"></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将123封装到Node中，创建Node对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中Node的定义，体现了双向链表的说法。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">E</span> item<span class="token punctuation">;</span> <span class="token comment">// 当前元素的值</span></span>
<span class="line">    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span> <span class="token comment">// 指前指针</span></span>
<span class="line">    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span> <span class="token comment">// 指后指针</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-5-3-vector的源码分析" tabindex="-1"><a class="header-anchor" href="#_11-5-3-vector的源码分析"><span>11.5.3 Vector的源码分析</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JDK7和JDK8中通过Vector()创建对象时，都创建了长度为10的数组</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在扩容方面，默认扩容为原来的**2倍**。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-5-4-list接口中的方法" tabindex="-1"><a class="header-anchor" href="#_11-5-4-list接口中的方法"><span>11.5.4 List接口中的方法</span></a></h3><ul><li>Collection接口中的API仍可用</li><li>void add(int index, Object ele)：在index位置插入ele元素</li><li>boolean addAll(int index, Collection eles)：在index位置开始将eles中的元素全部加进来</li><li>Object get(int index)：获取index位置的元素</li><li>int indexOf(Object ele)：获取元素ele在集合中首次出现的位置。如果不存在，返回-1</li><li>int lastindexOf(Object ele)：获取元素ele在集合中最后一次出现的位置。如果不存在，返回-1</li><li>Object remove(int index)：移除index位置的元素，并返回此元素</li><li>Object set(int index, Object ele)：将index位置的元素设置为ele</li><li>List subList(int fromIndex, int toIndex)：返回**[fromIndex, toIndex)**位置处的子集合，原集合没有变化</li></ul><h2 id="_11-6-set接口" tabindex="-1"><a class="header-anchor" href="#_11-6-set接口"><span>11.6 Set接口</span></a></h2><h3 id="_11-6-1-概述" tabindex="-1"><a class="header-anchor" href="#_11-6-1-概述"><span>11.6.1 概述</span></a></h3>`,14),S=e('<p>Set中没有额外定义方法，使用的都是Collection接口中的方法</p><blockquote><p>分类</p></blockquote><ul><li>HashSet：作为Set接口的主要实现类；线程不安全的，可以存储null；底层是数组+链表的结构 <ul><li>LinkedHashSet：作为HashSet的子类，在遍历内部数据时，可以按照添加的顺序遍历</li></ul></li><li>TreeSet：底层使用的是二叉树（红黑树）存储，放入TreeSet的元素，必须是同一个类的对象，可以按照添加对象的指定属性进行排序</li></ul><blockquote><p>Set存储的无序性</p></blockquote><p>以HashSet为例</p><ul><li>无序性 $\\neq$ 随机性</li><li>存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的</li></ul><blockquote><p>Set存储的不可重复性</p></blockquote><p>以HashSet为例</p><p>保证添加的元素按照equals()判断时，不能返回true，确保相同的元素只能添加一个。</p><p><strong>Set中存储元素要想实现不可重复性，需要重新该元素对应类的equals()和hashCode()方法。</strong></p><h3 id="_11-6-2-hashset" tabindex="-1"><a class="header-anchor" href="#_11-6-2-hashset"><span>11.6.2 HashSet</span></a></h3><blockquote><p>HashSet添加元素的过程</p></blockquote><p>当向HashSet中添加元素a时，首先调用元素 a所在类的hashCode()，计算元素a的哈希值，接下来用此哈希值通过某种算法计算出在HashSet底层数组中的存放位置（即索引位置），然后判断此位置上是否应有元素：</p><ul><li>如果此位置上没有其他元素，则<strong>元素a添加成功</strong>；---情况1</li><li>如果此位置上有其他元素b（或者以链表形式存在的多个元素），则比较元素a与元素b的哈希值： <ul><li>如果hash值不相同，<strong>元素a添加成功</strong>；---情况2</li><li>如果hash值相同，进而需要调用元素a所在类的equals()： <ul><li>equals()返回true，<strong>元素a添加失败</strong>；</li><li>equals()返回false，<strong>元素a添加成功</strong>；---情况3</li></ul></li></ul></li></ul><p>对于添加成功的情况2和情况3而言，元素a与已经存在指定索引位置上的数据以链表的方式存储。</p><p>JDK7：元素a放到数组中，指向原来的元素</p><p>JDK8：原来的元素放在数组中，指向a元素</p><p>总结：7上8下</p><blockquote><p>HashSet的特点</p></blockquote><ul><li>不能保证元素的顺序排列</li><li>HashSet不是线程安全的</li><li>集合元素可以是null</li></ul><blockquote><p>HashSet判断两个元素相等的标准</p></blockquote><p>两个对象通过hashCode()比较相等，且两个对象的equals()返回值也相等</p><blockquote><p>使用HashSet的主意事项</p></blockquote>',23),j=n("blockquote",null,[n("p",null,"重写hashCode()的基本原则")],-1),x=n("ul",null,[n("li",null,"在程序运行时，同一个对象多次调用hashCode()，应该返回相同的值"),n("li",null,"当两个对象的equals()返回true时，这两个对象的hasCode()的返回值也相等"),n("li",null,"对象中用作equals()方法比较的属性，都应该用来计算hash值")],-1),C=n("h3",{id:"_11-6-3-linkedhashset",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11-6-3-linkedhashset"},[n("span",null,"11.6.3 LinkedHashSet")])],-1),L=n("li",null,[n("p",null,"LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护了两个变量，用以记录当前数据的前一个数据和后一个数据。")],-1),T=n("li",null,[n("p",null,"在遍历内部数据时，可以按照添加的顺序遍历。")],-1),H=e(`<h3 id="_11-6-4-treeset" tabindex="-1"><a class="header-anchor" href="#_11-6-4-treeset"><span>11.6.4 TreeSet</span></a></h3><blockquote><p>特点</p></blockquote><ul><li>底层是二叉树（红黑树）</li><li>可以按照添加对象的指定属性进行排序</li><li>有序，查询比list快</li></ul><blockquote><p>注意事项</p></blockquote><ul><li><p>向TreeSet中添加的数据，要求是相同类的对象</p></li><li><p>向TreeSet中添加的数据前，需要定义TreeSet中元素的排序方式：自然排序或者定制排序</p><ul><li><p>使用自然排序（实现Comparable接口）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TreeSet</span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Janny&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jery&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jey&quot;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> treeSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 按照名称有小到大排序。名称相同，按照年龄有小到大排</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">o</span></span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> compared <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>compared <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                compared <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> compared<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据不匹配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用定制排序（实现Comparator接口）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Comparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 按照年龄由大到小排序</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据不匹配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeSet</span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Janny&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jery&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jey&quot;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> treeSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><blockquote><p>TreeSet中比较两个对象是否相同的标准</p></blockquote><ul><li>使用自然排序：比较两个对象是否相同，即为元素所在类的compareTo()返回值是否为0</li><li>使用定制排序：比较两个对象是否相同，即为创建的 Comparator实现类中compare()返回值是否是0</li></ul>`,7),A=e(`<h2 id="_11-7-map接口" tabindex="-1"><a class="header-anchor" href="#_11-7-map接口"><span>11.7 Map接口</span></a></h2><h3 id="_11-7-1-概述" tabindex="-1"><a class="header-anchor" href="#_11-7-1-概述"><span>11.7.1 概述</span></a></h3><blockquote><p>Map接口简介</p></blockquote><ul><li><p>Map接口：存储双列数据，存储的是key-value键值对</p><ul><li><p>HashMap类：主要实现类；线程不安全，效率比Hashtable高；可以存储值为null的key和value；底层：数组+链表（JDK7及之前）、数组+链表+红黑树（JDK8）</p><ul><li>LinkedHashMap类：比HashMap多了一对“指针”，用来指向前一个和后一个元素，保证在遍历map元素时，可以按照添加的顺序实现遍历；对于频繁的遍历操作，LinkedHashMap效率比HashMap高</li></ul></li><li><p>TreeMap类：保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或者定制排序，要求key是同一个类创建的对象</p><p>​ 底层使用的是红黑树</p></li><li><p>Hashtable类：古老实现类；线程安全，效率比HashMap低；不可以存储值为null的key和value</p><ul><li>Properties类：常用来处理配置文件。key和value都是String类型</li></ul></li></ul></li></ul><blockquote><p>Map中结构的理解</p></blockquote><p>以HashMap为例</p><ul><li>Map中的key：无序的、不可重复的，使用Set存储所有的key；key所在的类要重写equals()和hashCode()；</li><li>Map中的value：无序的、可重复的，使用Collection存储所有的value；value所在的类需要重写equals()；</li><li>一个键值对构成一个Entry对象；</li><li>Map中的entry：无序的、不可重复的，使用Set存储所有的entry 。</li></ul><h3 id="_11-7-2-hashmap底层实现原理" tabindex="-1"><a class="header-anchor" href="#_11-7-2-hashmap底层实现原理"><span>11.7.2 HashMap底层实现原理</span></a></h3><blockquote><p>JDK7中HashMap实现原理</p></blockquote><ul><li><code>HashMap map = new HashMap();</code>：实例化之后，底层创建了一个长度是16的一维数组Entry[] table</li><li><code>map.add(key1, value1) </code>： <ul><li>首先，调用key1所在类的hashCode()计算key1的哈希值，此哈希值经过某种算法计算后，得到Entry数组中的存放位置</li><li>如果此位置上的数据是空，此时key1-value1存放成功 ---&gt;情况1</li><li>如果此位置上的数据不为空，意味着此位置上存在一个或多个数据（以链表形式存在），比较key1和已存在数据的哈希值： <ul><li>如果key1的哈希值与此位置上的数据的哈希值都不一样，此时key1-value1存放成功 ---&gt;情况2</li><li>如果key1的哈希值与此位置上的某一个数据(key2,value2)的哈希值相同，则调用key1所在类的equals()方法进行比较： <ul><li>如果equals()返回false，此时key1-value1存放成功 ---&gt;情况3</li><li>如果equals()返回true，使用value1替换value2</li></ul></li></ul></li></ul></li><li>补充：关于情况2和情况3，此时key1-value1和原来的数据以链表的形式存在，由key1-value1指向原数据</li><li>关于扩容：在不断添加的过程中，会涉及到扩容问题。 <ul><li>扩容时间：当超出临界值（注意不是数组的长度），且要存放数据的位置非空时，进行扩容</li><li>默认扩容为原来的2倍，并将原有的数据复制过来</li></ul></li></ul><blockquote><p>JDK8相较于JDK7在底层实现方面的不同</p></blockquote><ul><li><p><code>HashMap map = new HashMap();</code>：底层没有创建长度为16的数组。且底层数组是Node[]，而非Entry</p></li><li><p><code>map.add(key1, value1) </code>：如果是首次调用，会先创建长度为16的数组</p></li><li><p>JDK7底层结构只有<strong>数组+链表</strong>，JDK8中底层结构是<strong>数组+链表+红黑树</strong>。</p><p>当数组的<strong>某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64</strong>时，此时<strong>此索引位置上</strong>的所有数据改为使用红黑树</p></li></ul><blockquote><p>HashMap中常用常量</p></blockquote><ul><li><code>DEFAULT_INITIAL_CAPACITY</code>：HashMap默认容量，16</li><li><code>DEFAULT_LOAD_FACTOR</code>：默认加载因子，0.75</li><li><code>threshold</code>：扩容的临界值。threshold = DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR</li><li><code>TREEIFY_THRESHOLD</code>：Bucket中链表长度大于该默认值时，转为红黑树，8</li><li><code>MIN_TREEIFY_CAPACITY</code>：Bucket中Node被树化时最小的hash表容量，64</li></ul><h3 id="_11-7-3-linkedhashmap底层实现原理" tabindex="-1"><a class="header-anchor" href="#_11-7-3-linkedhashmap底层实现原理"><span>11.7.3 LinkedHashMap底层实现原理</span></a></h3><p>LinkedHashMap底层使用的结构与HashMap相同，唯一的区别是LinkedHashMap内部提供了Entry用来替换HashMap中的Node。</p><p>LinkedHashMap.Entry类中比HashMap.Node多了两个变量，用来记录当前元素的前一个和后一个元素，确保能够记录元素的添加顺序</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-7-4-map接口中的方法" tabindex="-1"><a class="header-anchor" href="#_11-7-4-map接口中的方法"><span>11.7.4 Map接口中的方法</span></a></h3><blockquote><p>增删改</p></blockquote><ul><li>Object put(Object key, Object value)：将key-value添加到（修改）当前map中</li><li>Object putAll(Map m)：将m中的key-value添加到当前map中</li><li>Object remove(Object key)：移除指定的key的key-value对，并返回对应的value</li><li>void clear()：清空当前map</li></ul><blockquote><p>查询</p></blockquote><ul><li>Object get(Object key)：获取key对应的value</li><li>boolean containsKey(Object key)：判断是否包含指定的key</li><li>boolean containsValue(Object value)：判断是否包含指定的value</li><li>int size()：返回map中key-value对的个数</li><li>boolean isEmpty()：判断当前map是否为空</li><li>boolean equals(Object obj)：判断当前map和obj是否相等</li></ul><blockquote><p>遍历</p></blockquote><ul><li><p>Set keySet()：返回所有key构成的Set集合</p></li><li><p>Collection values()：返回所有的value集合</p></li><li><p>Set entrySet()：返回所有的key-value对</p><p>entrySet()获得的集合中的元素都是Map.Entry，可以强转</p></li></ul><h3 id="_11-7-5-treemap的使用" tabindex="-1"><a class="header-anchor" href="#_11-7-5-treemap的使用"><span>11.7.5 TreeMap的使用</span></a></h3><ul><li>向TreeMap中添加key-value，需要保证key是由同一个类创建的对象</li><li>因需要对key进行排序，因此要么key所在的类需要实现Comparable接口，要么在在创建TreeMap时将Comparator实现类作为参数传入</li></ul><p>使用和TreeSet类似。</p><h3 id="_11-7-6-properties" tabindex="-1"><a class="header-anchor" href="#_11-7-6-properties"><span>11.7.6 Properties</span></a></h3><ul><li><p>Properties是Hashtable的子类，该对象用于处理属性文件</p></li><li><p>Properties的key和value都是String类型</p></li><li><p>例子</p><ul><li><p>jdbc.properties</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">唐天华</span></span>
<span class="line"><span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>PropertiesTest.java</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 加载流对应的文件</span></span>
<span class="line">            prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 获取配置文件中指定key对应的value值</span></span>
<span class="line">            <span class="token class-name">String</span> name <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> password <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name=&quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;, password=&quot;</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="_11-8-collections工具类" tabindex="-1"><a class="header-anchor" href="#_11-8-collections工具类"><span>11.8 Collections工具类</span></a></h2>`,31),M=e(`<blockquote><p>排序相关</p></blockquote><ul><li><p><code>void reverse(List&lt;?&gt; list)</code>：反转list中元素的顺序</p></li><li><p><code>void shuffle(List&lt;?&gt; list)</code>：对list中的元素进行随机排序</p></li><li><p><code>void sort(List&lt;T&gt; list)</code>：按照list中元素的自然顺序进行排序</p></li><li><p><code>void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>：根据指定的Comparator对list中的元素进行排序</p></li><li><p><code>void swap(List&lt;?&gt; list, int i, int j) </code>：交换list中第i个和第j个元素的位置</p></li><li><p><code>T max(Collection&lt;? extends T&gt; coll)</code>：根据元素的自然顺序，返回集合中的最大元素</p></li><li><p><code>T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</code>：根据指定的Comparator的指定顺序，返回集合中的最大元素</p></li><li><p><code>T min(Collection&lt;? extends T&gt; coll)</code>：根据元素的自然顺序，返回集合中的最小元素</p></li><li><p><code>T min(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</code>：根据指定的Comparator的指定顺序，返回集合中的最小元素</p></li><li><p><code>int frequency(Collection&lt;?&gt; c, Object o)</code>：返回指定集合中指定元素出现的次数</p></li><li><p><code>void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</code>：将src中的内容赋值到的dest中</p><p>使用此方法时，需要保证dest.size() &gt;= src.size()</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">989</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">454</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 错误写法，会报java.lang.IndexOutOfBoundsException: Source does not fit in dest 异常</span></span>
<span class="line"><span class="token comment">//        List dest = new ArrayList();</span></span>
<span class="line"><span class="token comment">//        Collections.copy(dest, list);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 正确写法</span></span>
<span class="line">        <span class="token class-name">List</span> dest <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>boolean replaceAll(List&lt;T&gt; list, T oldVal, T newVal)</code>：用newVal替换list中的oldVal</p></li></ul><blockquote><p>同步控制</p></blockquote><p>Collections中提供了多个synchronizedXxx()，用来将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。synchronizedXxx()的返回结果即为线程安全的。</p>`,4);function O(J,I){const a=c("front");return o(),i("div",null,[k,n("ul",null,[r,n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("GOF给迭代器模式的定义为")]),_:1}),s("：提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。"),d]),v,m,n("li",null,[s("集合对象每次调用iterator()都得到一个"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("全新的")]),_:1}),s("迭代对象，"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("默认游标都在集合的第一个元素"),b]),_:1})])]),h,n("ul",null,[y,n("li",null,[g,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("调用next()执行的操作")]),_:1})]),s("： "),w]),f]),_,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("结论")]),_:1}),s("：JDK7中，如果能确定list的长度，建议使用带参构造器ArrayList list = new ArrayList(int capacity);")]),q,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("Set接口：存储无序的、不可重复的数据")]),_:1})]),S,n("p",null,[s("对于存放在Set容器中的对象，对应的类一定要重写equals()和hashCode()，以实现对象相等规则。即“"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("相等的对象必须有相等的散列码（哈希值）")]),_:1}),s("”")]),j,x,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("建议使用快捷键自动生成！！！")]),_:1})]),n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("两个对象相同，hash值一定相等；hash值相等，两个对象不一定相同")]),_:1})]),C,n("ul",null,[L,T,n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("优点")]),_:1}),s("：对于频繁的遍历操作，LinkedHashSet效率高于HashSet。")])]),H,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("比较的不再是hashCode()和equals()")]),_:1})]),A,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("Collections是用来操作Collection和Map的工具类")]),_:1})]),M])}const N=l(u,[["render",O],["__file","11_Java集合.html.vue"]]),D=JSON.parse('{"path":"/static/tang/java2/11_Java%E9%9B%86%E5%90%88.html","title":"11 Java集合","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"11.1 概述","slug":"_11-1-概述","link":"#_11-1-概述","children":[]},{"level":2,"title":"11.2 Java集合框架","slug":"_11-2-java集合框架","link":"#_11-2-java集合框架","children":[]},{"level":2,"title":"11.3 Collection接口中的方法","slug":"_11-3-collection接口中的方法","link":"#_11-3-collection接口中的方法","children":[]},{"level":2,"title":"11.4 Iterator迭代器接口","slug":"_11-4-iterator迭代器接口","link":"#_11-4-iterator迭代器接口","children":[]},{"level":2,"title":"11.5 List接口","slug":"_11-5-list接口","link":"#_11-5-list接口","children":[{"level":3,"title":"11.5.1 ArrayList源码分析","slug":"_11-5-1-arraylist源码分析","link":"#_11-5-1-arraylist源码分析","children":[]},{"level":3,"title":"11.5.2 LinkedList源码分析","slug":"_11-5-2-linkedlist源码分析","link":"#_11-5-2-linkedlist源码分析","children":[]},{"level":3,"title":"11.5.3 Vector的源码分析","slug":"_11-5-3-vector的源码分析","link":"#_11-5-3-vector的源码分析","children":[]},{"level":3,"title":"11.5.4 List接口中的方法","slug":"_11-5-4-list接口中的方法","link":"#_11-5-4-list接口中的方法","children":[]}]},{"level":2,"title":"11.6 Set接口","slug":"_11-6-set接口","link":"#_11-6-set接口","children":[{"level":3,"title":"11.6.1 概述","slug":"_11-6-1-概述","link":"#_11-6-1-概述","children":[]},{"level":3,"title":"11.6.2 HashSet","slug":"_11-6-2-hashset","link":"#_11-6-2-hashset","children":[]},{"level":3,"title":"11.6.3 LinkedHashSet","slug":"_11-6-3-linkedhashset","link":"#_11-6-3-linkedhashset","children":[]},{"level":3,"title":"11.6.4 TreeSet","slug":"_11-6-4-treeset","link":"#_11-6-4-treeset","children":[]}]},{"level":2,"title":"11.7 Map接口","slug":"_11-7-map接口","link":"#_11-7-map接口","children":[{"level":3,"title":"11.7.1 概述","slug":"_11-7-1-概述","link":"#_11-7-1-概述","children":[]},{"level":3,"title":"11.7.2 HashMap底层实现原理","slug":"_11-7-2-hashmap底层实现原理","link":"#_11-7-2-hashmap底层实现原理","children":[]},{"level":3,"title":"11.7.3 LinkedHashMap底层实现原理","slug":"_11-7-3-linkedhashmap底层实现原理","link":"#_11-7-3-linkedhashmap底层实现原理","children":[]},{"level":3,"title":"11.7.4 Map接口中的方法","slug":"_11-7-4-map接口中的方法","link":"#_11-7-4-map接口中的方法","children":[]},{"level":3,"title":"11.7.5 TreeMap的使用","slug":"_11-7-5-treemap的使用","link":"#_11-7-5-treemap的使用","children":[]},{"level":3,"title":"11.7.6 Properties","slug":"_11-7-6-properties","link":"#_11-7-6-properties","children":[]}]},{"level":2,"title":"11.8 Collections工具类","slug":"_11-8-collections工具类","link":"#_11-8-collections工具类","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/11_Java集合.md"}');export{N as comp,D as data};
