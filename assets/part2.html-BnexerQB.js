import{_ as e,o as a,c as l,b as i}from"./app-CQavEA7Q.js";const t={},n=i('<h1 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h1><p><strong>核心思想</strong>：将对象的创建与对象的实现分离。实现复杂，但使用简单。工厂会给我们提供一个工厂方法，我们直接去调用即可。</p><p><strong>例子</strong>： js 中的 document.createElement() 方法；Vue 和 React中的createElement() 方法</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><h3 id="意图" tabindex="-1"><a class="header-anchor" href="#意图"><span>意图：</span></a></h3><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><h3 id="主要解决" tabindex="-1"><a class="header-anchor" href="#主要解决"><span>主要解决：</span></a></h3><p>主要解决接口选择的问题。</p><h3 id="何时使用" tabindex="-1"><a class="header-anchor" href="#何时使用"><span>何时使用：</span></a></h3><p>我们明确地计划不同条件下创建不同实例时。</p><h3 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决"><span>如何解决：</span></a></h3><p>让其子类实现工厂接口，返回的也是一个抽象的产品。</p><h3 id="关键代码" tabindex="-1"><a class="header-anchor" href="#关键代码"><span>关键代码：</span></a></h3><p>创建过程在其子类执行。</p><h3 id="应用实例" tabindex="-1"><a class="header-anchor" href="#应用实例"><span>应用实例：</span></a></h3><ol><li>您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。</li><li>Hibernate 换数据库只需换方言和驱动就可以。</li></ol><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点：</span></a></h3><ol><li>一个调用者想创建一个对象，只要知道其名称就可以了。</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li></ol><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点：</span></a></h3><p>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景：</span></a></h3><ol><li>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</li><li>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</li><li>设计一个连接服务器的框架，需要三个协议，&quot;POP3&quot;、&quot;IMAP&quot;、&quot;HTTP&quot;，可以把这三个作为产品类，共同实现一个接口。</li></ol><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项：</span></a></h3><p>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p><h3 id="核心角色" tabindex="-1"><a class="header-anchor" href="#核心角色"><span>核心角色：</span></a></h3><p>工厂模式包含以下几个核心角色：</p><ul><li>抽象产品（Abstract Product）：定义了产品的共同接口或抽象类。它可以是具体产品类的父类或接口，规定了产品对象的共同方法。</li><li>具体产品（Concrete Product）：实现了抽象产品接口，定义了具体产品的特定行为和属性。</li><li>抽象工厂（Abstract Factory）：声明了创建产品的抽象方法，可以是接口或抽象类。它可以有多个方法用于创建不同类型的产品。</li><li>具体工厂（Concrete Factory）：实现了抽象工厂接口，负责实际创建具体产品的对象。</li></ul>',27),s=[n];function r(h,c){return a(),l("div",null,s)}const p=e(t,[["render",r],["__file","part2.html.vue"]]),o=JSON.parse('{"path":"/static/JavaScript/design/part2.html","title":"工厂模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"意图：","slug":"意图","link":"#意图","children":[]},{"level":3,"title":"主要解决：","slug":"主要解决","link":"#主要解决","children":[]},{"level":3,"title":"何时使用：","slug":"何时使用","link":"#何时使用","children":[]},{"level":3,"title":"如何解决：","slug":"如何解决","link":"#如何解决","children":[]},{"level":3,"title":"关键代码：","slug":"关键代码","link":"#关键代码","children":[]},{"level":3,"title":"应用实例：","slug":"应用实例","link":"#应用实例","children":[]},{"level":3,"title":"优点：","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点：","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"使用场景：","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"注意事项：","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"核心角色：","slug":"核心角色","link":"#核心角色","children":[]}]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/JavaScript/design/part2.md"}');export{p as comp,o as data};
