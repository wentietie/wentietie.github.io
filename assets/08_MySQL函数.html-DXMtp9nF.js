import{_ as a,r as i,o as c,c as r,e as s,a as t,w as l,d as e,b as d}from"./app-DRxAhH5h.js";const o="/assets/08_EXTRACT%E5%87%BD%E6%95%B0type%E5%8F%82%E6%95%B0%E7%9A%84%E6%9E%9A%E4%B8%BE-ChTOzR2W.png",u="/assets/08_DATE_ADD%E5%92%8CDATE_SUB%E5%87%BD%E6%95%B0%E4%B8%ADtype%E5%8F%82%E6%95%B0%E6%9E%9A%E4%B8%BE-BASn29dD.png",p="/assets/08_GETFORMAT%E5%87%BD%E6%95%B0%E4%B8%ADdate_type%E5%92%8Cformat_type%E5%8F%82%E6%95%B0%E6%9E%9A%E4%B8%BE-Cd3FzJz_.png",v={},m=d('<h1 id="_8-mysql函数" tabindex="-1"><a class="header-anchor" href="#_8-mysql函数"><span>8 MySQL函数</span></a></h1><h2 id="_8-1-单行函数" tabindex="-1"><a class="header-anchor" href="#_8-1-单行函数"><span>8.1 单行函数</span></a></h2><h3 id="_8-1-1-数值函数" tabindex="-1"><a class="header-anchor" href="#_8-1-1-数值函数"><span>8.1.1 数值函数</span></a></h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>SIGN(X) </code></td><td>返回X的符号。正数返回1，负数返回-1，0返回0</td></tr><tr><td><code>CEIL(x)</code>，<code>CEILING(x) </code></td><td>对x向上取整</td></tr><tr><td><code>FLOOR(x)</code></td><td>对x向下取整</td></tr><tr><td><code>LEAST(e1,e2,e3…)</code></td><td>返回列表中的最小值</td></tr><tr><td><code>GREATEST(e1,e2,e3…) </code></td><td>返回列表中的最大值</td></tr><tr><td><code>RAND() </code></td><td>返回0~1的随机数</td></tr><tr><td><code>RAND(x)</code></td><td>返回0~1的随机数。x是种子，相同的x值会产生相同的随机数</td></tr><tr><td><code>ROUND(x) </code></td><td>对x四舍五入，得到一个整数</td></tr><tr><td><code>ROUND(x,y)</code></td><td>对x进行四舍五入，并保留y位小数</td></tr><tr><td><code>TRUNCATE(x,y) </code></td><td>对x截断，保留y位小数</td></tr><tr><td><code>SQRT(x)</code></td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr><tr><td><code>POW(x,y)</code>，<code>POWER(X,Y) </code></td><td>返回x的y次方</td></tr><tr><td><code>EXP(X) </code></td><td>返回e的x次方</td></tr><tr><td><code>CONV(x,f1,f2) </code></td><td>将x由f1进制数转为f2进制数。f1指明当前x是什么进制，f2指明想转成什么进制</td></tr><tr><td>...</td><td>...</td></tr></tbody></table><h3 id="_8-1-2-字符串函数" tabindex="-1"><a class="header-anchor" href="#_8-1-2-字符串函数"><span>8.1.2 字符串函数</span></a></h3>',5),b=d(`<table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>CHAR_LENGTH(s) </code>,<code>与CHARACTER_LENGTH(s)</code></td><td>返回字符串s的字符数。</td></tr><tr><td><code>LENGTH(s)</code></td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td><code>CONCAT(s1,s2,......,sn) </code></td><td>连接s1,s2,......,sn为一个字符串</td></tr><tr><td><code>CONCAT_WS(x, s1,s2,......,sn)</code></td><td>同CONCAT(s1,s2,...)函数，但是每个字符串之间要加上x</td></tr><tr><td><code>INSERT(str, idx, len, replacestr)</code></td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td><code>REPLACE(str, a, b)</code></td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td><code>UPPER(s)</code> ，<code> UCASE(s)</code></td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td><code> LOWER(s)</code> ，<code>LCASE(s)</code></td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td><code>LEFT(str,n)</code>或<code>RIGHT(str,n)</code></td><td>返回字符串str最左边或最右边的n个字符</td></tr><tr><td><code>LPAD(str, len, pad)</code>或<code>RPAD(str ,len, pad)</code></td><td>用字符串pad对str最左边或最右边进行填充，直到str的长度为len个字符</td></tr><tr><td><code>LTRIM(s)</code>或<code>RTRIM(s) </code></td><td>去掉字符串s左侧或右的空格</td></tr><tr><td><code>TRIM(s)</code></td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td><code>TRIM(s1 FROM s)</code></td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td><code>TRIM(LEADING s1 FROM s)</code></td><td>去掉字符串s开始处的s1</td></tr><tr><td><code>TRIM(TRAILING s1 FROM s)</code></td><td>去掉字符串s结尾处的s1</td></tr><tr><td><code>REPEAT(str, n)</code></td><td>返回str重复n次的结果</td></tr><tr><td><code>SPACE(n)</code></td><td>返回n个空格</td></tr><tr><td><code>STRCMP(s1,s2)</code></td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td><code>SUBSTR(s,index,len)</code>,<code>SUBSTRING(s,n,len)</code>,<code>MID(s,n,len)</code></td><td>返回从字符串s的index位置其len个字符</td></tr><tr><td><code> LOCATE(substr,str)</code>,<code>POSITION(substr IN str)</code>,<code>INSTR(str,substr)</code></td><td>返回字符串substr在字符串str中首次出现的位置。未找到，返回0</td></tr><tr><td><code>ELT(m,s1,s2,…,sn)</code></td><td>返回指定位置的字符串。如 果m=n，则返回sn</td></tr><tr><td><code>FIELD(s,s1,s2,…,sn) </code></td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td><code>FIND_IN_SET(s1,s2)</code></td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分 隔的字符串。完全匹配不是模糊匹配</td></tr><tr><td><code>REVERSE(s) </code></td><td>反转s</td></tr><tr><td><code>NULLIF(value1,value2)</code></td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回 value1</td></tr></tbody></table><h3 id="_8-1-3-日期和时间" tabindex="-1"><a class="header-anchor" href="#_8-1-3-日期和时间"><span>8.1.3 日期和时间</span></a></h3><blockquote><p>获取日期、时间</p></blockquote><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>CURDATE()</code> ，<code>CURRENT_DATE()</code></td><td>返回当前日期，只包含年、 月、日</td></tr><tr><td><code>CURTIME()</code> ，<code> CURRENT_TIME()</code></td><td>返回当前时间，只包含时、 分、秒</td></tr><tr><td><code>NOW()</code>,<code>SYSDATE()</code>,<code>CURRENT_TIMESTAMP()</code>, <code>LOCALTIME()</code>, <code>LOCALTIMESTAMP()</code></td><td>返回当前系统日期和时间</td></tr></tbody></table><blockquote><p>日期与时间戳的转换</p></blockquote><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>UNIX_TIMESTAMP()</code></td><td>将当前时间以UNIX时间戳的形式返回</td></tr><tr><td><code>UNIX_TIMESTAMP(date)</code></td><td>将时间date以UNIX时间戳的形式返回</td></tr><tr><td><code>FROM_UNIXTIME(timestamp)</code></td><td>将UNIX时间戳转换为普通格式的时间</td></tr></tbody></table><blockquote><p>日期的操作函数</p></blockquote><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>EXTRACT(type FROM date)</code></td><td>返回指定日期中特定的部分，type指定返回的值，其取值与含义见下图</td></tr></tbody></table><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT now() curr, EXTRACT(MINUTE FROM NOW()) curr_minute, EXTRACT( WEEK FROM NOW()) curr_week, EXTRACT( QUARTER FROM NOW()) curr_quarter, EXTRACT( MINUTE_SECOND FROM NOW()) curr_minute_second;</span>
<span class="line"></span>
<span class="line">+---------------------+-------------+-----------+--------------+--------------------+</span>
<span class="line">| curr                | curr_minute | curr_week | curr_quarter | curr_minute_second |</span>
<span class="line">+---------------------+-------------+-----------+--------------+--------------------+</span>
<span class="line">| 2023-01-13 15:54:35 |          54 |         2 |            1 |               5435 |</span>
<span class="line">+---------------------+-------------+-----------+--------------+--------------------+</span>
<span class="line">1 row in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt=""></p><blockquote><p>计算日期和时间的函数--第1组</p></blockquote><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>DATE_ADD(datetime, INTERVAL expr type)</code></td><td>在当前日期或时间上增加expr对应的时间（时间格式由type指定）</td></tr><tr><td><code>DATE_SUB(datetime,INTERVAL expr type)</code></td><td>在当前日期或时间上减去expr对应的时间（时间格式由type指定）</td></tr></tbody></table><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT NOW() \`now\`,</span>
<span class="line">    -&gt; DATE_ADD(NOW(), INTERVAL 1 DAY) AS add_1_day,</span>
<span class="line">    -&gt; DATE_ADD(NOW(),INTERVAL 1 SECOND) AS add_1_second,</span>
<span class="line">    -&gt; DATE_ADD(NOW(),INTERVAL &#39;1_1&#39; MINUTE_SECOND) AS add_1_minute_1_second,</span>
<span class="line">    -&gt; DATE_ADD(NOW(), INTERVAL -1 YEAR) AS sub_1_year #可以是负数，相当于减</span>
<span class="line">    -&gt; ;</span>
<span class="line">    </span>
<span class="line">+---------------------+---------------------+---------------------+-----------------------+---------------------+</span>
<span class="line">| now                 | add_1_day           | add_1_second        | add_1_minute_1_second | sub_1_year          |</span>
<span class="line">+---------------------+---------------------+---------------------+-----------------------+---------------------+</span>
<span class="line">| 2023-01-13 16:11:58 | 2023-01-14 16:11:58 | 2023-01-13 16:11:59 | 2023-01-13 16:12:59   | 2022-01-13 16:11:58 |</span>
<span class="line">+---------------------+---------------------+---------------------+-----------------------+---------------------+</span>
<span class="line">1 row in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><blockquote><p>计算日期和时间的函数--第2组</p></blockquote><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>ADDTIME(time1,time2)</code>或<code>SUBTIME(time1,time2) </code></td><td>返回time1加上或减掉time2后的时间。当time2为一个数字时，代表的是 <strong>秒</strong> ，可以为负数</td></tr><tr><td><code>DATEDIFF(date1,date2)</code></td><td>返回date1 - date2的日期间隔天数</td></tr><tr><td><code> TIMEDIFF(time1, time2)</code></td><td>返回time1 - time2的时间间隔</td></tr><tr><td><code>FROM_DAYS(N)</code></td><td>返回从0000年1月1日起，N天以后的日期</td></tr><tr><td><code>TO_DAYS(date)</code></td><td>返回日期date距离0000年1月1日的天数</td></tr><tr><td><code>LAST_DAY(date)</code></td><td>返回date所在月份的最后一天的日期</td></tr><tr><td><code>MAKEDATE(year,n) </code></td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td><code>MAKETIME(hour,minute,second)</code></td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td><code>PERIOD_ADD(time,n)</code></td><td>返回time加上n个月后的时间。<strong>其中time为YYMM或者YYYYMM</strong></td></tr></tbody></table><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT NOW() \`now\`,</span>
<span class="line">    -&gt; ADDTIME(NOW(),20) add_20_second,</span>
<span class="line">    -&gt; SUBTIME(NOW(),&#39;1:1:3&#39;) sub_1h_1m_3s,</span>
<span class="line">    -&gt; DATEDIFF(NOW(),&#39;2021-10-01&#39;) diff_date,</span>
<span class="line">    -&gt; TIMEDIFF(NOW(),&#39;2021-10-25 22:10:10&#39;) diff_time</span>
<span class="line">    -&gt; ;</span>
<span class="line">+---------------------+---------------------+---------------------+-----------+-----------+</span>
<span class="line">| now                 | add_20_second       | sub_1h_1m_3s        | diff_date | diff_time |</span>
<span class="line">+---------------------+---------------------+---------------------+-----------+-----------+</span>
<span class="line">| 2023-01-13 16:36:13 | 2023-01-13 16:36:33 | 2023-01-13 15:35:10 |       469 | 838:59:59 |</span>
<span class="line">+---------------------+---------------------+---------------------+-----------+-----------+</span>
<span class="line">1 row in set, 1 warning (0.00 sec)</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT NOW() \`now\`,</span>
<span class="line">    -&gt; FROM_DAYS(368) 368_date,</span>
<span class="line">    -&gt; TO_DAYS(&#39;0000-12-25&#39;) to_days,</span>
<span class="line">    -&gt; LAST_DAY(NOW()) curr_month_last_day,</span>
<span class="line">    -&gt; MAKEDATE(YEAR(NOW()),369) make_date,</span>
<span class="line">    -&gt; MAKETIME(52,21,23) make_time</span>
<span class="line">    -&gt; ;</span>
<span class="line">+---------------------+------------+---------+---------------------+------------+-----------+</span>
<span class="line">| now                 | 368_date   | to_days | curr_month_last_day | make_date  | make_time |</span>
<span class="line">+---------------------+------------+---------+---------------------+------------+-----------+</span>
<span class="line">| 2023-01-13 16:36:36 | 0001-01-03 |     359 | 2023-01-31          | 2024-01-04 | 52:21:23  |</span>
<span class="line">+---------------------+------------+---------+---------------------+------------+-----------+</span>
<span class="line">1 row in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT PERIOD_ADD(201703, 5) ;</span>
<span class="line">+-----------------------+</span>
<span class="line">| PERIOD_ADD(201703, 5) |</span>
<span class="line">+-----------------------+</span>
<span class="line">|                201708 |</span>
<span class="line">+-----------------------+</span>
<span class="line">1 row in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>日期的格式化与解析</p></blockquote><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>DATE_FORMAT(date,fmt)</code></td><td>按照字符串fmt格式化日期date</td></tr><tr><td><code>TIME_FORMAT(time,fmt) </code></td><td>按照字符串fmt格式化时间time</td></tr><tr><td><code>GET_FORMAT(date_type,format_type)</code></td><td>返回日期字符串的显示格式</td></tr><tr><td><code>STR_TO_DATE(str, fmt)</code></td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p><img src="`+p+'" alt=""></p><h3 id="_8-1-4-流程控制函数" tabindex="-1"><a class="header-anchor" href="#_8-1-4-流程控制函数"><span>8.1.4 流程控制函数</span></a></h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>IF(value,value1,value2) </code></td><td>如果value的值为TRUE，返回value1， 否则返回value2</td></tr><tr><td><code>IFNULL(value1, value2) </code></td><td>如果value1不为NULL，返回value1，否 则返回value2</td></tr><tr><td><code>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 .... [ELSE resultn] END</code></td><td>相当于Java的if...else if...else...</td></tr><tr><td><code>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 .... [ELSE 值n] END</code></td><td>相当于Java的switch...case...</td></tr></tbody></table><h3 id="_8-1-5-加密与解密函数" tabindex="-1"><a class="header-anchor" href="#_8-1-5-加密与解密函数"><span>8.1.5 加密与解密函数</span></a></h3>',25),_=s("thead",null,[s("tr",null,[s("th",null,"函数"),s("th",null,"用法")])],-1),h=s("td",null,[s("code",null,"PASSWORD(str) ")],-1),E=s("strong",null,"不可逆",-1),g=s("tr",null,[s("td",null,[s("code",null,"MD5(str) ")]),s("td",null,"MD5加密。若参数为 NULL，则会返回NULL")],-1),y=s("tr",null,[s("td",null,[s("code",null,"SHA(str) ")]),s("td",null,"SHA加密。当参数为 NULL时，返回NULL。 SHA加密算法比MD5更加安全 。")],-1),T=s("td",null,[s("code",null,"ENCODE(value,password_seed)")],-1),R=s("strong",null,"加密",-1),A=s("td",null,[s("code",null,"DECODE(value,password_seed) ")],-1),N=s("strong",null,"解密",-1),S=d(`<h3 id="_8-1-6-mysql信息函数" tabindex="-1"><a class="header-anchor" href="#_8-1-6-mysql信息函数"><span>8.1.6 MySQL信息函数</span></a></h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>VERSION() </code></td><td>返回当前MySQL的版本号</td></tr><tr><td><code>CONNECTION_ID() </code></td><td>返回当前MySQL服务器的连接数</td></tr><tr><td><code> DATABASE()</code>，<code>SCHEMA()</code></td><td>返回MySQL命令行当前所在的数据库</td></tr><tr><td><code>USER()</code>，<code>CURRENT_USER()</code>、<code>SYSTEM_USER()</code>， <code>SESSION_USER()</code></td><td>返回当前连接MySQL的用户名，返回结果格式为 “主机名@用户名”</td></tr><tr><td><code>CHARSET(value) </code></td><td>返回字符串value自变量的字符集</td></tr><tr><td><code>COLLATION(value)</code></td><td>返回字符串value的比较规则</td></tr></tbody></table><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT CHARSET(&#39;ABC&#39;), COLLATION(&#39;ABC&#39;);</span>
<span class="line"></span>
<span class="line">+----------------+--------------------+</span>
<span class="line">| CHARSET(&#39;ABC&#39;) | COLLATION(&#39;ABC&#39;)   |</span>
<span class="line">+----------------+--------------------+</span>
<span class="line">| utf8mb4        | utf8mb4_0900_ai_ci |</span>
<span class="line">+----------------+--------------------+</span>
<span class="line">1 row in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1-7-其他函数" tabindex="-1"><a class="header-anchor" href="#_8-1-7-其他函数"><span>8.1.7 其他函数</span></a></h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>FORMAT(value,n)</code></td><td>返回对数字value进行格式化后的结果数据。n表示 <strong>四舍五入</strong> 后保留 到小数位数</td></tr><tr><td><code>INET_ATON(ipvalue) </code></td><td>将以点分隔的IP地址转化为一个数字</td></tr><tr><td><code>INET_NTOA(value) </code></td><td>将数字形式的IP地址转化为以点分隔的IP地址</td></tr><tr><td><code>BENCHMARK(n,expr) </code></td><td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费的时间</td></tr><tr><td><code>CONVERT(value USING char_code) </code></td><td>将value所使用的字符编码修改为char_code</td></tr></tbody></table><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT CHARSET(&#39;mysql&#39;), CHARSET(CONVERT(&#39;mysql&#39; USING &#39;utf8&#39;));</span>
<span class="line"></span>
<span class="line">+------------------+----------------------------------------+</span>
<span class="line">| CHARSET(&#39;mysql&#39;) | CHARSET(CONVERT(&#39;mysql&#39; USING &#39;utf8&#39;)) |</span>
<span class="line">+------------------+----------------------------------------+</span>
<span class="line">| utf8mb4          | utf8                                   |</span>
<span class="line">+------------------+----------------------------------------+</span>
<span class="line">1 row in set, 1 warning (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-2-聚合函数" tabindex="-1"><a class="header-anchor" href="#_8-2-聚合函数"><span>8.2 聚合函数</span></a></h2><blockquote><p>聚合函数类型</p></blockquote>`,8),O=d("<li><p><code>AVG()</code>：AVG(column)求column列的平均值。只能对<strong>数值型数据</strong>使用</p></li><li><p><code>SUM()</code>：SUM(column)求column列的和。只能对<strong>数值型数据</strong>使用</p></li><li><p><code>MAX()</code>：MAX(column)求column列的最大值。可以对<strong>任意数据类型</strong>的数据使用</p></li><li><p><code>MIN()</code>：MIN(column)求column列的最小值。可以对<strong>任意数据类型</strong>的数据使用</p></li>",4),L=s("p",null,[s("code",null,"COUNT()"),e("：返回表中记录总数。可以对"),s("strong",null,"任意数据类型"),e("的数据使用")],-1),I=s("p",null,[s("code",null,"答："),e("对于"),s("strong",null,"MyISAM引擎"),e("的表是没有区别的。这种引擎内部有一计数器在维护着行数。 "),s("strong",null,"Innodb引擎"),e("的表用count(*),count(1) 直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。")],-1),q=s("p",null,[s("code",null,"答："),e("不要使用 count(列名)来替代 count(*) 。**count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行 **。")],-1),M=s("blockquote",null,[s("p",null,"语法")],-1),C=d(`<div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT column, 聚合函数(column)</span>
<span class="line">FROM table</span>
<span class="line">[WHERE condition]</span>
<span class="line">[GROUP BY group_by_expression]</span>
<span class="line">[ORDER BY column];</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p></blockquote>`,2),D=s("h2",{id:"_8-3-group-by",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_8-3-group-by"},[s("span",null,"8.3 GROUP BY")])],-1),U=s("blockquote",null,[s("p",null,"语法")],-1),f=d(`<div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT column, group_function(column)</span>
<span class="line">FROM table</span>
<span class="line">[WHERE condition]</span>
<span class="line">[GROUP BY group_by_expression]</span>
<span class="line">[ORDER BY column];</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项</p></blockquote>`,2),x=d(`<blockquote><p>GROUP BY中使用WITH ROLLUP</p></blockquote><ul><li>使用 <code>WITH ROLLUP</code> 关键字之后，在所有查询出的分组记录之后<strong>增加一条记录</strong>，该记录用来求全部数据的sum、avg、count等</li><li>当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即<strong>ROLLUP和ORDER BY是互相排斥 的</strong></li></ul><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT department_id, SUM(salary),AVG(salary),count(*)</span>
<span class="line">    -&gt; FROM employee</span>
<span class="line">    -&gt; GROUP BY department_id WITH ROLLUP;</span>
<span class="line">    </span>
<span class="line">+---------------+-------------+-------------+----------+</span>
<span class="line">| department_id | SUM(salary) | AVG(salary) | count(*) |</span>
<span class="line">+---------------+-------------+-------------+----------+</span>
<span class="line">|             1 |    19600.00 | 9800.000000 |        2 |</span>
<span class="line">|             2 |     3433.00 | 3433.000000 |        1 |</span>
<span class="line">|          NULL |    23033.00 | 7677.666667 |        3 |</span>
<span class="line">+---------------+-------------+-------------+----------+</span>
<span class="line">3 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-4-having" tabindex="-1"><a class="header-anchor" href="#_8-4-having"><span>8.4 HAVING</span></a></h2><blockquote><p>作用</p></blockquote><p>过滤分组</p><blockquote><p>语法</p></blockquote>`,7),k=s("li",null,"使用时，确保行已被分组",-1),B=d(`<div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT column, group_function(column)</span>
<span class="line">FROM table</span>
<span class="line">[WHERE condition]</span>
<span class="line">[GROUP BY group_by_expression]</span>
<span class="line">[HAVING group_condition]</span>
<span class="line">[ORDER BY column];</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>例子</p></blockquote><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">mysql&gt; SELECT department_id, MAX(salary)</span>
<span class="line">    -&gt; FROM employee</span>
<span class="line">    -&gt; GROUP BY department_id</span>
<span class="line">    -&gt; HAVING MAX(salary) &gt; 2222</span>
<span class="line">    -&gt; ORDER BY department_id desc;</span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">+---------------+-------------+</span>
<span class="line">| department_id | MAX(salary) |</span>
<span class="line">+---------------+-------------+</span>
<span class="line">|             2 |     3433.00 |</span>
<span class="line">|             1 |    10000.00 |</span>
<span class="line">+---------------+-------------+</span>
<span class="line">2 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-5-select执行过程" tabindex="-1"><a class="header-anchor" href="#_8-5-select执行过程"><span>8.5 SELECT执行过程</span></a></h2><blockquote><p>SELECT语句的结构</p></blockquote><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code><span class="line">SELECT ...,....,...</span>
<span class="line">FROM ...[, ..., ...]</span>
<span class="line">[INNER / LEFT / RIGHT] JOIN ... ON ...多表的连接条件</span>
<span class="line">WHERE 不包含组函数的过滤条件 [AND / OR 不包含组函数的过滤条件]</span>
<span class="line">GROUP BY ...,...</span>
<span class="line">HAVING 包含组函数的过滤条件</span>
<span class="line">ORDER BY ..., ..., ... ASC / DESC</span>
<span class="line">LIMIT ...,...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>SELECT语句的执行顺序</p></blockquote><p>FROM （---&gt; ON ---&gt; JOIN ）---&gt; WHERE ---&gt; GROUP BY ---&gt; HAVING ---&gt; SELECT ---&gt; DISTINCT ---&gt; ORDER BY ---&gt; LIMIT</p><blockquote><p>SELECT执行原理</p></blockquote>`,9),F=d("<li><strong>执行FROM子句</strong>，生成虚拟表<strong>vt1</strong>。如果是多表联查，还会经历如下几个步骤： <ul><li>先<strong>求两个表的笛卡尔积</strong>，生成虚拟表<strong>vt1.1</strong></li><li><strong>执行ON语句</strong>，对表vt1的数据进行筛选，生成表<strong>vt1.2</strong></li><li>如果是外连接（左连接/右连接/全连接），则对表vt1.2<strong>添加外部行</strong>，生成虚拟表<strong>vt1.3</strong></li></ul></li><li><strong>执行WHERE语句</strong>，对FROM语句中生成的虚拟表进行筛选，生成虚拟表<strong>vt2</strong></li><li><strong>执行GROUP BY语句</strong>，对表vt2中的数据进行分组，生成虚拟表<strong>vt3</strong></li>",3),w=s("strong",null,"执行HAVING语句",-1),H=s("strong",null,"vt4",-1),P=s("li",null,[s("strong",null,"执行SELECT语句"),e("，在表vt4中选取需要的列，生成虚拟表"),s("strong",null,"vt5"),e("。")],-1),G=s("li",null,[s("strong",null,"执行DISTINCT语句"),e("，对表vt5中的数据去重，生成虚拟表"),s("strong",null,"vt6"),e("。")],-1),Y=s("strong",null,"执行ORDER BY语句",-1),W=s("strong",null,"vt7",-1),V=s("li",null,[s("strong",null,"执行LIMIT语句"),e("，在表vt7中取出指定的行记录，生成虚拟表"),s("strong",null,"vt8"),e("。")],-1);function X(Q,j){const n=i("front");return c(),r("div",null,[m,s("p",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("MySQL中，字符串的位置是从1开始的")]),_:1})]),b,s("table",null,[_,s("tbody",null,[s("tr",null,[h,s("td",null,[e("用户密码加密。加密结果"),E,e(" ，常用于用户的密码加密 。"),t(n,{style:{background:"yellow"}},{default:l(()=>[e("MySQL8.0中已移除该方法")]),_:1})])]),g,y,s("tr",null,[T,s("td",null,[e("返回使用password_seed作为加密密码"),R,e("value "),t(n,{style:{background:"yellow"}},{default:l(()=>[e("MySQL8.0中已移除该方法")]),_:1})])]),s("tr",null,[A,s("td",null,[e("返回使用password_seed作为加密密码"),N,e("value"),t(n,{style:{background:"yellow"}},{default:l(()=>[e("MySQL8.0中已移除该方法")]),_:1})])])])]),S,s("ul",null,[O,s("li",null,[L,s("ul",null,[s("li",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("用count(*)，count(1)，count(列名)谁好呢?")]),_:1}),I]),s("li",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("能不能使用count(列名)替换count(*)?")]),_:1}),q])])])]),M,s("p",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("用在select子句中")]),_:1})]),C,s("ul",null,[s("li",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("聚合函数不能嵌套使用")]),_:1})]),s("li",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("不能在where语句中使用聚合函数")]),_:1})])]),D,U,s("p",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("用在where后order by前")]),_:1})]),f,s("p",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中")]),_:1}),e("， 但是包含在 GROUP BY 子句中的列不必包含在SELECT 列表中")]),x,s("ul",null,[k,s("li",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("使用了聚合函数")]),_:1})]),s("li",null,[t(n,{style:{background:"yellow"}},{default:l(()=>[e("和GROUP BY搭配使用，用在GROUP BY后order by前")]),_:1})])]),B,s("ul",null,[F,s("li",null,[w,e("，对表vt3中的数据再次进行筛选，生成虚拟表"),H,e("。"),t(n,{style:{background:"yellow"}},{default:l(()=>[e(" HAVING语句中可以使用SELECT语句中的列以及列的别名")]),_:1})]),P,G,s("li",null,[Y,e("，对表vt6中的数据进行排序，生成虚拟表"),W,e("。"),t(n,{style:{background:"yellow"}},{default:l(()=>[e("ORDER BY语句中可以使用SELECT语句中的列以及列的别名")]),_:1})]),V])])}const K=a(v,[["render",X],["__file","08_MySQL函数.html.vue"]]),z=JSON.parse('{"path":"/static/tang/mysql/08_MySQL%E5%87%BD%E6%95%B0.html","title":"8 MySQL函数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"8.1 单行函数","slug":"_8-1-单行函数","link":"#_8-1-单行函数","children":[{"level":3,"title":"8.1.1 数值函数","slug":"_8-1-1-数值函数","link":"#_8-1-1-数值函数","children":[]},{"level":3,"title":"8.1.2 字符串函数","slug":"_8-1-2-字符串函数","link":"#_8-1-2-字符串函数","children":[]},{"level":3,"title":"8.1.3 日期和时间","slug":"_8-1-3-日期和时间","link":"#_8-1-3-日期和时间","children":[]},{"level":3,"title":"8.1.4 流程控制函数","slug":"_8-1-4-流程控制函数","link":"#_8-1-4-流程控制函数","children":[]},{"level":3,"title":"8.1.5 加密与解密函数","slug":"_8-1-5-加密与解密函数","link":"#_8-1-5-加密与解密函数","children":[]},{"level":3,"title":"8.1.6 MySQL信息函数","slug":"_8-1-6-mysql信息函数","link":"#_8-1-6-mysql信息函数","children":[]},{"level":3,"title":"8.1.7 其他函数","slug":"_8-1-7-其他函数","link":"#_8-1-7-其他函数","children":[]}]},{"level":2,"title":"8.2 聚合函数","slug":"_8-2-聚合函数","link":"#_8-2-聚合函数","children":[]},{"level":2,"title":"8.3 GROUP BY","slug":"_8-3-group-by","link":"#_8-3-group-by","children":[]},{"level":2,"title":"8.4 HAVING","slug":"_8-4-having","link":"#_8-4-having","children":[]},{"level":2,"title":"8.5 SELECT执行过程","slug":"_8-5-select执行过程","link":"#_8-5-select执行过程","children":[]}],"git":{},"filePathRelative":"static/tang/mysql/08_MySQL函数.md"}');export{K as comp,z as data};
