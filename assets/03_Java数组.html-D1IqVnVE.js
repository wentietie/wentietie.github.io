import{_ as o,r as l,o as c,c as u,e as n,a as p,w as t,d as s,b as e}from"./app-CQavEA7Q.js";const i="/assets/03_%E6%95%B0%E7%BB%84%E6%89%93%E5%8D%B0print%E5%87%BD%E6%95%B0-CYZbQX_Z.png",k="/assets/03_%E5%86%85%E5%AD%98%E7%AE%80%E5%8C%96%E7%BB%93%E6%9E%84-BcyjWfYR.png",r="/assets/03_%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E4%B8%BE%E4%BE%8B-C1m57T7i.png",d="/assets/03_%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90-DwwO5n_a.png",m={},b=e(`<h1 id="_3-java数组" tabindex="-1"><a class="header-anchor" href="#_3-java数组"><span>3 Java数组</span></a></h1><blockquote><p>数组的特点</p></blockquote><ul><li>有序性</li><li>存储空间连续</li><li>数组是引用类型变量</li><li>长度固定，不可更改，一旦初始化完成，数组长度就确定了</li></ul><h2 id="_3-1-一维数组" tabindex="-1"><a class="header-anchor" href="#_3-1-一维数组"><span>3.1 一维数组</span></a></h2><blockquote><p>声明和初始化</p></blockquote><ul><li>静态初始化：数组的声明赋值操作同时进行</li><li>动态初始化：先声明，再进行赋值操作</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 静态初始化</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;steve&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 其他正确写法</span></span>
<span class="line"><span class="token class-name">String</span> names2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;steve&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;steve&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 动态初始化</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">ages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line">ages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span></span>
<span class="line">ages<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>获取数组长度</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;steve&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>数组的初始化值</p></blockquote>`,10),v=n("li",null,"数组元素是整型（byte、short、int、long）：0",-1),h=n("li",null,"数组元素是浮点型（float、double）：0.0",-1),g=n("li",null,"数组元素是boolean型：false",-1),y=n("li",null,"数组元素为引用类型：null",-1),_=e("<blockquote><p>关于数组的打印</p></blockquote><ul><li><p>打印char类型的数组变量：</p><p><code>char[] c = new char[]{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;}; System.out.println(c)</code>，结果输出为<code>abc</code></p></li><li><p>打印非char类型的数组变量：</p><p><code>int[] i = new int[]{1, 2, 3}; System.out.println(c)</code>，结果输出为<code>地址值</code></p></li></ul>",2),w=e('<p><img src="'+i+'" alt=""></p><blockquote><p>内存解析</p></blockquote><ul><li><p>内存简化结构</p><p><img src="'+k+'" alt=""></p></li><li><p>一维数组内存举例说明</p><p><img src="'+r+'" alt=""></p></li></ul><h2 id="_3-2-多维数组" tabindex="-1"><a class="header-anchor" href="#_3-2-多维数组"><span>3.2 多维数组</span></a></h2><p>以二维数组为例</p><blockquote><p>理解</p></blockquote>',6),f=e(`<blockquote><p>初始化</p></blockquote><ul><li>静态初始化</li><li>动态初始化</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 静态初始化</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 其他正确写法</span></span>
<span class="line"><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 动态初始化</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//3行2列</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>获取指定位置的元素</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>获取数组的长度</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>初始化值</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址值</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空指针异常</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>内存解析</p></blockquote><p><img src="`+d+`" alt=""></p><h2 id="_3-3-数组的常见算法" tabindex="-1"><a class="header-anchor" href="#_3-3-数组的常见算法"><span>3.3 数组的常见算法</span></a></h2><h3 id="_3-3-1-复制" tabindex="-1"><a class="header-anchor" href="#_3-3-1-复制"><span>3.3.1 复制</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span> <span class="token comment">//这里只是地址值的赋值，arr2和arr1指向同一个地址</span></span>
<span class="line"><span class="token comment">// 数组的复制</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-2-反转" tabindex="-1"><a class="header-anchor" href="#_3-3-2-反转"><span>3.3.2 反转</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 数组反转 方法一</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverse1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr1<span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 数组反转 方法二</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverse2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-3-线性查找" tabindex="-1"><a class="header-anchor" href="#_3-3-3-线性查找"><span>3.3.3 线性查找</span></a></h3><blockquote><p>理解</p></blockquote><p>从前往后依次查找。</p><h3 id="_3-3-4-二分法查找" tabindex="-1"><a class="header-anchor" href="#_3-3-4-二分法查找"><span>3.3.4 二分法查找</span></a></h3><blockquote><p>前提</p></blockquote><p>数组是按照由小到大或者由大到小的顺序存储的。</p><blockquote><p>代码</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* 二分查找</span>
<span class="line">* 本题中数组按由小到大的顺序进行存储</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findWithBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> dest <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> head<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到了指定元素，下标为：&quot;</span><span class="token operator">+</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            flag <span class="token operator">=</span>  <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            head <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;很遗憾，指定元素不存在哦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-5-排序算法概述" tabindex="-1"><a class="header-anchor" href="#_3-3-5-排序算法概述"><span>3.3.5 排序算法概述</span></a></h3><blockquote><p>衡量排序算法的优劣</p></blockquote>`,26),q=n("blockquote",null,[n("p",null,"排序算法分类")],-1),j=n("span",{style:{color:"red"}},"多路归并排序",-1),x=n("blockquote",null,[n("p",null,"十大排序算法")],-1),E=n("p",null,"将待排序的元素分为已排序（初始为空）和未排序两组，依次将未排序的元素中值最小的元素放入已排序的组中。",-1),B=e("<li><p>交换排序</p><ul><li>冒泡排序</li><li>快速排序</li></ul></li><li><p>插入排序</p><ul><li>直接插入排序</li><li>折半插入排序</li><li>希尔排序</li></ul></li><li><p>归并排序</p></li><li><p>桶式排序</p></li><li><p>基数排序</p></li>",5),S=n("blockquote",null,[n("p",null,"算法5大特性")],-1),$=e('<h3 id="_3-3-6-简单选择排序" tabindex="-1"><a class="header-anchor" href="#_3-3-6-简单选择排序"><span>3.3.6 简单选择排序</span></a></h3><blockquote><p>基本过程</p></blockquote><ul><li>在一组元素R[i]到R[n]中选择最小的元素</li><li>如果他不是这组元素中的第一个元素，则将其与该组元素中的第一个元素交换</li><li>除去具有最小关键字的元素，在剩下的元素中重复以上两步骤，直到元素只有一个为止</li></ul><blockquote><p>效率分析</p></blockquote><ul><li><p><span style="color:red;">比较次数</span>：$(n-1)+(n-2)+...+2+1=n(n-1)/2$</p><p>无论初始状况如何，在第i趟排序中选择最小元素的时候，都需要做$(n-i)$次比较</p></li><li><p><span style="color:red;">交换次数</span>：</p><ul><li><p>最好情况：0次</p><p>序列恰好为正序时，需要交换0次</p></li><li><p>最差情况：${(n-1)}$次</p><p>如将数组[${5,1,2,3,4}$]按照有小到大的顺序排列，需要移动4次</p></li></ul></li></ul>',5),A=n("blockquote",null,[n("p",null,"稳定性")],-1),O=e(`<p>由于在直接选择排序中存在不相邻元素的交换，因此它是一个不稳定的排序方法。</p><p>比如给定数组[$3,7,3&#39;,2,1$]，按照有小到大的顺序排列后的结果为[$1,2,3&#39;,3,7$]</p><blockquote><p>示例代码</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 开始排序</span></span>
<span class="line"><span class="token comment">// 说明1：循环条件是 i &lt; arr.length - 1，而不是i &lt; arr.length的原因：最后一个数无需和自身进行比较、交换</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 记录最小值的下标</span></span>
<span class="line">    <span class="token comment">// 循环找到数组中的最小值对应的下标</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            index <span class="token operator">=</span> j<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将最小值和无序数组中的第一个元素进行交换（当最小值下标和当前下标不相等的时候再交换）</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    	arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    	arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 排序完成</span></span>
<span class="line"><span class="token comment">// 打印</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-7-堆排序" tabindex="-1"><a class="header-anchor" href="#_3-3-7-堆排序"><span>3.3.7 堆排序</span></a></h3><h3 id="_3-3-8-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_3-3-8-冒泡排序"><span>3.3.8 冒泡排序</span></a></h3><blockquote><p>基本思想</p></blockquote><p>对待排序序列从前往后，依次比较相邻元素排序码，如果逆序则交换，使排序码较大的元素逐渐从前往后移动。</p><blockquote><p>效率分析</p></blockquote><ul><li><p><span style="color:red;">比较次数</span>：</p><ul><li><p>最好情况：$n-1$次</p><p>此时待排序序列恰好是按照要求的顺序进行排序</p></li><li><p>最坏情况：$(n-1)+(n-2)+...+2+1=n(n-1)/2$次</p><p>此时待排序序列恰好是按照要求的顺序的逆序进行排序</p></li></ul></li><li><p><span style="color:red;">交换次数</span>：</p><ul><li><p>最好情况：0次</p><p>此时待排序序列恰好是按照要求的顺序进行排序</p></li><li><p>最坏情况：$(n-1)+(n-2)+...+2+1=n(n-1)/2$</p></li></ul></li></ul><blockquote><p>稳定性</p></blockquote><ul><li></li></ul><blockquote><p>示例代码</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 开始排序</span></span>
<span class="line"><span class="token comment">// 说明1：循环条件是 i &lt; arr.length - 1，而不是i &lt; arr.length的原因：最后一个数无需和自身进行比较、交换</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 说明2：循环条件是arr.length - 1 - i的原因：每完成一次排序，最后（i+1）个数都已完成排序，不需要再进行比较、交换</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 排序完成</span></span>
<span class="line"><span class="token comment">// 打印</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-9-快速排序" tabindex="-1"><a class="header-anchor" href="#_3-3-9-快速排序"><span>3.3.9 快速排序</span></a></h3><h3 id="_3-3-10-插入排序" tabindex="-1"><a class="header-anchor" href="#_3-3-10-插入排序"><span>3.3.10 插入排序</span></a></h3><h3 id="_3-3-10-1-直接插入排序" tabindex="-1"><a class="header-anchor" href="#_3-3-10-1-直接插入排序"><span>3.3.10.1 直接插入排序</span></a></h3><h3 id="_3-3-10-2-折半插入排序" tabindex="-1"><a class="header-anchor" href="#_3-3-10-2-折半插入排序"><span>3.3.10.2 折半插入排序</span></a></h3><h3 id="_3-3-12-希尔排序" tabindex="-1"><a class="header-anchor" href="#_3-3-12-希尔排序"><span>3.3.12 希尔排序</span></a></h3><h3 id="_3-3-13-归并排序" tabindex="-1"><a class="header-anchor" href="#_3-3-13-归并排序"><span>3.3.13 归并排序</span></a></h3><h3 id="_3-3-14-桶式排序" tabindex="-1"><a class="header-anchor" href="#_3-3-14-桶式排序"><span>3.3.14 桶式排序</span></a></h3><h3 id="_3-3-15-基数排序" tabindex="-1"><a class="header-anchor" href="#_3-3-15-基数排序"><span>3.3.15 基数排序</span></a></h3><h2 id="_3-4-arrays工具类的使用" tabindex="-1"><a class="header-anchor" href="#_3-4-arrays工具类的使用"><span>3.4 Arrays工具类的使用</span></a></h2><table><thead><tr><th>方法</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Arrays.equals(Object[] a, Object[] a2)</td><td>判读两个数组中的元素是否全相等</td><td>全相等，返回true</td></tr><tr><td>Arrays.toString(Object[] a)</td><td>获取数组中的元素信息</td><td>数组元素之间用&quot;,&quot;分隔，用&quot;[]&quot;包裹</td></tr><tr><td>Arrays.fill(Object[] a, Object val)</td><td>将指定数值（val）填充到数组中</td><td>无返回值</td></tr><tr><td>Arrays.sort(Object[] a)</td><td>对数组进行正序排序</td><td>排序完成后，原数组发生改变</td></tr><tr><td>Arrays.sort(Object[] a, Comparator&lt;? super T&gt; c)</td><td>对数组排序，顺序由Comparator构造函数决定</td><td>基本数据类型不可使用该方法，但对应的封装类型可使用</td></tr><tr><td>Arrays.binarySearch(int[] a, int key)</td><td>对排序后的数组进行二分法查找</td><td>数组必须是已排序好的；返回值小于0表示未找到</td></tr></tbody></table><h2 id="_3-5-数组中的常见异常" tabindex="-1"><a class="header-anchor" href="#_3-5-数组中的常见异常"><span>3.5 数组中的常见异常</span></a></h2><table><thead><tr><th>异常</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>ArrayIndexOutOfBoundsException</td><td>数组下标越界异常</td><td>下标小于0也叫数组下标越界</td></tr><tr><td>NullPointerException</td><td>空指针异常</td><td>// 情况一：<br>int[] arr4 = {49,38,65,97,76,13,27,49};<br> arr4 = null;<br> System.out.println(arr4[1]); // 空指针异常<br>// 情况二：<br>int[][] arr = new int[4][]; <br>System.out.println(arr[0][0]);// 空指针异常</td></tr></tbody></table>`,26);function C(J,N){const a=l("front");return c(),u("div",null,[b,n("ul",null,[v,h,n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("数组元素是char型")]),_:1}),s("：0或'\\u0000'，而非'0'")]),g,y]),_,p(a,{style:{background:"yellow"}},{default:t(()=>[s("println方法有个专门针对参数是char类型数组的重载。")]),_:1}),w,n("p",null,[s("可以看成是一维数组array1又作为另外一个一维数组array2的元素而存在。"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("其实，从数组底层的运行机制来看，没有多维数组。")]),_:1})]),f,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("时间复杂度")]),_:1}),s("：分析关键字的比较次数和记录的移动次数")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("空间复杂度")]),_:1}),s("：分析算法中需要多少辅助内存")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("稳定性")]),_:1}),s("：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种算法是稳定的")])]),q,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("内部排序")]),_:1}),s("：整个排序过程不需要借助外部存储器（如磁盘等），所有排序操作都在内存中完成。")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("外部排序")]),_:1}),s("：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助外部存储器（如磁盘）等。外部排序最常见的算法有"),j,s("。可以认为外部排序是由多次内部排序组成的。")])]),x,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("选择排序")]),_:1}),E,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("简单选择排序")]),_:1})]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("堆排序")]),_:1})])])]),B]),S,n("ul",null,[n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("输入")]),_:1}),s("：有0个或多个输入数据，这些输入必须有清楚的描述和定义")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("输出")]),_:1}),s("：至少有1个或多个输出结果，不可以没有输出")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("有穷性（有限性）")]),_:1}),s("：算法可以在有限的步骤之后会自动结束而不是无线循环，并且每一个步骤可以在可接受的时间内完成")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("确定性（明确性）")]),_:1}),s("：算法中的每一步都有确定的含义，不会出现二义性")]),n("li",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("可行性（有效性）")]),_:1}),s("：算法的每一步骤都是清楚且可行的，能让用户用纸笔计算而求出答案")])]),$,n("p",null,[s("综上，简单选择排序的"),p(a,{style:{background:"yellow"}},{default:t(()=>[s("时间复杂度为$O(n^{2})$")]),_:1})]),A,n("p",null,[p(a,{style:{background:"yellow"}},{default:t(()=>[s("不稳定")]),_:1})]),O])}const R=o(m,[["render",C],["__file","03_Java数组.html.vue"]]),T=JSON.parse('{"path":"/static/tang/java2/03_Java%E6%95%B0%E7%BB%84.html","title":"3 Java数组","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"3.1 一维数组","slug":"_3-1-一维数组","link":"#_3-1-一维数组","children":[]},{"level":2,"title":"3.2 多维数组","slug":"_3-2-多维数组","link":"#_3-2-多维数组","children":[]},{"level":2,"title":"3.3 数组的常见算法","slug":"_3-3-数组的常见算法","link":"#_3-3-数组的常见算法","children":[{"level":3,"title":"3.3.1 复制","slug":"_3-3-1-复制","link":"#_3-3-1-复制","children":[]},{"level":3,"title":"3.3.2 反转","slug":"_3-3-2-反转","link":"#_3-3-2-反转","children":[]},{"level":3,"title":"3.3.3 线性查找","slug":"_3-3-3-线性查找","link":"#_3-3-3-线性查找","children":[]},{"level":3,"title":"3.3.4 二分法查找","slug":"_3-3-4-二分法查找","link":"#_3-3-4-二分法查找","children":[]},{"level":3,"title":"3.3.5 排序算法概述","slug":"_3-3-5-排序算法概述","link":"#_3-3-5-排序算法概述","children":[]},{"level":3,"title":"3.3.6 简单选择排序","slug":"_3-3-6-简单选择排序","link":"#_3-3-6-简单选择排序","children":[]},{"level":3,"title":"3.3.7 堆排序","slug":"_3-3-7-堆排序","link":"#_3-3-7-堆排序","children":[]},{"level":3,"title":"3.3.8 冒泡排序","slug":"_3-3-8-冒泡排序","link":"#_3-3-8-冒泡排序","children":[]},{"level":3,"title":"3.3.9 快速排序","slug":"_3-3-9-快速排序","link":"#_3-3-9-快速排序","children":[]},{"level":3,"title":"3.3.10 插入排序","slug":"_3-3-10-插入排序","link":"#_3-3-10-插入排序","children":[]},{"level":3,"title":"3.3.10.1 直接插入排序","slug":"_3-3-10-1-直接插入排序","link":"#_3-3-10-1-直接插入排序","children":[]},{"level":3,"title":"3.3.10.2 折半插入排序","slug":"_3-3-10-2-折半插入排序","link":"#_3-3-10-2-折半插入排序","children":[]},{"level":3,"title":"3.3.12 希尔排序","slug":"_3-3-12-希尔排序","link":"#_3-3-12-希尔排序","children":[]},{"level":3,"title":"3.3.13 归并排序","slug":"_3-3-13-归并排序","link":"#_3-3-13-归并排序","children":[]},{"level":3,"title":"3.3.14 桶式排序","slug":"_3-3-14-桶式排序","link":"#_3-3-14-桶式排序","children":[]},{"level":3,"title":"3.3.15 基数排序","slug":"_3-3-15-基数排序","link":"#_3-3-15-基数排序","children":[]}]},{"level":2,"title":"3.4 Arrays工具类的使用","slug":"_3-4-arrays工具类的使用","link":"#_3-4-arrays工具类的使用","children":[]},{"level":2,"title":"3.5 数组中的常见异常","slug":"_3-5-数组中的常见异常","link":"#_3-5-数组中的常见异常","children":[]}],"git":{"updatedTime":1720499771000,"contributors":[{"name":"文铁铁~","email":"1179131421@qq.com","commits":1}]},"filePathRelative":"static/tang/java2/03_Java数组.md"}');export{R as comp,T as data};
