"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["476"],{4845:function(n,r,e){e.r(r),e.d(r,{default:function(){return l}});var s=e(85893),d=e(50065);function i(n){let r=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",strong:"strong",ul:"ul",li:"li",code:"code",pre:"pre"},(0,d.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"12-mysql中的数据类型",children:["12 MySQL中的数据类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#12-mysql中的数据类型",children:"#"})]}),"\n",(0,s.jsxs)(r.h2,{id:"121-概述",children:["12.1 概述",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#121-概述",children:"#"})]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"MySQL中的数据类型分类"}),"\n"]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"类型举例"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"整数类型"}),"\n",(0,s.jsx)(r.td,{children:"TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"浮点类型"}),"\n",(0,s.jsx)(r.td,{children:"FLOAT、DOUBLE"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"定点类型"}),"\n",(0,s.jsx)(r.td,{children:"DECIMAL"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"位类型"}),"\n",(0,s.jsx)(r.td,{children:"BIT"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"日期时间类型"}),"\n",(0,s.jsx)(r.td,{children:"YEAR、TIME、DATE、DATETIME、TIMESTAMP"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"文本字符串类型"}),"\n",(0,s.jsx)(r.td,{children:"CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"枚举类型"}),"\n",(0,s.jsx)(r.td,{children:"ENUM"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"集合类型"}),"\n",(0,s.jsx)(r.td,{children:"SET"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"二进制字符串类型"}),"\n",(0,s.jsx)(r.td,{children:"BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"JSON类型"}),"\n",(0,s.jsx)(r.td,{children:"JSON对象、JSON数组"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"空间数据类型"}),"\n",(0,s.jsxs)(r.td,{children:["单值类型：GEOMETRY、POINT、LINESTRING、POLYGON； ","集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTION"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"常见数据类型的属性"}),"\n"]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"MySQL关键字"}),"\n",(0,s.jsx)(r.th,{children:"含义"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"NULL"}),"\n",(0,s.jsx)(r.td,{children:"数据列可以包含NULL值"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"NOT NULL"}),"\n",(0,s.jsx)(r.td,{children:"数据列不允许有NULL值"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"DEFAULT"}),"\n",(0,s.jsx)(r.td,{children:"默认值"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"PRIMARY KEY"}),"\n",(0,s.jsx)(r.td,{children:"主键"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"AUTO_INCREMENT"}),"\n",(0,s.jsx)(r.td,{children:"自动递增，适用于整数类型"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"UNSIGNED"}),"\n",(0,s.jsx)(r.td,{children:"无符号"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"CHARACTER SET '字符集'"}),"\n",(0,s.jsx)(r.td,{children:"指定一个字符集"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"122-整型",children:["12.2 整型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#122-整型",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1221-类型介绍",children:["12.2.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1221-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"类型"})}),"\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"字节"})}),"\n",(0,s.jsx)(r.th,{children:"有符号数取值范围"}),"\n",(0,s.jsx)(r.th,{children:"无符号数取值范围"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"TINYINT"}),"\n",(0,s.jsx)(r.td,{children:"1"}),"\n",(0,s.jsx)(r.td,{children:"-128~127"}),"\n",(0,s.jsx)(r.td,{children:"0~255"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"SMALLINT"}),"\n",(0,s.jsx)(r.td,{children:"2"}),"\n",(0,s.jsx)(r.td,{children:"-32768~32767"}),"\n",(0,s.jsx)(r.td,{children:"0~65535"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"MEDIUMINT"}),"\n",(0,s.jsx)(r.td,{children:"3"}),"\n",(0,s.jsx)(r.td,{children:"-8388608~8388607"}),"\n",(0,s.jsx)(r.td,{children:"0~16777215"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"INT、INTEGER"}),"\n",(0,s.jsx)(r.td,{children:"4"}),"\n",(0,s.jsx)(r.td,{children:"-2147483648~2147483647"}),"\n",(0,s.jsx)(r.td,{children:"0~4294967295"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"BIGINT"}),"\n",(0,s.jsx)(r.td,{children:"8"}),"\n",(0,s.jsx)(r.td,{children:"-9223372036854775808~9223372036854775807"}),"\n",(0,s.jsx)(r.td,{children:"0~18446744073709551615"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1222-可选属性",children:["12.2.2 可选属性",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1222-可选属性",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"M"}),"：表示显示宽度，需要配合",(0,s.jsx)(r.code,{children:"ZEROFILL"}),"使用，表示当存储的数值不足M位时，用0进行填充"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"如果设置了显示宽度，插入的数据超过了宽度范围，但是仍在当前类型的取值范围内，该数值不会被截断或插入失败，而是能够正常插入。如："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\ncreate table int_test1(\r\n	f1 int(3)\r\n);\r\n\r\n# 插入数据\r\ninsert into int_test1(f1)\r\nvalues (1), (123), (1234); # 插入成功\r\n\r\n# 查询\r\nselect * from int_test1;\r\n# 结果显示：\r\n+---------------|\r\n|      f1       |\r\n+---------------|\r\n|             1 |\r\n|           123 |\r\n|          1234 |---------- 超过宽度3位，不会被截断\r\n+---------------|\r\n3 rows in set (0.00 sec)\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"从MySQL8.0.17开始，整数数据类型不推荐使用显示宽度属性。"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"UNSIGNED"}),"：无符号类型（表示非负数）。"]}),"\n",(0,s.jsx)(r.p,{children:"使用举例"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"create table int_test2(\r\n	f1 int unsigned\r\n)\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"ZEROFILL"}),"：0填充，需要配合",(0,s.jsx)(r.code,{children:"M"}),"属性使用，表示当不够",(0,s.jsx)(r.code,{children:"M"}),"位时，用0在左侧填充。"]}),"\n",(0,s.jsxs)(r.p,{children:["如果指定了某列是ZEROFILL，",(0,s.jsx)(r.strong,{children:"MySQL会自动为当前列添加UNSIGNED属性"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\ncreate table int_test3(\r\n	f1 int(3) ZEROFILL\r\n);\r\n\r\n# 插入数据\r\ninsert into int_test3(f1)\r\nvalues (1), (123), (1234); # 插入成功\r\n\r\n# 查询\r\nselect * from int_test3;\r\n# 结果显示：\r\n+---------------|\r\n|      f1       |\r\n+---------------|\r\n|           001 |---------- 不足宽度3位，在最左边开始用0填充\r\n|           123 |\r\n|          1234 |---------- 超过宽度3位，不会被截断\r\n+---------------|\r\n3 rows in set (0.00 sec)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1223-使用场景",children:["12.2.3 使用场景",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1223-使用场景",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"TINYINT"}),"：一般用于枚举数据，比如系统设定取值范围很小且固定的场景"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"SMALLINT"}),"：可以用于较小范围的统计数据"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"MEDIUMINT"}),"：用于较大整数的计算"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"INT、INTEGER"}),"：取值范围足够大，一般情况下不用考虑朝鲜问题，用的最多。比如商品的编号"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"BIGINT"}),"：处理特别巨大的整数时用到。如双十一的交易量，大型门户网站的点击量，证券公司衍生产品持仓等"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"小结"}),"：在评估使用哪种整数类型的时候，需要考虑",(0,s.jsx)(r.strong,{children:"存储空间"}),"和",(0,s.jsx)(r.strong,{children:"可靠性"}),"的平衡问题。",(0,s.jsx)(r.strong,{children:"首先在确保数据不会超过取值范围的前提下，再去考虑如何节省内存空间"}),"。"]}),"\n",(0,s.jsxs)(r.h2,{id:"123-浮点型",children:["12.3 浮点型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#123-浮点型",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1231-类型介绍",children:["12.3.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1231-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"类型"})}),"\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"字节数"})}),"\n",(0,s.jsx)(r.th,{children:"有符号取值范围"}),"\n",(0,s.jsx)(r.th,{children:"无符号取值范围"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"FLOAT"}),"\n",(0,s.jsx)(r.td,{children:"4"}),"\n",(0,s.jsxs)(r.td,{children:["-3.402823466E+38～-1.175494351E-38，","0，","1.175494351E-38～3.402823466E+38"]}),"\n",(0,s.jsxs)(r.td,{children:["0，","1.175494351E-38～3.402823466E+38"]}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"DOUBLE"}),"\n",(0,s.jsx)(r.td,{children:"8"}),"\n",(0,s.jsxs)(r.td,{children:["-1.7976931348623157E+308～-2.2250738585072014E-308，","0，","2.2250738585072014E-308~1.7976931348623157E+308"]}),"\n",(0,s.jsxs)(r.td,{children:["0，","2.2250738585072014E-308~1.7976931348623157E+308"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["除了FLOAT和DOUBLE之外，还有一种浮点类型--",(0,s.jsx)(r.code,{children:"REAL"}),"。REAL默认为DOUBLE。如果把SQL模式设定位启用",(0,s.jsx)(r.code,{children:"REAL_AS_FLOAT"}),"模式，REAL的默认值就变成了FLOAT。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:'# 启用REAL_AS_FLOAT模式\r\nSET sql_mode = "REAL_AS_FLOAT";\n'})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"浮点数无符号数取值范围相当于有符号数取值范围的一半，即相当于有符号数取值范围中大于等于0的部分"}),"。这是因为在MySQL中存储浮点数的格式为：",(0,s.jsx)(r.code,{children:"符号（S）"}),"、",(0,s.jsx)(r.code,{children:"尾数（M）"}),"、",(0,s.jsx)(r.code,{children:"阶码（E）"}),"，无论有没有符号，MySQL的浮点数在存储时都会保留出符号位。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"FLOAT和DOUBLE不用特意的声明为UNSIGNED"}),"，因为浮点数无符号数取值范围相当于有符号数取值范围的一半。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1232-数据精度说明",children:["12.3.2 数据精度说明",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1232-数据精度说明",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["MySQL允许使用",(0,s.jsx)(r.strong,{children:"非标准语法"}),"（其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么 用）：",(0,s.jsx)(r.code,{children:" FLOAT(M,D)"})," 或",(0,s.jsx)(r.code,{children:" DOUBLE(M,D) "}),"。这里，",(0,s.jsx)(r.strong,{children:"M称为精度"})," ，",(0,s.jsx)(r.strong,{children:"D称为标度"})," 。(M,D)中 ",(0,s.jsx)(r.strong,{children:"M=整数位+小数位，D=小数位"}),"。 D<=M<=255，0<=D<=30。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"FLOAT和DOUBLE类型在不指定(M,D)时，默认会按照实际的精度（由实际的硬件和操作系统决定） 来显示"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"不管是否显式设置了精度(M,D)，这里MySQL的处理方案如下："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["如果存储时，",(0,s.jsx)(r.strong,{children:"整数部分超出了范围，MySQL就会报错"}),"，不允许存这样的值"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["如果存储时，",(0,s.jsx)(r.strong,{children:"小数点部分若超出范围"}),"，就分以下情况："]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"若四舍五入后，整数部分没有超出范围，则只警告，但能成功操作并四舍五入删除多余的小数位后保存"}),"。"]}),"\n",(0,s.jsx)(r.p,{children:"例如在FLOAT(5,2)列内插入999.009，近似结果是999.01。"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"若四舍五入后，整数部分超出范围，则MySQL报错，并拒绝处理"}),"。"]}),"\n",(0,s.jsx)(r.p,{children:"如FLOAT(5,2)列内插入 999.995和-999.995都会报错。"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"从MySQL 8.0.17开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用"}),"，将来可能被移除。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"从MySQL 8.0.17开始，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了"}),"，将来也可能被移除。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1233-精度误差说明",children:["12.3.3 精度误差说明",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1233-精度误差说明",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"浮点数类型有个缺陷，就是不精准"}),"，详情见如下例子："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\nCREATE TABLE test_double2(\r\nf1 DOUBLE\r\n);\r\n\r\n# 插入数据\r\nINSERT INTO test_double2\r\nVALUES(0.47),(0.44),(0.19);\r\n\r\n# 查询以上数据的和\r\nmysql> SELECT SUM(f1)\r\n-> FROM test_double2;\r\n# 结果如下：\r\n+--------------------+\r\n| SUM(f1) |\r\n+--------------------+\r\n| 1.0999999999999999 |\r\n+--------------------+\r\n1 row in set (0.00 sec)\n"})}),"\n",(0,s.jsx)(r.p,{children:"例子中，对0.47、 0.44、 0.19三个数进行SUM()操作，结果返回1.0999999999999999，但是实际0.47 +  0.44 + 0.19 = 1.1，此时就产生了误差。"}),"\n",(0,s.jsx)(r.p,{children:"**为什么会存在这样的误差呢？**问题还是出在 MySQL 对浮点类型数据的存储方式上。 MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二 进制的方式来进行存储的。比如 9.625，用二进制来表达，就是 1001.101，或者表达成1.001101\xd72^3。如 果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范 围内进行四舍五入。"}),"\n",(0,s.jsxs)(r.p,{children:["因此，在编程中，如果用到浮点数，要特别注意误差问题，",(0,s.jsx)(r.strong,{children:"因为浮点数是不准确的，所以我们要避免使用“=”来 判断两个数是否相等"}),"。同时，",(0,s.jsx)(r.strong,{children:"在一些对精确度要求较高的项目中，千万不要使用浮点数"}),"，不然会导致结 果错误，甚至是造成不可挽回的损失。那么，MySQL 有没有精准的数据类型呢？当然有，这就是定点数 类型： ",(0,s.jsx)(r.code,{children:"DECIMAL"})," 。"]}),"\n",(0,s.jsxs)(r.h2,{id:"124-定点数",children:["12.4 定点数",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#124-定点数",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1241-类型介绍",children:["12.4.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1241-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"字节数"}),"\n",(0,s.jsx)(r.th,{children:"说明"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"DECIMAL(M,D)"}),"\n",(0,s.jsx)(r.td,{children:"M+2字节"}),"\n",(0,s.jsx)(r.td,{children:"有效范围由M和D决定。未指定M和D时，默认M=10，D=0"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"DECIMAL(M,D)，M=整数位数+小数位数，D=小数位数。M取值范围是[0,65]，D取值范围是[0,30]，且D<M。"}),"\n",(0,s.jsx)(r.li,{children:"DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。"}),"\n",(0,s.jsxs)(r.li,{children:["定点数在MySQL内部是以",(0,s.jsx)(r.strong,{children:"字符串"}),"的形式进行存储，这就决定了它一定是精准的。"]}),"\n",(0,s.jsxs)(r.li,{children:["存储数值时：","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"小数位不足会自动补0"}),"\n",(0,s.jsx)(r.li,{children:"首位数字为0自动忽略"}),"\n",(0,s.jsx)(r.li,{children:"整数超出存储范围会报错"}),"\n",(0,s.jsx)(r.li,{children:"小数超出会截断，发出警告，并按四舍五入处理"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1242-使用场景",children:["12.4.2 使用场景",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1242-使用场景",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在涉及对小数求和，特别是涉及到金额的时候，推荐使用DECIMAL。"}),"\n",(0,s.jsxs)(r.h1,{id:"125-位类型",children:["12.5 位类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#125-位类型",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1251-类型介绍",children:["12.5.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1251-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"字节数"}),"\n",(0,s.jsx)(r.th,{children:"说明"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"BIT(M)"}),"\n",(0,s.jsx)(r.td,{children:"约(M+7)/8个字节"}),"\n",(0,s.jsx)(r.td,{children:"M表示二进制的位数，取值范围是[1,64]。未指定M时，默认M=1"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"BIT类型中存储的是二进制值"}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1252-使用",children:["12.5.2 使用",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1252-使用",children:"#"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\nCREATE TABLE test_bit1(\r\nf1 BIT,		# 默认M为1，只能1位二进制数，转为十进制只能存储0和1，比1大时要报错\r\nf2 BIT(5),	# 能存储5位二进制数，转为十进制，最大能存储31，比31大时要报错\r\nf3 BIT(64)	# 能存储64位二进制数。且M最大只能是64\r\n);\r\n\r\n# 插入数据\r\nINSERT INTO test_bit1(f1) VALUES(1);\r\n\r\n# 插入数据报错：Data too long for column 'f1' at row 1\r\nINSERT INTO test_bit1(f1) VALUES(2);\r\n\r\n# 插入数据\r\nINSERT INTO test_bit1(f2)VALUES(30);\r\n\r\n# 查询数据\r\nSELECT * FROM test_bit1;\r\n# 在cmd控制台中，用十六进制的数示\r\n+------------+------------+------------+\r\n| f1         | f2         | f3         |\r\n+------------+------------+------------+\r\n| 0x01       | NULL       | NULL       |\r\n| NULL       | 0x1E       | NULL       |\r\n+------------+------------+------------+\r\n2 rows in set (0.00 sec)\r\n\r\n# 查询数据，分别使用二进制、十六进制、十进制的数来显示\r\nmysql> SELECT BIN(f2) '二进制',HEX(f2) '十六进制', f2+0 '十进制' FROM test_bit1;\r\n+-----------+--------------+-----------+\r\n| 二进制    | 十六进制     | 十进制    |\r\n+-----------+--------------+-----------+\r\n| NULL      | NULL         |      NULL |\r\n| 11110     | 1E           |        30 |\r\n+-----------+--------------+-----------+\r\n2 rows in set (0.00 sec)\r\n\n"})}),"\n",(0,s.jsxs)(r.h1,{id:"126-日期与时间",children:["12.6 日期与时间",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#126-日期与时间",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1261-类型介绍",children:["12.6.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1261-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"字节"}),"\n",(0,s.jsx)(r.th,{children:"描述"}),"\n",(0,s.jsx)(r.th,{children:"格式"}),"\n",(0,s.jsx)(r.th,{children:"最小值"}),"\n",(0,s.jsx)(r.th,{children:"最大值"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"YEAR"}),"\n",(0,s.jsx)(r.td,{children:"1"}),"\n",(0,s.jsx)(r.td,{children:"年"}),"\n",(0,s.jsx)(r.td,{children:"YYYY或YY"}),"\n",(0,s.jsx)(r.td,{children:"1901"}),"\n",(0,s.jsx)(r.td,{children:"2155"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"TIME"}),"\n",(0,s.jsx)(r.td,{children:"3"}),"\n",(0,s.jsx)(r.td,{children:"时分秒"}),"\n",(0,s.jsx)(r.td,{children:"HH:MM:SS"}),"\n",(0,s.jsx)(r.td,{children:"-838:59:59"}),"\n",(0,s.jsx)(r.td,{children:"838:59:59"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"DATE"}),"\n",(0,s.jsx)(r.td,{children:"3"}),"\n",(0,s.jsx)(r.td,{children:"年月日"}),"\n",(0,s.jsx)(r.td,{children:"YYYY-MM-DD"}),"\n",(0,s.jsx)(r.td,{children:"1000-01-01"}),"\n",(0,s.jsx)(r.td,{children:"9999-12-03"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"DATETIME"}),"\n",(0,s.jsx)(r.td,{children:"8"}),"\n",(0,s.jsx)(r.td,{children:"年月日时分秒"}),"\n",(0,s.jsx)(r.td,{children:"YYYY-MM-DD HH:MM:SS"}),"\n",(0,s.jsx)(r.td,{children:"1000-01-01 00:00:00"}),"\n",(0,s.jsx)(r.td,{children:"9999-12-31 23:59:59"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"TIMESTAMP"}),"\n",(0,s.jsx)(r.td,{children:"4"}),"\n",(0,s.jsx)(r.td,{children:"带时区的年月日时分秒"}),"\n",(0,s.jsx)(r.td,{children:"YYYY-MM-DD HH:MM:SS"}),"\n",(0,s.jsx)(r.td,{children:"1970-01-01 00:00:00 UTC"}),"\n",(0,s.jsx)(r.td,{children:"2038-01-19 03:14:07UTC"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1262-year",children:["12.6.2 YEAR",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1262-year",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["以",(0,s.jsx)(r.strong,{children:"4位"}),"字符串或数字格式表示，格式为",(0,s.jsx)(r.code,{children:"YYYY"}),"，最小值为1901，最大值为2155"]}),"\n",(0,s.jsxs)(r.li,{children:["以",(0,s.jsx)(r.strong,{children:"2位"}),"字符串或数字格式表示，最小值为00，最大值为99","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["当取值为",(0,s.jsx)(r.code,{children:"01~69"}),"，表示",(0,s.jsx)(r.code,{children:"2001~2069"})]}),"\n",(0,s.jsxs)(r.li,{children:["当取值为",(0,s.jsx)(r.code,{children:"70~99"}),"，表示",(0,s.jsx)(r.code,{children:"1970~1999"})]}),"\n",(0,s.jsxs)(r.li,{children:["当取值为",(0,s.jsx)(r.strong,{children:"整数"}),"的",(0,s.jsx)(r.code,{children:"0"}),"或者",(0,s.jsx)(r.code,{children:"00"}),"，表示是",(0,s.jsx)(r.code,{children:"0000"})]}),"\n",(0,s.jsxs)(r.li,{children:["当取值是",(0,s.jsx)(r.strong,{children:"字符串"}),(0,s.jsx)(r.code,{children:"0"}),"或者",(0,s.jsx)(r.code,{children:"00"}),"，表示是",(0,s.jsx)(r.code,{children:"2000"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1263-time",children:["12.6.3 TIME",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1263-time",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"使用带有冒号的字符串"}),"，如",(0,s.jsx)(r.code,{children:"D HH:MM:SS"}),"、",(0,s.jsx)(r.code,{children:"HH:MM:SS"}),"、",(0,s.jsx)(r.code,{children:"HH:MM"}),"、",(0,s.jsx)(r.code,{children:"D HH:MM"}),"、",(0,s.jsx)(r.code,{children:"D HH"}),"、",(0,s.jsx)(r.code,{children:"SS"}),"格式。其中D表示天，取值范围是[0,34]，插入时，D会被转化为小时"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"使用不带冒号的字符串或者数字"}),"，如",(0,s.jsx)(r.code,{children:"HHMMSS"}),"。","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"如果插入的字符串或者数字不合法，会将其转化为00:00:00存储"}),"\n",(0,s.jsxs)(r.li,{children:["假如插入的是1210，存储后的时间是",(0,s.jsx)(r.strong,{children:"00:12:10"}),"，而不是12:10:00"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["使用",(0,s.jsx)(r.code,{children:"CURRENT_TIME()"})," 、",(0,s.jsx)(r.code,{children:"CURTIME()"}),"或者",(0,s.jsx)(r.code,{children:" NOW()"}),"等，可以",(0,s.jsx)(r.strong,{children:"插入当前系统时间"})]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1264-date",children:["12.6.4 DATE",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1264-date",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"YYYY-MM-DD"}),"或",(0,s.jsx)(r.code,{children:"YYYYMMDD"}),"格式。最小取值1000-01-01，最大取值9999-12-03。YYYYMMDD格式会被转化为YYYY-MM-DD"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"YY-MM-DD"}),"或",(0,s.jsx)(r.code,{children:"YYMMDD"}),"格式。","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"当年份(YY)取值为[00,69]，会被转化为[2000,2069]"}),"\n",(0,s.jsx)(r.li,{children:"当年份(YY)取值为[70,99]，会被转化为[1970,1999]"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["使用",(0,s.jsx)(r.code,{children:"CURRENT_DATE()"})," 、",(0,s.jsx)(r.code,{children:"CURDATE()"}),"或者",(0,s.jsx)(r.code,{children:" NOW()"}),"等，可以",(0,s.jsx)(r.strong,{children:"插入当前系统日期"})]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1265-datetime",children:["12.6.5 DATETIME",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1265-datetime",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"YYYY-MM-DD HH:MM:SS"}),"或",(0,s.jsx)(r.code,{children:"YYYYMMDDHHMMSS"}),"格式。最小取值1000-01-01 00:00:00，最大取值9999-12-03 23:59:59"]}),"\n",(0,s.jsxs)(r.li,{children:["使用函数",(0,s.jsx)(r.code,{children:"CURRENT_TIMESTAMP()"}),"和",(0,s.jsx)(r.code,{children:"NOW()"}),"等，可以",(0,s.jsx)(r.strong,{children:"插入系统的当前日期和 时间"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1266-timestamp",children:["12.6.6 TIMESTAMP",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1266-timestamp",children:"#"})]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"TIMESTAMP VS DATETIME"}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"TIMESTAMP只需要4个字节，存储的时间范围比DATETIME小很多。只能存储 “1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”之间的时间。其中，UTC表示世界统一时间，也叫 作世界标准时间。"}),"\n",(0,s.jsx)(r.li,{children:"底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离1970-1-1 0:0:0 0毫秒的毫秒值。"}),"\n",(0,s.jsx)(r.li,{children:"两个日期比较大小或日期计算时，TIMESTAMP更方便、更快。"}),"\n",(0,s.jsx)(r.li,{children:"**使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。**而DATETIME不同时区显示的是同一时间。"}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"127-文本字符串类型",children:["12.7 文本字符串类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#127-文本字符串类型",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1271-类型介绍",children:["12.7.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1271-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"长度范围"}),"\n",(0,s.jsx)(r.th,{children:"长度单位"}),"\n",(0,s.jsx)(r.th,{children:"占用的存储空间"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"CHAR(M)"}),"\n",(0,s.jsx)(r.td,{children:"[0, 255]"}),"\n",(0,s.jsx)(r.td,{children:"字符"}),"\n",(0,s.jsx)(r.td,{children:"M个字符"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"VARCHAR(M)"}),"\n",(0,s.jsx)(r.td,{children:"[0, 65535]"}),"\n",(0,s.jsx)(r.td,{children:"字节"}),"\n",(0,s.jsxs)(r.td,{children:["MySQL4.0之前，M的单位是字节；","MySQL5.0之后，M的单位是字符。","最大的字符数需要通过编码来算，按照不超过行65535个字节"]}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"TINYTEXT"}),"\n",(0,s.jsx)(r.td,{children:"[0, 255]"}),"\n",(0,s.jsx)(r.td,{children:"字节"}),"\n",(0,s.jsx)(r.td,{children:"L+2个字节，最多能存255/3=85个UTF8编码的字符"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"TEXT"}),"\n",(0,s.jsx)(r.td,{children:"[0, 65535]"}),"\n",(0,s.jsx)(r.td,{children:"字节"}),"\n",(0,s.jsx)(r.td,{children:"L+2个字节，最多能存65535/3个UTF8编码的字符"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"MEDIUMTEXT"}),"\n",(0,s.jsx)(r.td,{children:"[0, 16777215]"}),"\n",(0,s.jsx)(r.td,{children:"字节"}),"\n",(0,s.jsx)(r.td,{children:"L+3个字节，最多能存16777215/3个UTF8编码的字符"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"LONGTEXT"}),"\n",(0,s.jsx)(r.td,{children:"[0, 4294967295]"}),"\n",(0,s.jsx)(r.td,{children:"字节"}),"\n",(0,s.jsx)(r.td,{children:"L+4个字节，最多能存4294967295/3个UTF8编码的字符"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1272-char与varchar",children:["12.7.2 CHAR与VARCHAR",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1272-char与varchar",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"CHAR和VARCHAR类型都可以存储比较短的字符串。"}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"CHAR类型"}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"CHAR(M)是固定长度，一般需要先指定字符串的长度。如果不指定，默认长度是1个字符"}),"\n",(0,s.jsxs)(r.li,{children:["如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在",(0,s.jsx)(r.strong,{children:"右侧填充空格"}),"已达到指定的长度。"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"当检索时，CHAR类型的字段会去除尾部的空格。"})}),"\n",(0,s.jsxs)(r.li,{children:["定义CHAR类型的字段时，声明的",(0,s.jsx)(r.strong,{children:"字段长度即为"}),"CHAR类型字段所占的存储空间的",(0,s.jsx)(r.strong,{children:"字符数"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"VARCHAR类型"}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["VARCHAR(M) 定义时，",(0,s.jsx)(r.strong,{children:"必须指定长度M"}),"，否则报错。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"MySQL4.0版本以下，varchar(20)：指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字 节） ；MySQL5.0版本以上，varchar(20)：指的是20字符。"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"检索VARCHAR类型的字段数据时，会保留数据尾部的空格"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"VARCHAR类型的字段所占用的存储空间为字符串实际长度加1或2个字节。"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"VARCHAR最大存储长度的计算理论："}),"\n",(0,s.jsx)(r.p,{children:"虽然VARCHAR类型最大长度是65535个字节，但是真实存储的时候，并不能存这么多数据。VARCHAR的真实存储长度，需要按照如下规则计算："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"①一行记录的最大字节数不得超过65535字节"}),"；"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"②VARCHAR本身需要1到2个字节来存储数据长度"}),"（如果列声明的长度超过255，则使用2个字节来存储长度，否则1个）；"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"③VARCHAR字段允许为空时，NULL值标识需要1个字节"}),"。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"VARCHAR最大存储长度的计算例子："}),"\n",(0,s.jsxs)(r.p,{children:["以MySQL8.0为例，以下表都使用 ",(0,s.jsx)(r.strong,{children:"utf8mb4 编码，一个字符最大能占用 4 个字节"}),"。"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["例子1：",(0,s.jsx)(r.code,{children:"CREATE TABLE t1 (name varchar(M) NULL) CHARSET=utf8mb4;"}),"，其中M最大是多少？"]}),"\n",(0,s.jsx)(r.p,{children:"M = (行最大字节数 -  数据的长度 - NULL标识) / utf8mb4 编码最大字节数"}),"\n",(0,s.jsx)(r.p,{children:"​	 = (65535 - 2 - 1) / 4 = 16383"}),"\n",(0,s.jsx)(r.p,{children:"**结论：**M最大为16383"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["例子2：",(0,s.jsx)(r.code,{children:"CREATE TABLE t2 (name varchar(M) NOT NULL) CHARSET=utf8mb4;"}),"，其中M最大是多少？"]}),"\n",(0,s.jsx)(r.p,{children:"M = (行最大字节数 -  数据的长度) / utf8mb4 编码最大字节数"}),"\n",(0,s.jsx)(r.p,{children:"​	 = (65535 - 2) / 4 = 16383.25"}),"\n",(0,s.jsx)(r.p,{children:"​	对16383.25向下取整，得M=16383"}),"\n",(0,s.jsx)(r.p,{children:"**结论：**M最大为16383"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["例子3：",(0,s.jsx)(r.code,{children:"CREATE TABLE t3 (name varchar(M) NULL, age int) CHARSET=utf8mb4;"}),"，其中M最大是多少？"]}),"\n",(0,s.jsx)(r.p,{children:"M = (行最大字节数 -  数据的长度 - NULL标识 - int字段所占字节) / utf8mb4 编码最大字节数"}),"\n",(0,s.jsx)(r.p,{children:"​	 = (65535 - 2 - 1 - 4) / 4 = 16382"}),"\n",(0,s.jsx)(r.p,{children:"**结论：**M最大为16382"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"CHAR 和 VARCHAR 的对比（MySQL5.0以上）"}),"\n"]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{}),"\n",(0,s.jsx)(r.th,{children:"char(M)"}),"\n",(0,s.jsx)(r.th,{children:"varchar(M)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"最大长度"}),"\n",(0,s.jsx)(r.td,{children:"M最大是255个字符"}),"\n",(0,s.jsx)(r.td,{children:"M最大值需要按照一定规则计算（见上）"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"是否定长"}),"\n",(0,s.jsx)(r.td,{children:"定长，不足的部分尾部用空格补齐"}),"\n",(0,s.jsx)(r.td,{children:"不定长，保留实际字符"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"空间使用"}),"\n",(0,s.jsx)(r.td,{children:"可能浪费"}),"\n",(0,s.jsx)(r.td,{children:"更加节省"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"查找效率"}),"\n",(0,s.jsx)(r.td,{children:"高"}),"\n",(0,s.jsx)(r.td,{children:"低"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"尾部空格"}),"\n",(0,s.jsx)(r.td,{children:"插入时会被忽略"}),"\n",(0,s.jsx)(r.td,{children:"可以正常插入"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"CHAR 和 VARCHAR 的适用场景："}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"存储很短的信息，建议使用char。如门牌号"}),"\n",(0,s.jsx)(r.p,{children:"假如使用varchar，还需要使用1个字节存储信息长度，得不偿失"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"存储固定长度的信息，建议使用char。如uuid"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"存储需要频繁改变的信息，建议使用char。"}),"\n",(0,s.jsx)(r.p,{children:"varchar每次存储都需要额外的计算长度等信息，如果频繁改变，需要很多的精力用于计算"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"考虑具体存储引擎中的情况："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"MyISAM"}),"：",(0,s.jsx)(r.strong,{children:"最好使用char"}),"。这样使得整个表静态化，从而使数据检索更快，用空间换时间"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"MEMORY"}),"：无论使用char和varchar，",(0,s.jsx)(r.strong,{children:"底层都是作为char类型处理的"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"InnoDB"}),"：建议使用varchar。InnoDB数据表，内部的行存储格式并没有区分固定长度和可变长度列，所有数据行都是用指向数据列值的头指针，而且主要影响性能的因素是数据行使用的存储总量。由于char平均占用的空间多于varchar，所以",(0,s.jsx)(r.strong,{children:"处理简短并且固定长度的使用char，其他考虑varchar"}),"。这样节省空间，对磁盘I/O和数据存储总量比较好"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"附：字符、字节、位之间的关系"}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"**位：**数据存储的最小单位。每个二进制数字0或者1就是1个位；"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"**字节：**8个位构成一个字节；"}),"\n",(0,s.jsx)(r.p,{children:"即：1 byte (字节)= 8 bit(位)；"}),"\n",(0,s.jsx)(r.p,{children:"​		1 KB = 1024 B(字节)；"}),"\n",(0,s.jsx)(r.p,{children:"​		1 MB = 1024 KB;  (2^10 B)\r\n​		1 GB = 1024 MB; (2^20 B)\r\n​		1 TB = 1024 GB;  (2^30 B)"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"字符："})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"a、A、中、+、*、の......均表示1个字符"}),"\n",(0,s.jsxs)(r.li,{children:["一般 ",(0,s.jsx)(r.strong,{children:"utf-8"})," 编码下，一个",(0,s.jsx)(r.strong,{children:"汉字字符"}),"占用 ",(0,s.jsx)(r.strong,{children:"3 个 字节"}),"；",(0,s.jsx)(r.strong,{children:"数字"}),"属于汉字，和汉字占用一样字节"]}),"\n",(0,s.jsxs)(r.li,{children:["一般 ",(0,s.jsx)(r.strong,{children:"utf8mb4 ** 编码下，一个"}),"汉字字符**占用 ",(0,s.jsx)(r.strong,{children:"4 个 字节"})]}),"\n",(0,s.jsxs)(r.li,{children:["一般 ",(0,s.jsx)(r.strong,{children:"gbk"})," 编码下，一个",(0,s.jsx)(r.strong,{children:"汉字字符"}),"占用 ",(0,s.jsx)(r.strong,{children:"2 个 字节"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1273-text类型",children:["12.7.3 TEXT类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1273-text类型",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"TEXT类型分为4种，分别为TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT"}),"\n",(0,s.jsx)(r.li,{children:"在向TEXT类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。与VARCHAR类型相同"}),"\n",(0,s.jsxs)(r.li,{children:["由于实际存储的长度不确定，",(0,s.jsx)(r.strong,{children:"MySQL 不允许 TEXT 类型的字段做主键"})]}),"\n",(0,s.jsxs)(r.li,{children:["开发中的经验：","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["TEXT文本类型，可以存比较大的文本段，",(0,s.jsx)(r.strong,{children:"搜索速度稍慢"}),"，因此如果不是特别大的内容，建议使用CHAR， VARCHAR来代替"]}),"\n",(0,s.jsxs)(r.li,{children:["TEXT类型",(0,s.jsx)(r.strong,{children:"不用加默认值"}),"，加了也没用"]}),"\n",(0,s.jsxs)(r.li,{children:["text和blob类型的数据删除后容易导致 “空洞”，使得文件碎片比较多，所以",(0,s.jsx)(r.strong,{children:"频繁使用的表不建议包含TEXT类型字段"}),"，建议单独分出去，单独用 一个表"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"128-enum类型",children:["12.8 ENUM类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#128-enum类型",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1281-类型介绍",children:["12.8.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1281-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"长度"}),"\n",(0,s.jsx)(r.th,{children:"长度范围"}),"\n",(0,s.jsx)(r.th,{children:"占用的存储空间"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"ENUM"}),"\n",(0,s.jsx)(r.td,{children:"L"}),"\n",(0,s.jsx)(r.td,{children:"1<=L<=65535"}),"\n",(0,s.jsx)(r.td,{children:"1或2个字节"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["ENUM类型的",(0,s.jsx)(r.strong,{children:"取值范围需要在定义字段时进行指定"}),"。"]}),"\n",(0,s.jsxs)(r.li,{children:["设置字段值时，ENUM 类型",(0,s.jsx)(r.strong,{children:"只允许从成员中选取单个值"}),"，不能一次选取多个值。"]}),"\n",(0,s.jsx)(r.li,{children:"当ENUM类型包含1～255个成员时，需要1个字节的存储空间"}),"\n",(0,s.jsx)(r.li,{children:"当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。"}),"\n",(0,s.jsx)(r.li,{children:"ENUM类型的成员个数的上限为65535个。"}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1282-使用",children:["12.8.2 使用",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1282-使用",children:"#"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\nCREATE TABLE test_enum(\r\nseason ENUM('春','夏','秋','冬','unknow')\r\n);\r\n\r\n# 插入数据--成功\r\nINSERT INTO test_enum VALUES('春'),('秋');\r\n\r\n# 允许按照角标的方式获取指定索引位置的枚举值\r\nINSERT INTO test_enum VALUES('1'),(3);\r\n\r\n# 忽略大小写。最终插入的是大写还是小写，以定义字段时候的值为准\r\nINSERT INTO test_enum VALUES('UNKNOW');\r\n\r\n# 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的\r\nINSERT INTO test_enum VALUES(NULL);\r\n\r\n# 不允许插入不在定义时指定的字段。Data truncated for column 'season' at row 1\r\nINSERT INTO test_enum VALUES('ab');\r\n\r\n# 只能插入单个值。Data truncated for column 'season' at row 1\r\nINSERT INTO test_enum VALUES('春,秋');\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"129-set类型",children:["12.9 SET类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#129-set类型",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1291-类型介绍",children:["12.9.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1291-类型介绍",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下："}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"成员个数范围（L表示实际成员个数）"}),"\n",(0,s.jsx)(r.th,{children:"占用的存储空间"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"1 <= L <= 8"}),"\n",(0,s.jsx)(r.td,{children:"1个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"9 <= L <= 16"}),"\n",(0,s.jsx)(r.td,{children:"2个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"17 <= L <= 24"}),"\n",(0,s.jsx)(r.td,{children:"3个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"25 <= L <= 32"}),"\n",(0,s.jsx)(r.td,{children:"4个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"33 <= L <= 64"}),"\n",(0,s.jsx)(r.td,{children:"8个字节"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"SET表示一个字符串对象，可以包含0个或多个成员，成员上线为64"}),"\n",(0,s.jsx)(r.li,{children:"SET存储多个成员时，成员之间用英文逗号隔开"}),"\n",(0,s.jsx)(r.li,{children:"SET类型在存储数据时成员个数越多，其占用的存储空间越大。"}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"1292-使用",children:["12.9.2 使用",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1292-使用",children:"#"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\nCREATE TABLE test_set(\r\n	s SET ('A', 'B', 'C')\r\n);\r\n\r\n# 可以插入0个或多个数据\r\nINSERT INTO test_set (s) VALUES ('A'), ('A,B');\r\n# 插入时，忽略大小写。最终插入结果以定义的时候为准\r\nINSERT INTO test_set (s) VALUES ('a')\r\n\r\n#插入重复的SET类型成员时，MySQL会自动删除重复的成员\r\nINSERT INTO test_set (s) VALUES ('A,B,C,A');\r\n\r\n#向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。Data truncated for column 's' at row 1\r\nINSERT INTO test_set (s) VALUES ('A,B,C,D');\r\n\r\n# 当SET类型的字段没有声明为NOT NULL时，插入NULL也是有效的\r\nINSERT INTO test_set (s) VALUES (NULL);\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"1210-二进制字符串类型",children:["12.10 二进制字符串类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1210-二进制字符串类型",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"12101-类型介绍",children:["12.10.1 类型介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#12101-类型介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"MySQL中的二进制字符串类型主要存储一些二进制数据，比如可以存储图片、音频和视频等二进制数 据。"}),"\n",(0,s.jsxs)(r.li,{children:["MySQL中支持的二进制字符串类型主要包括",(0,s.jsx)(r.code,{children:"BINARY"}),"、",(0,s.jsx)(r.code,{children:"VARBINARY"}),"、",(0,s.jsx)(r.code,{children:"TINYBLOB"}),"、",(0,s.jsx)(r.code,{children:"BLOB"}),"、",(0,s.jsx)(r.code,{children:"MEDIUMBLOB"})," 和",(0,s.jsx)(r.code,{children:" LONGBLOB"}),"类型。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"12102-binary与varbinary",children:["12.10.2 BINARY与VARBINARY",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#12102-binary与varbinary",children:"#"})]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"类型介绍"}),"\n"]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"特点"}),"\n",(0,s.jsx)(r.th,{children:"值的长度"}),"\n",(0,s.jsx)(r.th,{children:"占用空间"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"BINARY(M)"}),"\n",(0,s.jsx)(r.td,{children:"固定长度"}),"\n",(0,s.jsx)(r.td,{children:"M （0 <= M <= 255）"}),"\n",(0,s.jsx)(r.td,{children:"M个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"VARBINARY(M)"}),"\n",(0,s.jsx)(r.td,{children:"可变长度"}),"\n",(0,s.jsx)(r.td,{children:"M（0 <= M <= 65535）"}),"\n",(0,s.jsx)(r.td,{children:"M+1个字节"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"BINARY和VARBINARY类似于CHAR和VARCHAR，只是它们存储的是二进制字符串"}),"\n",(0,s.jsx)(r.li,{children:"BINARY (M)为固定长度的二进制字符串，M表示最多能存储的字节数。如果未 指定(M)，表示只能存储 1个字节"}),"\n",(0,s.jsx)(r.li,{children:"BINARY(M)如果字段值不足(M)个字 节，将在右边填充'\\0'以补齐指定长度"}),"\n",(0,s.jsxs)(r.li,{children:["VARBINARY (M)为可变长度的二进制字符串，M表示最多能存储的字节数，",(0,s.jsx)(r.strong,{children:"总字节数不能超过行的字节长 度限制65535"}),"，另外",(0,s.jsx)(r.strong,{children:"还要考虑额外字节开销"}),"，VARBINARY类型的数据除了存储数据本身外，还需要1或2个字节来存储数据的字节数"]}),"\n",(0,s.jsxs)(r.li,{children:["VARBINARY类型",(0,s.jsx)(r.strong,{children:"必须指定(M)"})]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\nCREATE TABLE test_binary1(\r\n	f1 BINARY,\r\n	f2 BINARY(3),\r\n#	f3 VARBINARY,\r\n	f4 VARBINARY(10)\r\n);\r\n\r\n# 插入成功\r\nINSERT INTO test_binary1(f1,f2) VALUES('a','a');\r\n\r\n# 插入成功，但是查询出来是乱码\r\nINSERT INTO test_binary1(f2) VALUES('一');\r\n\r\n# 插入成功\r\nINSERT INTO test_binary1(f2,f4) VALUES('ab','ab');\r\n\r\n# 在f2、f4插入'ab'时，对应的LENGTH(f2) = 3, LENGTH(f4) = 2\r\nSELECT LENGTH(f2), LENGTH(f4) FROM test_binary1;\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"12103-blob",children:["12.10.3 BLOB",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#12103-blob",children:"#"})]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"类型介绍"}),"\n"]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:"类型"}),"\n",(0,s.jsx)(r.th,{children:"长度范围"}),"\n",(0,s.jsx)(r.th,{children:"占用空间"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"TINYBLOB"}),"\n",(0,s.jsx)(r.td,{children:"0 <= L <= 255"}),"\n",(0,s.jsx)(r.td,{children:"L + 1 个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"BLOB"}),"\n",(0,s.jsx)(r.td,{children:"0 <= L <= 65535（相当于64KB）"}),"\n",(0,s.jsx)(r.td,{children:"L + 2 个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"MEDIUMBLOB"}),"\n",(0,s.jsx)(r.td,{children:"0 <= L <= 16777215 （相当于16MB）"}),"\n",(0,s.jsx)(r.td,{children:"L + 3 个字节"}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:"LONGBLOB"}),"\n",(0,s.jsx)(r.td,{children:"0 <= L <= 4294967295（相当于4GB）"}),"\n",(0,s.jsx)(r.td,{children:"L + 4个字节"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["BLOB是一个",(0,s.jsx)(r.strong,{children:"二进制大对象"})," ，可以容纳可变数量的数据。"]}),"\n",(0,s.jsxs)(r.li,{children:["BLOB类型可以存储一个二进制的大对象，比如",(0,s.jsx)(r.strong,{children:"图片"})," 、",(0,s.jsx)(r.strong,{children:"音频"}),"和",(0,s.jsx)(r.strong,{children:"视频"}),"等"]}),"\n",(0,s.jsx)(r.li,{children:"但是实际工作中，图片等一般都保存在服务器的磁盘上，数据库存储的是图片等的访问路径"}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:"# 创建表\r\nCREATE TABLE test_blob1(\r\n    id INT,\r\n    img MEDIUMBLOB\r\n);\n"})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"TEXT和BLOB的使用注意事项"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"在使用text和blob字段类型时要注意以下几点，以便更好的发挥数据库的性能。"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:['① 在执行了大量的删除或更新操作的时候，删除text和blob类型的值会在数据表中留下很大的"',(0,s.jsx)(r.code,{children:"空洞"}),'"，以后填入这些"空洞"的记录可能长度不同。为了提高性能，建议定期使用',(0,s.jsx)(r.code,{children:"OPTIMIZE TABLE"}),"功能对这类表进行",(0,s.jsx)(r.strong,{children:"碎片整理"})," 。"]}),"\n",(0,s.jsxs)(r.li,{children:["② 尽量",(0,s.jsx)(r.strong,{children:"避免检索大型的BLOB或TEXT值"}),"。如果需要对大文本字段进行模糊查询，MySQL 提供了",(0,s.jsx)(r.code,{children:"前缀索引"})," 。"]}),"\n",(0,s.jsxs)(r.li,{children:["③ 把BLOB或TEXT列",(0,s.jsx)(r.strong,{children:"分离到单独的表"})," 中。这样做的好处是：减少主表中的碎片 ，并且当主数据表上运行 SELECT * 查询的时候不会通过 网络传输大量的BLOB或TEXT值。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"1211-json类型",children:["12.11 JSON类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1211-json类型",children:"#"})]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-mysql",children:'# 创建表\r\nCREATE TABLE test_json (\r\n	f1 JSON\r\n);\r\n\r\n# 插入数据\r\nINSERT INTO test_json VALUES (\'{"name": "tth", "age": 18, "address": {"province": "山东", "city": "济南"}}\')\r\n# 查询\r\nSELECT * FROM test_json;\r\n\r\n# 查询json类型字段中的具体属性的值\r\n# 方法一：使用->\r\nSELECT f1 -> \'$.name\' NAME, f1 -> \'$.age\' age, f1 -> \'$.address.province\' province, f1 ->\'$.address.city\' city\r\nFROM test_json; # NAME、province、city中带有""\r\n# 方法二：使用->>\r\nSELECT f1 ->> \'$.name\' NAME, f1 ->> \'$.age\' age, f1 ->> \'$.address.province\' province, f1 ->>\'$.address.city\' city\r\nFROM test_json; # NAME、province、city中不带""\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"1212-空间类型",children:["12.12 空间类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1212-空间类型",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"略"}),"\n",(0,s.jsxs)(r.h2,{id:"1213-小结",children:["12.13 小结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1213-小结",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"阿里巴巴《Java开发手册》之MySQL数据库："})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"任何字段如果为非负数，必须是 UNSIGNED"}),"\n",(0,s.jsxs)(r.li,{children:["【 ",(0,s.jsx)(r.strong,{children:"强制"})," 】小数类型为 DECIMAL，禁止使用 FLOAT 和 DOUBLE。","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"说明：在存储的时候，FLOAT 和 DOUBLE 都存在精度损失的问题，很可能在比较值的时候，得 到不正确的结果。"}),"\n",(0,s.jsx)(r.li,{children:"如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并 分开存储。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["【 ",(0,s.jsx)(r.strong,{children:"强制"})," 】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。"]}),"\n",(0,s.jsxs)(r.li,{children:["【 ",(0,s.jsx)(r.strong,{children:"强制"})," 】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大 于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。"]}),"\n"]})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,d.ah)(),n.components);return r?(0,s.jsx)(r,{...n,children:(0,s.jsx)(i,{...n})}):i(n)}let l=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["tang%2Fmysql%2F12_MySQL%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]={toc:[{text:"12.1 概述",id:"121-概述",depth:2},{text:"12.2 整型",id:"122-整型",depth:2},{text:"12.2.1 类型介绍",id:"1221-类型介绍",depth:3},{text:"12.2.2 可选属性",id:"1222-可选属性",depth:3},{text:"12.2.3 使用场景",id:"1223-使用场景",depth:3},{text:"12.3 浮点型",id:"123-浮点型",depth:2},{text:"12.3.1 类型介绍",id:"1231-类型介绍",depth:3},{text:"12.3.2 数据精度说明",id:"1232-数据精度说明",depth:3},{text:"12.3.3 精度误差说明",id:"1233-精度误差说明",depth:3},{text:"12.4 定点数",id:"124-定点数",depth:2},{text:"12.4.1 类型介绍",id:"1241-类型介绍",depth:3},{text:"12.4.2 使用场景",id:"1242-使用场景",depth:3},{text:"12.5.1 类型介绍",id:"1251-类型介绍",depth:3},{text:"12.5.2 使用",id:"1252-使用",depth:3},{text:"12.6.1 类型介绍",id:"1261-类型介绍",depth:3},{text:"12.6.2 YEAR",id:"1262-year",depth:3},{text:"12.6.3 TIME",id:"1263-time",depth:3},{text:"12.6.4 DATE",id:"1264-date",depth:3},{text:"12.6.5 DATETIME",id:"1265-datetime",depth:3},{text:"12.6.6 TIMESTAMP",id:"1266-timestamp",depth:3},{text:"12.7 文本字符串类型",id:"127-文本字符串类型",depth:2},{text:"12.7.1 类型介绍",id:"1271-类型介绍",depth:3},{text:"12.7.2 CHAR与VARCHAR",id:"1272-char与varchar",depth:3},{text:"12.7.3 TEXT类型",id:"1273-text类型",depth:3},{text:"12.8 ENUM类型",id:"128-enum类型",depth:2},{text:"12.8.1 类型介绍",id:"1281-类型介绍",depth:3},{text:"12.8.2 使用",id:"1282-使用",depth:3},{text:"12.9 SET类型",id:"129-set类型",depth:2},{text:"12.9.1 类型介绍",id:"1291-类型介绍",depth:3},{text:"12.9.2 使用",id:"1292-使用",depth:3},{text:"12.10 二进制字符串类型",id:"1210-二进制字符串类型",depth:2},{text:"12.10.1 类型介绍",id:"12101-类型介绍",depth:3},{text:"12.10.2 BINARY与VARBINARY",id:"12102-binary与varbinary",depth:3},{text:"12.10.3 BLOB",id:"12103-blob",depth:3},{text:"12.11 JSON类型",id:"1211-json类型",depth:2},{text:"12.12 空间类型",id:"1212-空间类型",depth:2},{text:"12.13 小结",id:"1213-小结",depth:2}],title:"12.6 日期与时间",frontmatter:{}}}}]);