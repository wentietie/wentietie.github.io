"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["1314"],{74017:function(r,n,e){e.r(n),e.d(n,{default:()=>l});var i=e("85893"),t=e("50065");let a=e.p+"static/image/4.097ea67e.png";function s(r){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",ul:"ul",li:"li",h3:"h3",div:"div",pre:"pre",code:"code",h4:"h4",h5:"h5",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,t.ah)(),r.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"写一个小demo",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写一个小demo",children:"#"}),"写一个小demo"]}),"\n",(0,i.jsxs)(n.p,{children:["实现如下页面：\r\n",(0,i.jsx)(n.img,{alt:"image.png",src:a})]}),"\n",(0,i.jsxs)(n.h2,{id:"分析",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分析",children:"#"}),"分析"]}),"\n",(0,i.jsx)(n.p,{children:"在上图中，我们将页面内的结构抽象三大部分。其中，第1部分为轮播图部分，第2部分为赋能套件部分，第3部分为入门教程部分。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"顶部的标题部分"}),"\n",(0,i.jsx)(n.li,{children:"轮播图部分：可自动播放、展示多张图片的组件，命名为Banner，每一个元素为BannerItem"}),"\n",(0,i.jsx)(n.li,{children:"赋能套件部分：横向可滑动的组件，命名为Enablement ，由多个EnablementItem组成。"}),"\n",(0,i.jsx)(n.li,{children:"入门教程部分：纵向可滑动的组件，命名为Tutorial ，由多个TutorialItem组成。"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"实现",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现",children:"#"}),"实现"]}),"\n",(0,i.jsxs)(n.h3,{id:"页面整体布局",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面整体布局",children:"#"}),"页面整体布局"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"容器"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\n页面整体布局沿垂直方向布局，根容器使用Column。Column容器可以使组件内的元素沿垂直方向布局。"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Entry\r\n@Component\r\nstruct Index {\r\n  @State message: string = '快速入门';\r\n\r\n  build() {\r\n    Column() {\r\n      \r\n    }\r\n    .height('100%')\r\n    .width('100%')\r\n    .backgroundColor('#F1F3F5')\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"顶部的标题部分",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#顶部的标题部分",children:"#"}),"顶部的标题部分"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\n首先将Text组件宽度设置为占满屏幕（100%），并设置文本对齐属性为Start，文本在Text组件内会向左对齐。设置文本左边距，padding属性可以设置内容器向内的边距，此处设置左边距（left）为16。"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Entry\r\n@Component\r\nstruct Index {\r\n  @State message: string = '快速入门';\r\n\r\n  build() {\r\n    Column() {\r\n      Text(this.message)\r\n        .fontSize(24)\r\n        .fontWeight(700)\r\n        .width('100%')\r\n        .textAlign(TextAlign.Start)\r\n        .padding({ left: 16 })\r\n        .fontFamily('HarmonyHeiTi-Bold')\r\n        .lineHeight(33)\r\n    }\r\n    .height('100%')\r\n    .width('100%')\r\n    .backgroundColor('#F1F3F5')\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"轮播图部分swiper组件提供滑动轮播显示的能力",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#轮播图部分swiper组件提供滑动轮播显示的能力",children:"#"}),"轮播图部分：Swiper组件提供滑动轮播显示的能力。"]}),"\n",(0,i.jsxs)(n.h4,{id:"swiper-循环的item",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#swiper-循环的item",children:"#"}),"Swiper 循环的Item"]}),"\n",(0,i.jsx)(n.p,{children:"根据设计图可以看到快速入门Banner运营位由多张图片资源构成，于是我们可以在Index.ets文件中创建一个BannerClass类，用于表示每张图片资源的数据结构。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:"",children:"class BannerClass {\r\n  id: string = '';\r\n  imageSrc: ResourceStr = '';\r\n\r\n  constructor(id: string, imageSrc: ResourceStr, url: string) {\r\n    this.id = id;\r\n    this.imageSrc = imageSrc;\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"静态资源",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态资源",children:"#"}),"静态资源"]}),"\n",(0,i.jsx)(n.p,{children:"将Resource文件夹中的所有图片资源放置在entry/src/main/resources/base/media路径下，我们可使用$r('app.media.filename')\r\n的方式将该路径下的图片读取到Image组件内。"}),"\n",(0,i.jsxs)(n.h4,{id:"创建一个组件",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建一个组件",children:"#"}),"创建一个组件"]}),"\n",(0,i.jsxs)(n.p,{children:["创建一个Banner组件，使用",(0,i.jsx)(n.code,{children:"@Component"}),"\r\n进行装饰。定义需要渲染的Banner图片数据源。使用刚刚创建的BannerClass构建出bannerList数组，如代码中，在bannerList中构建了六个BannerClass实例。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nstruct Banner {\r\n  @State bannerList: Array<BannerClass> = [\r\n    new BannerClass('pic0', $r('app.media.banner_pic0')),\r\n    new BannerClass('pic1', $r('app.media.banner_pic1')),\r\n    new BannerClass('pic2', $r('app.media.banner_pic2')),\r\n    new BannerClass('pic3', $r('app.media.banner_pic3')),\r\n    new BannerClass('pic4', $r('app.media.banner_pic4')),\r\n    new BannerClass('pic5', $r('app.media.banner_pic5'))\r\n  ];\r\n\r\n  build() {\r\n    \r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"列表循环渲染",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#列表循环渲染",children:"#"}),"列表循环渲染"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\n使用Swiper组件作为外层容器。使用ForEach进行列表循环渲染。循环渲染一个Image组件。"})})]}),"\n",(0,i.jsxs)(n.h5,{id:"foreach",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#foreach",children:"#"}),"ForEach"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"参数"}),(0,i.jsx)(n.th,{children:"类型"}),(0,i.jsx)(n.th,{children:"介绍"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"arr"}),(0,i.jsx)(n.td,{children:"Array"}),(0,i.jsx)(n.td,{children:"一个任意类型的数组arr"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"itemGenerator"}),(0,i.jsx)(n.td,{children:"(item: any, index?: number) => void"}),(0,i.jsx)(n.td,{children:"该函数会按序取到数组中的每一个项，生成函数体中的组件。"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"keyGenerator"}),(0,i.jsx)(n.td,{children:"(item: any, index?: number) => string"}),(0,i.jsx)(n.td,{children:"这个函数关键的作用就在于通过标识每一个实际的组件，当数组元素变化触发页面更新时，能通过对比标识来判断组件是否存在，是否需要创建新的对应的组件，达成增量渲染，而非全量的重新渲染，以提高渲染效率，所以建议在使用ForEach循环渲染传入该参数"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nstruct Banner {\r\n  @State bannerList: Array<BannerClass> = [\r\n    new BannerClass('pic0', $r('app.media.banner_pic0')),\r\n    new BannerClass('pic1', $r('app.media.banner_pic1')),\r\n    new BannerClass('pic2', $r('app.media.banner_pic2')),\r\n    new BannerClass('pic3', $r('app.media.banner_pic3')),\r\n    new BannerClass('pic4', $r('app.media.banner_pic4')),\r\n    new BannerClass('pic5', $r('app.media.banner_pic5'))\r\n  ];\r\n\r\n  build() {\r\n    Swiper() {\r\n      ForEach(this.bannerList, (item: BannerClass, index: number) => {\r\n        Image($r('app.media.banner_pic1'))\r\n          .objectFit(ImageFit.Contain)\r\n          .width('100%')\r\n          .padding({ top: 11, left: 16, right: 16 })\r\n          .borderRadius(16)\r\n      }, (item: BannerClass, index: number) => item.id)\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"设置swiper组件的属性",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#设置swiper组件的属性",children:"#"}),"设置Swiper组件的属性"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\nautoPlay控制是否自动轮播子组件，loop属性控制是否循环播放，indicator属性自定义导航点的位置和样式。"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nstruct Banner {\r\n  @State bannerList: Array<BannerClass> = [\r\n    new BannerClass('pic0', $r('app.media.banner_pic0')),\r\n    new BannerClass('pic1', $r('app.media.banner_pic1')),\r\n    new BannerClass('pic2', $r('app.media.banner_pic2')),\r\n    new BannerClass('pic3', $r('app.media.banner_pic3')),\r\n    new BannerClass('pic4', $r('app.media.banner_pic4')),\r\n    new BannerClass('pic5', $r('app.media.banner_pic5'))\r\n  ];\r\n\r\n  build() {\r\n    Swiper() {\r\n      ForEach(this.bannerList, (item: BannerClass, index: number) => {\r\n        Image($r('app.media.banner_pic1'))\r\n          .objectFit(ImageFit.Contain)\r\n          .width('100%')\r\n          .padding({ top: 11, left: 16, right: 16 })\r\n          .borderRadius(16)\r\n      }, (item: BannerClass, index: number) => item.id)\r\n    }\r\n  }\r\n  .autoPlay(true)\r\n    .loop(true)\r\n    .indicator(\r\n      new DotIndicator()\r\n        .color('#1a000000')\r\n        .selectedColor('#0A59F7'))\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"赋能套件部分",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#赋能套件部分",children:"#"}),"赋能套件部分"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\n整体为上下结构。下部的列表为横向结构，可以横向滚动。列表的单个Item为纵向结构，包含图片、标题、描述。"})})]}),"\n",(0,i.jsxs)(n.h4,{id:"创建容器",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建容器",children:"#"}),"创建容器"]}),"\n",(0,i.jsx)(n.p,{children:"创建一个 EnablementView 组件"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nexport struct EnablementView {\r\n  build() {\r\n    Column() {\r\n    \r\n    }\r\n    .margin({ top: 18 })\r\n    .alignItems(HorizontalAlign.Start)\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"创建文字标题和横向滚动区域",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建文字标题和横向滚动区域",children:"#"}),"创建文字标题和横向滚动区域"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\nGrid组件为网格容器，由“行”和“列”分割的单元格所组成，其中容器内各条目对应一个GridItem组件。如果仅设置行、列数量与占比中的一个，网格单元将按照设置的方向排列，超出Grid显示区域后，Grid拥有可滚动能力。在这部分，可以设置单行显示，则赋能套件部分可以横向滑动。"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nexport struct EnablementView {\r\n  build() {\r\n    Column() {\r\n      Text('赋能套件')\r\n        .fontColor('#182431')\r\n        .fontSize(16)\r\n        .fontWeight(500)\r\n        .fontFamily('HarmonyHeiTi-medium')\r\n        .textAlign(TextAlign.Start)\r\n        .padding({ left: 16 })\r\n        .margin({ bottom: 8.5 })\r\n\r\n      Grid() {\r\n\r\n      }\r\n      .rowsTemplate('1fr')\r\n      .columnsGap(8)\r\n      .scrollBar(BarState.Off)\r\n      .height(169)\r\n      .padding({ top: 2, left: 16, right: 16 })\r\n    }\r\n    .margin({ top: 18 })\r\n    .alignItems(HorizontalAlign.Start)\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"创建griditem和每个item的数据结构",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建griditem和每个item的数据结构",children:"#"}),"创建GridItem和每个Item的数据结构"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nstruct EnablementItem {\r\n  private title: string = 'HarmonyOS第一课';\r\n  private brief: string = '基于真实的开发场景，提供向导式学习，多维度融合课程等内容，给开发者提供全新的学习体验。';\r\n \r\n  build() {\r\n    Column() {\r\n      Image($r('app.media.enablement_pic1'))\r\n        .width('100%')\r\n        .objectFit(ImageFit.Cover)\r\n        .height(96)\r\n        .borderRadius({\r\n          topLeft: 16,\r\n          topRight: 16\r\n        })\r\n      Text(this.title)\r\n        .height(19)\r\n        .width('100%')\r\n        .fontSize(14)\r\n        .textAlign(TextAlign.Start)\r\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\r\n        .maxLines(1)\r\n        .fontWeight(400)\r\n        .padding({ left: 12, right: 12 })\r\n        .margin({ top: 8 })\r\n      Text(this.brief)\r\n        .height(32)\r\n        .width('100%')\r\n        .fontSize(12)\r\n        .textAlign(TextAlign.Start)\r\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\r\n        .maxLines(2)\r\n        .fontWeight(400)\r\n        .fontColor('rgba(0, 0, 0, 0.6)')\r\n        .padding({ left: 12, right: 12 })\r\n        .margin({ top: 2 })\r\n    }\r\n    .width(160)\r\n    .height(169)\r\n    .borderRadius(16)\r\n    .backgroundColor(Color.White)\r\n  }\r\n}\r\n\r\n@Component\r\nexport struct EnablementView {\r\n\r\n  class ArticleClass {\r\n    id: string = '';\r\n    imageSrc: ResourceStr = '';\r\n    title: string = '';\r\n    brief: string = '';\r\n    webUrl: string = '';\r\n  \r\n    constructor(id: string, imageSrc: ResourceStr, title: string, brief: string, webUrl: string) {\r\n      this.id = id;\r\n      this.imageSrc = imageSrc;\r\n      this.title = title;\r\n      this.brief = brief;\r\n      this.webUrl = webUrl;\r\n    }\r\n  }\r\n\r\n  build() {\r\n    Column() {\r\n      Text('赋能套件')\r\n        .fontColor('#182431')\r\n        .fontSize(16)\r\n        .fontWeight(500)\r\n        .fontFamily('HarmonyHeiTi-medium')\r\n        .textAlign(TextAlign.Start)\r\n        .padding({ left: 16 })\r\n        .margin({ bottom: 8.5 })\r\n\r\n      Grid() {\r\n        ForEach(this.enablementList, (item: ArticleClass) => {\r\n          GridItem() {\r\n            EnablementItem({ enablementItem: item })\r\n          }\r\n        }, (item: ArticleClass) => item.id)\r\n      }\r\n      .rowsTemplate('1fr')\r\n      .columnsGap(8)\r\n      .scrollBar(BarState.Off)\r\n      .height(169)\r\n      .padding({ top: 2, left: 16, right: 16 })\r\n    }\r\n    .margin({ top: 18 })\r\n    .alignItems(HorizontalAlign.Start)\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"入门教程区域",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#入门教程区域",children:"#"}),"入门教程区域"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\n列表是一种复杂的容器，当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。它适合用于呈现同类数据类型或数据类型集，使用列表可以轻松高效地显示结构化、可滚动的信息。"})})]}),"\n",(0,i.jsx)(n.p,{children:"入门教程区域也是由上至下的布局，也可以考虑采用Column组件作为外部容器组件。其中包含一行文本，以及多个结构类似的内容，我们就可以采用List组件进行组织。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nstruct TutorialView {\r\n  @State tutorialList: Array<ArticleClass> = ...;\r\n  \r\n  build() {\r\n    Column() {\r\n      Text('入门教程')\r\n        .fontColor('#182431')\r\n        .fontSize(16)\r\n        .fontWeight(500)\r\n        .fontFamily('HarmonyHeiTi-medium')\r\n        .textAlign(TextAlign.Start)\r\n        .padding({ left: 16 })\r\n        .margin({ bottom: 8.5 })\r\n    }\r\n    .margin({ top: 18 })\r\n    .alignItems(HorizontalAlign.Start)\r\n    \r\n    List({ space: 12 }) {\r\n        \r\n    }\r\n    .scrollBar(BarState.Off)\r\n    .padding({ left: 16, right: 16 })\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"实现listitem内容",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现listitem内容",children:"#"}),"实现ListItem内容"]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"\n在组件中定义标题（title）和简介（brief）。它们的类型都是string，赋值分别为“Step1 快速入门介绍” 和 “本篇教程实现了快速入门——一个用于了解和学习HarmonyOS的应用程序 ”。布局整体为左右布局，左边为两个文本，这个两个文本沿垂直方向排列。可以最外层使用Row容器，使文本和图片左右排列。左边文本可以使用Column容器垂直排列title和brief文本。"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nstruct TutorialItem {\r\n  private title: string = 'Step1 快速入门介绍';\r\n  private brief: string = '本篇教程实现了快速入门——一个用于了解和学习HarmonyOS的应用程序 。';\r\n\r\n  build() {\r\n    Row() {\r\n      Column() {\r\n        Text(this.title)\r\n          .height(19)\r\n          .width('100%')\r\n          .fontSize(14)\r\n          .textAlign(TextAlign.Start)\r\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\r\n          .maxLines(1)\r\n          .fontWeight(400)\r\n          .margin({ top: 4 })\r\n        Text(this.brief)\r\n          .height(32)\r\n          .width('100%')\r\n          .fontSize(12)\r\n          .textAlign(TextAlign.Start)\r\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\r\n          .maxLines(2)\r\n          .fontWeight(400)\r\n          .fontColor('rgba(0, 0, 0, 0.6)')\r\n          .margin({ top: 5 })\r\n      }\r\n      .height('100%')\r\n      .layoutWeight(1)\r\n      .alignItems(HorizontalAlign.Start)\r\n      .margin({ right: 12 })\r\n      Image($r('app.media.enablement_pic1'))\r\n        .objectFit(ImageFit.Cover)\r\n        .height(64)\r\n        .width(108)\r\n        .borderRadius(16)\r\n    }\r\n    .width('100%')\r\n    .height(88)\r\n    .borderRadius(16)\r\n    .backgroundColor(Color.White)\r\n    .padding(12)\r\n    .alignItems(VerticalAlign.Top)\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"实现list列表",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现list列表",children:"#"}),"实现list列表"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ets",meta:"",children:"@Component\r\nstruct TutorialView {\r\n  // 数据类型定义和初始化与赋能套件相同\r\n  @State tutorialList: Array<ArticleClass> = ...;\r\n\r\n  build() {\r\n    Column() {\r\n      Text('入门教程')\r\n        ...\r\n      List({ space: 12 }) {\r\n        ForEach(this.tutorialList, (item: ArticleClass) => {\r\n          ListItem() {\r\n            TutorialItem({ tutorialItem: item })\r\n          }\r\n        }, (item: ArticleClass) => item.id)\r\n      }\r\n      .scrollBar(BarState.Off)\r\n      .padding({ left: 16, right: 16 })\r\n    }\r\n    .margin({ top: 18 })\r\n  }\r\n}\n"})})]})}function d(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),r.components);return n?(0,i.jsx)(n,Object.assign({},r,{children:(0,i.jsx)(s,r)})):s(r)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["harmony%2Fkuaisurumen%2Fpart3.md"]={toc:[{id:"分析",text:"分析",depth:2},{id:"实现",text:"实现",depth:2},{id:"页面整体布局",text:"页面整体布局",depth:3},{id:"顶部的标题部分",text:"顶部的标题部分",depth:3},{id:"轮播图部分swiper组件提供滑动轮播显示的能力",text:"轮播图部分：Swiper组件提供滑动轮播显示的能力。",depth:3},{id:"swiper-循环的item",text:"Swiper 循环的Item",depth:4},{id:"静态资源",text:"静态资源",depth:4},{id:"创建一个组件",text:"创建一个组件",depth:4},{id:"列表循环渲染",text:"列表循环渲染",depth:4},{id:"设置swiper组件的属性",text:"设置Swiper组件的属性",depth:4},{id:"赋能套件部分",text:"赋能套件部分",depth:3},{id:"创建容器",text:"创建容器",depth:4},{id:"创建文字标题和横向滚动区域",text:"创建文字标题和横向滚动区域",depth:4},{id:"创建griditem和每个item的数据结构",text:"创建GridItem和每个Item的数据结构",depth:4},{id:"入门教程区域",text:"入门教程区域",depth:3},{id:"实现listitem内容",text:"实现ListItem内容",depth:4},{id:"实现list列表",text:"实现list列表",depth:4}],title:"写一个小demo",headingTitle:"写一个小demo",frontmatter:{}}}}]);