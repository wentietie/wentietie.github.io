"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["5699"],{81700:function(e,n,r){r.r(n),r.d(n,{default:function(){return c}});var t=r(85893),s=r(50065);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"组件基础",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件基础",children:"#"}),"组件基础"]}),"\n",(0,t.jsxs)(n.h2,{id:"定义一个组件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#定义一个组件",children:"#"}),"定义一个组件"]}),"\n",(0,t.jsx)(n.p,{children:"每一个.vue都是组件。叫单文件组件。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vue",meta:"",children:"<script setup>\r\nimport { ref } from 'vue'\r\n\r\nconst count = ref(0)\r\n<\/script>\r\n\r\n<template>\r\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\r\n</template>\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"使用方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用方法",children:"#"}),"使用方法"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vue",meta:"",children:"<script setup>\r\n// 1. 引入\r\nimport ButtonCounter from './ButtonCounter.vue'\r\n<\/script>\r\n\r\n<template>\r\n\x3c!--  父组件--\x3e\r\n  <h1>Here is a child component!</h1>\r\n\x3c!--  2. 使用--\x3e\r\n  <ButtonCounter />\r\n</template>\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"数据传递",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据传递",children:"#"}),"数据传递"]}),"\n",(0,t.jsx)(n.p,{children:"父组件引用子组件"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vue",meta:"",children:"<script setup>\r\n// 1. 引入\r\nimport Child from './Child.vue';\r\nconst fData = ref({\r\n  someFields: '123'\r\n})\r\n<\/script>\r\n\r\n<template>\r\n\x3c!--  父组件--\x3e\r\n  <h1>Here is a child component!</h1>\r\n\x3c!--  2. 使用--\x3e\r\n\x3c!-- 数据传递格式为 :xx=\"yy\" xx为子组件接收的变量名， yy为父组件的变量 --\x3e\r\n  <Child :receive-data=\"fData\" />\r\n</template>\n"})}),"\n",(0,t.jsx)(n.p,{children:"子组件"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vue",meta:"",children:"<script setup>\r\n// 使用defineProps函数获取接受的变量 变量为小驼峰\r\nconst props = defineProps(['receiveData'])\r\n<\/script>\r\n\r\n<template>\r\n\x3c!--  模板中使用变量--\x3e\r\n{{props.receiveData}}\r\n</template>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["当然也可以为props标注类型。可以参考官网",(0,t.jsx)(n.a,{href:"https://cn.vuejs.org/guide/typescript/composition-api.html#typing-component-props",rel:"noopener noreferrer",target:"_blank",children:"为props标注类型"})]}),"\n",(0,t.jsxs)(n.h2,{id:"事件交互",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件交互",children:"#"}),"事件交互"]}),"\n",(0,t.jsx)(n.p,{children:"步骤与数据交互相同，区别在于使用方式。\r\n父组件引用子组件"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vue",meta:"",children:'<script setup>\r\n// 1. 引入\r\nimport Child from \'./Child.vue\';\r\nconst fn = () => {\r\n//  do some things\r\n}\r\n<\/script>\r\n\r\n<template>\r\n\x3c!--  父组件--\x3e\r\n  <h1>Here is a child component!</h1>\r\n\x3c!--  2. 使用--\x3e\r\n\x3c!-- 数据传递格式为 :xx="yy" xx为子组件接收的变量名， yy为父组件的变量 --\x3e\r\n  <Child @receive-fn="fn" />\r\n</template>\n'})}),"\n",(0,t.jsx)(n.p,{children:"子组件"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vue",meta:"",children:"<script setup>\r\n// 使用defineProps函数获取接受的变量 变量为小驼峰\r\nconst emit = defineEmits(['receive-fn'])\r\n<\/script>\r\n\r\n<template>\r\n\x3c!--  模板中使用传入的方法 emit('方法名', 参数)--\x3e\r\n<button @click=\"emit('receive-fn', data)\">触发</button>\r\n</template>\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)}let c=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["formwork%2Fvue3%2Freactive%2Fpart11.md"]={toc:[{id:"定义一个组件",text:"定义一个组件",depth:2},{id:"使用方法",text:"使用方法",depth:2},{id:"数据传递",text:"数据传递",depth:2},{id:"事件交互",text:"事件交互",depth:2}],title:"组件基础",headingTitle:"组件基础",frontmatter:{}}}}]);