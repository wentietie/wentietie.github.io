"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["3733"],{86118:function(e,r,n){n.r(r),n.d(r,{default:function(){return c}});var s=n(85893),a=n(50065);function i(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",h3:"h3",p:"p",div:"div",pre:"pre",code:"code",h4:"h4",strong:"strong"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"webpack-常用优化技巧",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-常用优化技巧",children:"#"}),"WEBPACK 常用优化技巧"]}),"\n",(0,s.jsxs)(r.h2,{id:"分析打包数据",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#分析打包数据",children:"#"}),"分析打包数据"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"friendly-errors-webpack-plugins 插件可以在打包过程中输出错误、警告等信息，并且可以生成一个包含打包数据的报告。"}),"\n",(0,s.jsx)(r.li,{children:"webpack-bundle-analyzer 插件可以生成一个包含打包数据的报告，并以可视化的方式展示出来。"}),"\n",(0,s.jsx)(r.li,{children:"speed-measure-webpack-plugin 插件可以测量各个插件和loader的耗时，从而帮助优化构建过程。"}),"\n",(0,s.jsx)(r.li,{children:"webpack-chart 插件可以生成一个包含打包数据的图表，从而帮助优化构建过程。"}),"\n",(0,s.jsx)(r.li,{children:"webpack-dashboard 插件可以生成一个包含打包数据的仪表盘，从而帮助优化构建过程。"}),"\n",(0,s.jsx)(r.li,{children:"webpack-visualizer 插件可以生成一个包含打包数据的可视化视图，从而帮助优化构建过程。"}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"构建时间优化",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#构建时间优化",children:"#"}),"构建时间优化"]}),"\n",(0,s.jsxs)(r.h3,{id:"thread-loader",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#thread-loader",children:"#"}),"thread-loader"]}),"\n",(0,s.jsx)(r.p,{children:"多进程打包，可以大大提高构建的速度，使用方法是将thread-loader放在比较费时间的loader之前，比如babel-loader"}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"\n由于启动项目和打包项目都需要加速，所以配置在webpack.base.js"})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",meta:"",children:"npm i thread-loader -D\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        use: [\r\n          'thread-loader',\r\n          'babel-loader'\r\n        ],\r\n      }\r\n    ],\r\n  },\r\n};\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"cache-loader",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#cache-loader",children:"#"}),"cache-loader"]}),"\n",(0,s.jsx)(r.p,{children:"缓存资源，提高二次构建的速度，使用方法是将cache-loader放在比较费时间的loader之前，比如babel-loader"}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"\n由于启动项目和打包项目都需要加速，所以配置在webpack.base.js"})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",meta:"",children:"npm i cache-loader -D\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        use: [\r\n          'cache-loader',\r\n          'thread-loader',\r\n          'babel-loader'\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"开启热更新",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#开启热更新",children:"#"}),"开启热更新"]}),"\n",(0,s.jsx)(r.p,{children:"比如你修改了项目中某一个文件，会导致整个项目刷新，这非常耗时间。如果只刷新修改的这个模块，其他保持原状，那将大大提高修改代码的重新构建时间"}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsxs)(r.p,{children:["\n只用于开发中，所以配置在webpack.dev.js。\r\n全部配置参考",(0,s.jsx)(r.a,{href:"https://www.webpackjs.com/guides/hot-module-replacement/",rel:"noopener noreferrer",target:"_blank",children:"HMR模块中文文档"})]})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.dev.js\r\n\r\n//引入webpack\r\nconst webpack = require('webpack');\r\n\r\nmodule.exports = {\r\n  //使用webpack提供的热更新插件\r\n  plugins: [\r\n    new webpack.HotModuleReplacementPlugin()\r\n  ],\r\n  //最后需要在我们的devserver中配置\r\n  devServer: {\r\n    hot: true\r\n  },\r\n};\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"其他代码和框架",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#其他代码和框架",children:"#"}),"其他代码和框架"]}),"\n",(0,s.jsx)(r.p,{children:"社区还提供许多其他 loader 和示例，可以使 HMR 与各种框架和库平滑地进行交互……"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://github.com/gaearon/react-hot-loader",rel:"noopener noreferrer",target:"_blank",children:"React Hot Loader"})}),": 实时调整 react 组件。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://github.com/vuejs/vue-loader",rel:"noopener noreferrer",target:"_blank",children:"Vue Loader"})}),": 此 loader 支持 vue 组件的 HMR，提供开箱即用体验。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://github.com/klazuka/elm-hot-webpack-loader",rel:"noopener noreferrer",target:"_blank",children:"Elm Hot webpack Loader"})}),": 支持 Elm 编程语言的 HMR。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://github.com/gdi2290/angular-hmr",rel:"noopener noreferrer",target:"_blank",children:"Angular HMR"})}),": 没有必要使用 loader！直接修改 NgModule 主文件就够了，它可以完全控制\r\nHMR API。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://github.com/sveltejs/svelte-loader",rel:"noopener noreferrer",target:"_blank",children:"Svelte Loader"})}),": 此 loader 开箱即用地支持 Svelte 组件的热更新。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"exclude--include",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#exclude--include",children:"#"}),"exclude & include"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"exclude：不需要处理的文件"}),"\n",(0,s.jsx)(r.li,{children:"include：需要处理的文件\r\n合理设置这两个属性，可以大大提高构建速度"}),"\n"]}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"\n由于启动项目和打包项目都需要加速，所以配置在webpack.base.js"})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        //使用include来指定编译文件夹\r\n        include: path.resolve(__dirname, '../src'),\r\n        //使用exclude排除指定文件夹\r\n        exclude: /node_modules/,\r\n        use: [\r\n          'babel-loader'\r\n        ]\r\n      },\r\n    ],\r\n  },\r\n};\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"构建区分环境",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#构建区分环境",children:"#"}),"构建区分环境"]}),"\n",(0,s.jsx)(r.p,{children:"区分环境去构建是非常重要的，我们要明确知道，开发环境时我们需要哪些配置，不需要哪些配置；而最终打包生产环境时又需要哪些配置，不需要哪些配置："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"开发环境：去除代码压缩、gzip、体积分析等优化的配置，大大提高构建速度"}),"\n",(0,s.jsx)(r.li,{children:"生产环境：需要代码压缩、gzip、体积分析等优化的配置，大大降低最终项目打包体积"}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"提升webpack版本",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#提升webpack版本",children:"#"}),"提升webpack版本"]}),"\n",(0,s.jsx)(r.p,{children:"webpack版本越新，打包的效果肯定更好"}),"\n",(0,s.jsxs)(r.h2,{id:"打包体积优化",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#打包体积优化",children:"#"}),"打包体积优化"]}),"\n",(0,s.jsxs)(r.h3,{id:"css代码压缩",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#css代码压缩",children:"#"}),"CSS代码压缩"]}),"\n",(0,s.jsx)(r.p,{children:"CSS代码压缩使用css-minimizer-webpack-plugin，效果包括压缩、去重"}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"\n代码的压缩比较耗时间，所以只用在打包项目时，所以只需要在webpack.prod.js中配置"})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",meta:"",children:"npm i css-minimizer-webpack-plugin -D\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\r\nmodule.exports = {\r\n  optimization: {\r\n    minimizer: [\r\n      new CssMinimizerPlugin(), // 去重压缩css\r\n    ],\r\n  }\r\n};\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"js代码压缩",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#js代码压缩",children:"#"}),"JS代码压缩"]}),"\n",(0,s.jsx)(r.p,{children:"JS代码压缩使用terser-webpack-plugin，实现打包后JS代码的压缩"}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"\n代码的压缩比较耗时间，所以只用在打包项目时，所以只需要在webpack.prod.js中配置"})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",meta:"",children:"npm i terser-webpack-plugin -D\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\r\nmodule.exports = {\r\n  optimization: {\r\n    minimizer: [\r\n      new CssMinimizerPlugin(), // 去重压缩css\r\n      new TerserPlugin({ // 压缩JS代码\r\n        terserOptions: {\r\n          compress: {\r\n            drop_console: true, // 去除console\r\n          },\r\n        },\r\n      })\r\n    ],\r\n  }\r\n};\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"tree-shaking",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#tree-shaking",children:"#"}),"tree-shaking"]}),"\n",(0,s.jsx)(r.p,{children:"tree-shaking简单说作用就是：只打包用到的代码，没用到的代码不打包，而webpack5默认开启tree-shaking，当打包的mode为production时，自动开启tree-shaking进行优化."}),"\n",(0,s.jsxs)(r.h3,{id:"source-map类型",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#source-map类型",children:"#"}),"source-map类型"]}),"\n",(0,s.jsx)(r.p,{children:"source-map的作用是：方便你报错的时候能定位到错误代码的位置。它的体积不容小觑，所以对于不同环境设置不同的类型是很有必要的。"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"开发环境"})}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"开发环境的时候我们需要能精准定位错误代码的位置"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"module.exports = {\r\n  mode: 'development',\r\n  devtool: 'eval-cheap-module-source-map'\r\n}\n"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"生产环境"})}),"\n",(0,s.jsx)(r.p,{children:"生产环境，我们想开启source-map，但是又不想体积太大，那么可以换一种类型"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"module.exports = {\r\n  mode: 'production',\r\n  devtool: 'nosources-source-map'\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"打包体积分析",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#打包体积分析",children:"#"}),"打包体积分析"]}),"\n",(0,s.jsx)(r.p,{children:"使用webpack-bundle-analyzer可以审查打包后的体积分布，进而进行相应的体积优化\r\n:::tip 建议\r\n代码的压缩比较耗时间，所以只用在打包项目时，所以只需要在webpack.prod.js中配置\r\n:::"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",meta:"",children:"npm i webpack-bundle-analyzer -D\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\nconst {\r\n  BundleAnalyzerPlugin\r\n} = require('webpack-bundle-analyzer')\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    new BundleAnalyzerPlugin(),\r\n  ]\r\n};\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"用户体验优化",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#用户体验优化",children:"#"}),"用户体验优化"]}),"\n",(0,s.jsxs)(r.p,{children:["模块懒加载\r\n如果不进行",(0,s.jsx)(r.code,{children:"模块懒加载"}),"\r\n的话，最后整个项目代码都会被打包到一个js文件里，单个js文件体积非常大，那么当用户网页请求的时候，首屏加载时间会比较长，使用",(0,s.jsx)(r.code,{children:"模块懒加载"}),"\r\n之后，大js文件会分成多个小js文件，网页加载时会按需加载，大大提升首屏加载速度"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// src/router/index.js\r\n\r\nconst routes = [\r\n  {\r\n    path: '/login',\r\n    name: 'login',\r\n    component: login\r\n  },\r\n  {\r\n    path: '/home',\r\n    name: 'home',\r\n    // 懒加载\r\n    component: () => import('../views/home/home.vue'),\r\n  },\r\n]\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"gzip",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#gzip",children:"#"}),"Gzip"]}),"\n",(0,s.jsx)(r.p,{children:"开启Gzip后，大大提高用户的页面加载速度，因为gzip的体积比原文件小很多，当然需要后端的配合，使用compression-webpack-plugin\r\n:::tip 建议\r\n代码的压缩比较耗时间，所以只用在打包项目时，所以只需要在webpack.prod.js中配置\r\n:::"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",meta:"",children:"npm i compression-webpack-plugin -D\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\nconst CompressionPlugin = require('compression-webpack-plugin')\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    // 之前的代码...\r\n\r\n    // gzip\r\n    new CompressionPlugin({\r\n      algorithm: 'gzip',\r\n      threshold: 10240,\r\n      minRatio: 0.8\r\n    })\r\n  ]\r\n};\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"小图片转base64",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小图片转base64",children:"#"}),"小图片转base64"]}),"\n",(0,s.jsxs)(r.p,{children:["对于一些小图片，可以转",(0,s.jsx)(r.code,{children:" "}),"，这样可以减少用户的http网络请求次数，提高用户的体验。webpack5中",(0,s.jsx)(r.code,{children:"url-loader"}),"已被废弃，改用",(0,s.jsx)(r.code,{children:"asset-module"})]}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"\n在webpack.base.js中配置"})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"// webpack.base.js\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(png|jpe?g|gif|svg|webp)$/,\r\n        type: 'asset',\r\n        parser: {\r\n          // 转base64的条件\r\n          dataUrlCondition: {\r\n            maxSize: 25 * 1024, // 25kb\r\n          }\r\n        },\r\n        generator: {\r\n          // 打包到 image 文件下\r\n          filename: 'images/[contenthash][ext][query]',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"合理配置hash",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#合理配置hash",children:"#"}),"合理配置hash"]}),"\n",(0,s.jsx)(r.p,{children:"我们要保证，改过的文件需要更新hash值，而没改过的文件依然保持原本的hash值，这样才能保证在上线后，浏览器访问时没有改变的文件会命中缓存，从而达到性能优化的目的"}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"建议"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"\n在webpack.base.js中配置"})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",meta:"",children:"module.exports = {\r\n  output: {\r\n    path: path.resolve(__dirname, '../dist'),\r\n    // 给js文件加上 contenthash\r\n    filename: 'js/chunk-[contenthash].js',\r\n    clean: true,\r\n  },\r\n};\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,a.ah)(),e.components);return r?(0,s.jsx)(r,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["notes%2FJS%2Fwebpack-optimize.md"]={toc:[{id:"分析打包数据",text:"分析打包数据",depth:2},{id:"构建时间优化",text:"构建时间优化",depth:2},{id:"thread-loader",text:"thread-loader",depth:3},{id:"cache-loader",text:"cache-loader",depth:3},{id:"开启热更新",text:"开启热更新",depth:3},{id:"其他代码和框架",text:"其他代码和框架",depth:4},{id:"exclude--include",text:"exclude & include",depth:3},{id:"构建区分环境",text:"构建区分环境",depth:3},{id:"提升webpack版本",text:"提升webpack版本",depth:3},{id:"打包体积优化",text:"打包体积优化",depth:2},{id:"css代码压缩",text:"CSS代码压缩",depth:3},{id:"js代码压缩",text:"JS代码压缩",depth:3},{id:"tree-shaking",text:"tree-shaking",depth:3},{id:"source-map类型",text:"source-map类型",depth:3},{id:"打包体积分析",text:"打包体积分析",depth:3},{id:"用户体验优化",text:"用户体验优化",depth:2},{id:"gzip",text:"Gzip",depth:3},{id:"小图片转base64",text:"小图片转base64",depth:3},{id:"合理配置hash",text:"合理配置hash",depth:3}],title:"WEBPACK 常用优化技巧",headingTitle:"WEBPACK 常用优化技巧",frontmatter:{}}}}]);