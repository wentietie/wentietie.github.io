"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["8390"],{13563:function(n,e,r){r.r(e),r.d(e,{default:function(){return c}});var s=r(85893),i=r(50065);function l(n){let e=Object.assign({h1:"h1",a:"a",strong:"strong",p:"p",h2:"h2",h3:"h3",pre:"pre",code:"code",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"arkts语言介绍",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#arkts语言介绍",children:"#"}),(0,s.jsx)(e.strong,{children:"ArkTS语言介绍"})]}),"\n",(0,s.jsx)(e.p,{children:"ArkTS是一种为构建高性能应用而设计的编程语言。ArkTS在继承TypeScript语法的基础上进行了优化，以提供更高的性能和开发效率。"}),"\n",(0,s.jsx)(e.p,{children:"随着移动设备在人们的日常生活中变得越来越普遍，许多编程语言在设计之初没有考虑到移动设备，导致应用的运行缓慢、低效、功耗大，针对移动环境的编程语言优化需求也越来越大。ArkTS是专为解决这些问题而设计的，聚焦于提高运行效率。"}),"\n",(0,s.jsx)(e.p,{children:"目前流行的编程语言TypeScript是在JavaScript基础上通过添加类型定义扩展而来的，而ArkTS则是TypeScript的进一步扩展。TypeScript深受开发者的喜爱，因为它提供了一种更结构化的JavaScript编码方法。ArkTS旨在保持TypeScript的大部分语法，为现有的TypeScript开发者实现无缝过渡，让移动开发者快速上手ArkTS。"}),"\n",(0,s.jsx)(e.p,{children:"ArkTS的一大特性是它专注于低运行时开销。ArkTS对TypeScript的动态类型特性施加了更严格的限制，以减少运行时开销，提高执行效率。通过取消动态类型特性，ArkTS代码能更有效地被运行前编译和优化，从而实现更快的应用启动和更低的功耗。"}),"\n",(0,s.jsx)(e.p,{children:"与JavaScript的互通性是ArkTS语言设计中的关键考虑因素。鉴于许多移动应用开发者希望重用其TypeScript和JavaScript代码和库，ArkTS提供了与JavaScript的无缝互通，使开发者可以很容易地将JavaScript代码集成到他们的应用中。这意味着开发者可以利用现有的代码和库进行ArkTS开发。"}),"\n",(0,s.jsx)(e.p,{children:"为了确保应用开发的最佳体验，ArkTS提供对方舟开发框架ArkUI的声明式语法和其他特性的支持。由于此部分特性不在既有TypeScript的范围内，因此我们在《ArkUI支持》一章中提供了详细的ArkUI示例。"}),"\n",(0,s.jsx)(e.p,{children:"本教程将指导开发者了解ArkTS的核心功能、语法和最佳实践，使开发者能够使用ArkTS高效构建高性能的移动应用。"}),"\n",(0,s.jsxs)(e.p,{children:["如需更详细了解ArkTS语言，可见",(0,s.jsx)(e.a,{href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-overview-V5",rel:"noopener noreferrer",target:"_blank",children:"ArkTS具体指南"}),"\r\n和",(0,s.jsx)(e.a,{href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-tools-overview-V5",rel:"noopener noreferrer",target:"_blank",children:"DevEco Studio"}),"。"]}),"\n",(0,s.jsxs)(e.h2,{id:"基本知识",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基本知识",children:"#"}),"基本知识"]}),"\n",(0,s.jsxs)(e.h3,{id:"声明",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#声明",children:"#"}),"声明"]}),"\n",(0,s.jsx)(e.p,{children:"ArkTS通过声明引入变量、常量、函数和类型。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"变量声明"})}),"\n",(0,s.jsx)(e.p,{children:"以关键字let开头的声明引入变量，该变量在程序执行期间可以具有不同的值。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let hi: string = 'hello';\r\nhi = 'hello, world';\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"常量声明"})}),"\n",(0,s.jsx)(e.p,{children:"以关键字const开头的声明引入只读常量，该常量只能被赋值一次。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"const hello: string = 'hello';\n"})}),"\n",(0,s.jsx)(e.p,{children:"对常量重新赋值会造成编译时错误。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"自动类型推断"})}),"\n",(0,s.jsx)(e.p,{children:"由于ArkTS是一种静态类型语言，所有数据的类型都必须在编译时确定。"}),"\n",(0,s.jsx)(e.p,{children:"但是，如果一个变量或常量的声明包含了初始值，那么开发者就不需要显式指定其类型。ArkTS规范中列举了所有允许自动推断类型的场景。"}),"\n",(0,s.jsx)(e.p,{children:"以下示例中，两条声明语句都是有效的，两个变量都是string类型："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let hi1: string = 'hello';\r\nlet hi2 = 'hello, world';\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"类型",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"}),"类型"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"number类型"})}),"\n",(0,s.jsx)(e.p,{children:"ArkTS提供number类型，任何整数和浮点数都可以被赋给此类型的变量。"}),"\n",(0,s.jsx)(e.p,{children:"数字字面量包括整数字面量和十进制浮点数字面量。"}),"\n",(0,s.jsx)(e.p,{children:"整数字面量包括以下类别："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"由数字序列组成的十进制整数。例如：0、117、-345"}),"\n",(0,s.jsx)(e.li,{children:"以0x（或0X）开头的十六进制整数，可以包含数字（0-9）和字母a-f或A-F。例如：0x1123、0x00111、-0xF1A7"}),"\n",(0,s.jsx)(e.li,{children:"以0o（或0O）开头的八进制整数，只能包含数字（0-7）。例如：0o777"}),"\n",(0,s.jsx)(e.li,{children:"以0b（或0B）开头的二进制整数，只能包含数字0和1。例如：0b11、0b0011、-0b11"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"浮点字面量包括以下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"十进制整数，可为有符号数（即，前缀为“+”或“-”）；"}),"\n",(0,s.jsx)(e.li,{children:"小数点（“.”）"}),"\n",(0,s.jsx)(e.li,{children:"小数部分（由十进制数字字符串表示）"}),"\n",(0,s.jsx)(e.li,{children:"以“e”或“E”开头的指数部分，后跟有符号（即，前缀为“+”或“-”）或无符号整数。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let n1 = 3.14;\r\nlet n2 = 3.141592;\r\nlet n3 = .5;\r\nlet n4 = 1e2;\r\n\r\nfunction factorial(n: number): number {\r\n  if (n <= 1) {\r\n    return 1;\r\n  }\r\n  return n * factorial(n - 1);\r\n}\r\n\r\nfactorial(n1)  //  7.660344000000002 factorial(n2)  //  7.680640444893748 factorial(n3)  //  1 factorial(n4)  //  9.33262154439441e+157 \n"})}),"\n",(0,s.jsx)(e.p,{children:"number类型在表示大整数时会造成精度丢失。在开发时可以按需使用bigInt类型来确保精度："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let bigIntger: BigInt = BigInt('999999999999999999999999999999999999999999999999999999999999');\r\nconsole.log('bigIntger' + bigIntger.toString());\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"boolean类型"})}),"\n",(0,s.jsx)(e.p,{children:"boolean类型由true和false两个逻辑值组成。"}),"\n",(0,s.jsx)(e.p,{children:"通常在条件语句中使用boolean类型的变量："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let isDone: boolean = false;\r\n// ...\r\nif (isDone) {\r\n  console.log('Done!');\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"string类型"})}),"\n",(0,s.jsx)(e.p,{children:"string代表字符序列；可以使用转义字符来表示字符。"}),"\n",(0,s.jsx)(e.p,{children:"字符串字面量由单引号（'）或双引号（\"）之间括起来的零个或多个字符组成。字符串字面量还有一特殊形式，是用反向单引号（`）括起来的模板字面量。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let s1 = 'Hello, world!\\n';\r\nlet s2 = 'this is a string';\r\nlet a = 'Success';\r\nlet s3 = `The result is ${a}`;\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"void类型"})}),"\n",(0,s.jsx)(e.p,{children:"void类型用于指定函数没有返回值。"}),"\n",(0,s.jsx)(e.p,{children:"此类型只有一个值，同样是void。由于void是引用类型，因此它可以用于泛型类型参数。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Class<T> {  //...}let instance: Class <void>\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Object类型"})}),"\n",(0,s.jsx)(e.p,{children:"Object类型是所有引用类型的基类型。任何值，包括基本类型的值（它们会被自动装箱），都可以直接被赋给Object类型的变量。object类型则用于表示除基本类型外的类型。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"array类型"})}),"\n",(0,s.jsx)(e.p,{children:"array，即数组，是由可赋值给数组声明中指定的元素类型的数据组成的对象。"}),"\n",(0,s.jsx)(e.p,{children:"数组可由数组复合字面量（即用方括号括起来的零个或多个表达式的列表，其中每个表达式为数组中的一个元素）来赋值。数组的长度由数组中元素的个数来确定。数组中第一个元素的索引为0。"}),"\n",(0,s.jsx)(e.p,{children:"以下示例将创建包含三个元素的数组："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let names: string[] = ['Alice', 'Bob', 'Carol'];\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"enum类型"})}),"\n",(0,s.jsx)(e.p,{children:"enum类型，又称枚举类型，是预先定义的一组命名值的值类型，其中命名值又称为枚举常量。"}),"\n",(0,s.jsx)(e.p,{children:"使用枚举常量时必须以枚举类型名称为前缀。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"enum ColorSet { Red, Green, Blue }\r\n\r\nlet c: ColorSet = ColorSet.Red;\n"})}),"\n",(0,s.jsx)(e.p,{children:"常量表达式可以用于显式设置枚举常量的值。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"enum ColorSet { White = 0xFF, Grey = 0x7F, Black = 0x00 }\r\n\r\nlet c: ColorSet = ColorSet.Black;\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Union类型"})}),"\n",(0,s.jsx)(e.p,{children:"union类型，即联合类型，是由多个类型组合成的引用类型。联合类型包含了变量可能的所有类型。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Cat {\r\n  name: string = 'cat';  // ...}class Dog {  name: string = 'dog';  // ...}class Frog {  name: string = 'frog';  // ...}type Animal = Cat | Dog | Frog | number;// Cat、Dog、Frog是一些类型（类或接口）\r\n  let\r\n  animal: Animal = new Cat();\r\n  animal = new Frog();\r\n  animal = 42;// 可以将类型为联合类型的变量赋值为任何组成类型的有效值\n"})}),"\n",(0,s.jsx)(e.p,{children:"可以用不同的机制获取联合类型中特定类型的值。"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Cat {\r\n  sleep() {\r\n  };\r\n\r\n  meow() {\r\n  }\r\n}\r\n\r\nclass Dog {\r\n  sleep() {\r\n  };\r\n\r\n  bark() {\r\n  }\r\n}\r\n\r\nclass Frog {\r\n  sleep() {\r\n  };\r\n\r\n  leap() {\r\n  }\r\n}\r\n\r\ntype Animal = Cat | Dog | Frog;\r\n\r\nfunction foo(animal: Animal) {\r\n  if (animal instanceof Frog) {\r\n    animal.leap();  // animal在这里是Frog类型  }  animal.sleep(); // Animal具有sleep方法}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Aliases类型"})}),"\n",(0,s.jsx)(e.p,{children:"Aliases类型为匿名类型（数组、函数、对象字面量或联合类型）提供名称，或为已有类型提供替代名称。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"type Matrix = number[][];\r\ntype Handler = (s: string, no: number) => string;\r\ntype Predicate<T> = (x: T) => boolean;\r\ntype NullableObject = Object | null;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"运算符",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#运算符",children:"#"}),"运算符"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"赋值运算符"})}),"\n",(0,s.jsx)(e.p,{children:"赋值运算符=，使用方式如x=y。"}),"\n",(0,s.jsx)(e.p,{children:"复合赋值运算符将赋值与运算符组合在一起，其中x op = y等于x = x op y。"}),"\n",(0,s.jsx)(e.p,{children:"复合赋值运算符列举如下：+=、-=、*=、/=、%=、<<=、>>=、>>>=、&=、|=、^=。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"比较运算符"})}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{align:"left",children:"运算符"}),(0,s.jsx)(e.th,{align:"left",children:"说明"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"==="}),(0,s.jsx)(e.td,{align:"left",children:"如果两个操作数严格相等（对于不同类型的操作数认为是不相等的），则返回true。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"!=="}),(0,s.jsx)(e.td,{align:"left",children:"如果两个操作数严格不相等（对于不同类型的操作数认为是不相等的），则返回true。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"=="}),(0,s.jsx)(e.td,{align:"left",children:"如果两个操作数相等，则返回true。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"!="}),(0,s.jsx)(e.td,{align:"left",children:"如果两个操作数不相等，则返回true。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:">"}),(0,s.jsx)(e.td,{align:"left",children:"如果左操作数大于右操作数，则返回true。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:">="}),(0,s.jsx)(e.td,{align:"left",children:"如果左操作数大于或等于右操作数，则返回true。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"<"}),(0,s.jsx)(e.td,{align:"left",children:"如果左操作数小于右操作数，则返回true。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"<="}),(0,s.jsx)(e.td,{align:"left",children:"如果左操作数小于或等于右操作数，则返回true。"})]})]})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"算术运算符"})}),"\n",(0,s.jsx)(e.p,{children:"一元运算符为-、+、--、++。"}),"\n",(0,s.jsx)(e.p,{children:"二元运算符列举如下："}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{align:"left",children:"运算符"}),(0,s.jsx)(e.th,{align:"left",children:"说明"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"+"}),(0,s.jsx)(e.td,{align:"left",children:"加法"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"-"}),(0,s.jsx)(e.td,{align:"left",children:"减法"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"*"}),(0,s.jsx)(e.td,{align:"left",children:"乘法"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"/"}),(0,s.jsx)(e.td,{align:"left",children:"除法"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"%"}),(0,s.jsx)(e.td,{align:"left",children:"除法后余数"})]})]})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"位运算符"})}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{align:"left",children:"运算符"}),(0,s.jsx)(e.th,{align:"left",children:"说明"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a & b"}),(0,s.jsx)(e.td,{align:"left",children:"按位与：如果两个操作数的对应位都为1，则将这个位设置为1，否则设置为0。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a | b"}),(0,s.jsx)(e.td,{align:"left",children:"按位或：如果两个操作数的相应位中至少有一个为1，则将这个位设置为1，否则设置为0。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a ^ b"}),(0,s.jsx)(e.td,{align:"left",children:"按位异或：如果两个操作数的对应位不同，则将这个位设置为1，否则设置为0。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"~ a"}),(0,s.jsx)(e.td,{align:"left",children:"按位非：反转操作数的位。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a << b"}),(0,s.jsx)(e.td,{align:"left",children:"左移：将a的二进制表示向左移b位。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a >> b"}),(0,s.jsx)(e.td,{align:"left",children:"算术右移：将a的二进制表示向右移b位，带符号扩展。"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a >>> b"}),(0,s.jsx)(e.td,{align:"left",children:"逻辑右移：将a的二进制表示向右移b位，左边补0。"})]})]})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"逻辑运算符"})}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{align:"left",children:"运算符"}),(0,s.jsx)(e.th,{align:"left",children:"说明"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a && b"}),(0,s.jsx)(e.td,{align:"left",children:"逻辑与"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"a || b"}),(0,s.jsx)(e.td,{align:"left",children:"逻辑或"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{align:"left",children:"! a"}),(0,s.jsx)(e.td,{align:"left",children:"逻辑非"})]})]})]}),"\n",(0,s.jsxs)(e.h3,{id:"语句",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#语句",children:"#"}),"语句"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"If语句"})}),"\n",(0,s.jsx)(e.p,{children:"if语句用于需要根据逻辑条件执行不同语句的场景。当逻辑条件为真时，执行对应的一组语句，否则执行另一组语句（如果有的话）。"}),"\n",(0,s.jsx)(e.p,{children:"else部分也可能包含if语句。"}),"\n",(0,s.jsx)(e.p,{children:"if语句如下所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"if (condition1) {  // 语句1\r\n} else if (condition2) {  // 语句2\r\n} else {  // else语句\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"条件表达式可以是任何类型。但是对于boolean以外的类型，会进行隐式类型转换："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let s1 = 'Hello';\r\nif (s1) {\r\n  console.log(s1); // 打印“Hello”\r\n}\r\n\r\nlet s2 = 'World';\r\nif (s2.length != 0) {\r\n  console.log(s2); // 打印“World”\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Switch语句"})}),"\n",(0,s.jsx)(e.p,{children:"使用switch语句来执行与switch表达式值匹配的代码块。"}),"\n",(0,s.jsx)(e.p,{children:"switch语句如下所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"switch (expression) {\r\n  case label1: // 如果label1匹配，则执行\r\n    // ...\r\n    // 语句1\r\n    // ...\r\n    break; // 可省略\r\n  case label2:\r\n  case label3: // 如果label2或label3匹配，则执行\r\n    // ...\r\n    // 语句23\r\n    // ...\r\n    break; // 可省略\r\n  default:\r\n    // 默认语句\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果switch表达式的值等于某个label的值，则执行相应的语句。"}),"\n",(0,s.jsx)(e.p,{children:"如果没有任何一个label值与表达式值相匹配，并且switch具有default子句，那么程序会执行default子句对应的代码块。"}),"\n",(0,s.jsx)(e.p,{children:"break语句（可选的）允许跳出switch语句并继续执行switch语句之后的语句。"}),"\n",(0,s.jsx)(e.p,{children:"如果没有break语句，则执行switch中的下一个label对应的代码块。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"条件表达式"})}),"\n",(0,s.jsx)(e.p,{children:"条件表达式由第一个表达式的布尔值来决定返回其它两个表达式中的哪一个。"}),"\n",(0,s.jsx)(e.p,{children:"示例如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"condition ? expression1 : expression2\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果condition的值为真值（转换后为true的值），则使用expression1作为该表达式的结果；否则，使用expression2。"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let message = Math.random() > 0.5 ? 'Valid' : 'Failed';\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"For语句"})}),"\n",(0,s.jsx)(e.p,{children:"for语句会被重复执行，直到循环退出语句值为false。"}),"\n",(0,s.jsx)(e.p,{children:"for语句如下所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"for ([init]; [condition]; [update]) {\r\n  statements\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"for语句的执行流程如下："}),"\n",(0,s.jsx)(e.p,{children:"1、 执行init表达式（如有）。此表达式通常初始化一个或多个循环计数器。"}),"\n",(0,s.jsx)(e.p,{children:"2、 计算condition。如果它为真值（转换后为true的值），则执行循环主体的语句。如果它为假值（转换后为false的值），则for循环终止。"}),"\n",(0,s.jsx)(e.p,{children:"3、 执行循环主体的语句。"}),"\n",(0,s.jsx)(e.p,{children:"4、 如果有update表达式，则执行该表达式。"}),"\n",(0,s.jsx)(e.p,{children:"5、 回到步骤2。"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let sum = 0;\r\nfor (let i = 0; i < 10; i += 2) {\r\n  sum += i;\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"For-of语句"})}),"\n",(0,s.jsx)(e.p,{children:"使用for-of语句可遍历数组或字符串。示例如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"for (forVar of expression) {\r\n  statements\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"for (let ch of 'a string object') {  /* process ch */\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"While语句"})}),"\n",(0,s.jsx)(e.p,{children:"只要condition为真值（转换后为true的值），while语句就会执行statements语句。示例如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"while (condition) {\r\n  statements\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let n = 0;\r\nlet x = 0;\r\nwhile (n < 3) {\r\n  n++;\r\n  x += n;\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Do-while语句"})}),"\n",(0,s.jsx)(e.p,{children:"如果condition的值为真值（转换后为true的值），那么statements语句会重复执行。示例如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"do {\r\n  statements\r\n} while (condition)\n"})}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let i = 0;\r\ndo {\r\n  i += 1;\r\n} while (i < 10)\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Break语句"})}),"\n",(0,s.jsx)(e.p,{children:"使用break语句可以终止循环语句或switch。"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let x = 0;\r\nwhile (true) {\r\n  x++;\r\n  if (x > 5) {\r\n    break;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果break语句后带有标识符，则将控制流转移到该标识符所包含的语句块之外。"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let x = 1;\r\nlabel: while (true) {\r\n  switch (x) {\r\n    case 1:\r\n      // statements\r\n      break label; // 中断while语句\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Continue语句"})}),"\n",(0,s.jsx)(e.p,{children:"continue语句会停止当前循环迭代的执行，并将控制传递给下一个迭代。"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let sum = 0;\r\nfor (let x = 0; x < 100; x++) {\r\n  if (x % 2 == 0) {\r\n    continue;\r\n  }\r\n  sum += x;\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Throw和Try语句"})}),"\n",(0,s.jsx)(e.p,{children:"throw语句用于抛出异常或错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"throw new Error('this error')\n"})}),"\n",(0,s.jsx)(e.p,{children:"try语句用于捕获和处理异常或错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"try {\r\n  // 可能发生异常的语句块\r\n} catch (e) {\r\n  // 异常处理\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"下面的示例中throw和try语句用于处理除数为0的错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class ZeroDivisor extends Error {\r\n}\r\n\r\nfunction divide(a: number, b: number): number {\r\n  if (b == 0) throw new ZeroDivisor();\r\n  return a / b;\r\n}\r\n\r\nfunction process(a: number, b: number) {\r\n  try {\r\n    let res = divide(a, b);\r\n    console.log('result: ' + res);\r\n  } catch (x) {\r\n    console.log('some error');\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"支持finally语句："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function processData(s: string) {\r\n  let error: Error | null = null;\r\n\r\n  try {\r\n    console.log('Data processed: ' + s);\r\n    // ...\r\n    // 可能发生异常的语句\r\n    // ...\r\n  } catch (e) {\r\n    error = e as Error;\r\n    // ...\r\n    // 异常处理\r\n    // ...\r\n  } finally {\r\n    if (error != null) {\r\n      console.log(`Error caught: input='${s}', message='${error.message}'`);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"函数",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数",children:"#"}),"函数"]}),"\n",(0,s.jsxs)(e.h3,{id:"函数声明",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数声明",children:"#"}),"函数声明"]}),"\n",(0,s.jsx)(e.p,{children:"函数声明引入一个函数，包含其名称、参数列表、返回类型和函数体。"}),"\n",(0,s.jsx)(e.p,{children:"以下示例是一个简单的函数，包含两个string类型的参数，返回类型为string："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function add(x: string, y: string): string {\r\n  let z: string = `${x} ${y}`;\r\n  return z;\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"在函数声明中，必须为每个参数标记类型。如果参数为可选参数，那么允许在调用函数时省略该参数。函数的最后一个参数可以是rest参数。"}),"\n",(0,s.jsxs)(e.h3,{id:"可选参数",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#可选参数",children:"#"}),"可选参数"]}),"\n",(0,s.jsx)(e.p,{children:"可选参数的格式可为name?: Type。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function hello(name?: string) {\r\n  if (name == undefined) {\r\n    console.log('Hello!');\r\n  } else {\r\n    console.log(`Hello, ${name}!`);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"可选参数的另一种形式为设置的参数默认值。如果在函数调用中这个参数被省略了，则会使用此参数的默认值作为实参。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function multiply(n: number, coeff: number = 2): number {\r\n  return n * coeff;\r\n}\r\n\r\nmultiply(2);  // 返回2*2multiply(2, 3); // 返回2*3\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"rest参数",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#rest参数",children:"#"}),"Rest参数"]}),"\n",(0,s.jsx)(e.p,{children:"函数的最后一个参数可以是rest参数。使用rest参数时，允许函数或方法接受任意数量的实参。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function sum(...numbers: number[]): number {\r\n  let res = 0;\r\n  for (let n of numbers) res += n;\r\n  return res;\r\n}\r\n\r\nsum(); // 返回0sum(1, 2, 3); // 返回6\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"返回类型",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#返回类型",children:"#"}),"返回类型"]}),"\n",(0,s.jsx)(e.p,{children:"如果可以从函数体内推断出函数返回类型，则可在函数声明中省略标注返回类型。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"// 显式指定返回类型function foo(): string { return 'foo'; }\r\n// 推断返回类型为stringfunction goo() { return 'goo'; }\n"})}),"\n",(0,s.jsx)(e.p,{children:"不需要返回值的函数的返回类型可以显式指定为void或省略标注。这类函数不需要返回语句。"}),"\n",(0,s.jsx)(e.p,{children:"以下示例中两种函数声明方式都是有效的："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function hi1() {\r\n  console.log('hi');\r\n}\r\n\r\nfunction hi2(): void {\r\n  console.log('hi');\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"函数的作用域",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数的作用域",children:"#"}),"函数的作用域"]}),"\n",(0,s.jsx)(e.p,{children:"函数中定义的变量和其他实例仅可以在函数内部访问，不能从外部访问。"}),"\n",(0,s.jsx)(e.p,{children:"如果函数中定义的变量与外部作用域中已有实例同名，则函数内的局部变量定义将覆盖外部定义。"}),"\n",(0,s.jsxs)(e.h3,{id:"函数调用",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数调用",children:"#"}),"函数调用"]}),"\n",(0,s.jsx)(e.p,{children:"调用函数以执行其函数体，实参值会赋值给函数的形参。"}),"\n",(0,s.jsx)(e.p,{children:"如果函数定义如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function join(x: string, y: string): string {\r\n  let z: string = `${x} ${y}`;\r\n  return z;\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"则此函数的调用需要包含两个string类型的参数："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let x = join('hello', 'world');\r\nconsole.log(x);\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"函数类型",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数类型",children:"#"}),"函数类型"]}),"\n",(0,s.jsx)(e.p,{children:"函数类型通常用于定义回调："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"type trigFunc = (x: number) => number // 这是一个函数类型\r\n\r\nfunction do_action(f: trigFunc) {\r\n  f(3.141592653589); // 调用函数\r\n}\r\n\r\ndo_action(Math.sin); // 将函数作为参数传入\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"箭头函数又名lambda函数",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#箭头函数又名lambda函数",children:"#"}),"箭头函数（又名Lambda函数）"]}),"\n",(0,s.jsx)(e.p,{children:"函数可以定义为箭头函数，例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let sum = (x: number, y: number): number => {\r\n  return x + y;\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"箭头函数的返回类型可以省略；省略时，返回类型通过函数体推断。"}),"\n",(0,s.jsx)(e.p,{children:"表达式可以指定为箭头函数，使表达更简短，因此以下两种表达方式是等价的："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let sum1 = (x: number, y: number) => {\r\n  return x + y;\r\n}\r\nlet sum2 = (x: number, y: number) => x + y\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"闭包",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#闭包",children:"#"}),"闭包"]}),"\n",(0,s.jsx)(e.p,{children:"闭包是由函数及声明该函数的环境组合而成的。该环境包含了这个闭包创建时作用域内的任何局部变量。"}),"\n",(0,s.jsx)(e.p,{children:"在下例中，f函数返回了一个闭包，它捕获了count变量，每次调用z，count的值会被保留并递增。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function f(): () => number {\r\n  let count = 0;\r\n  let g = (): number => {\r\n    count++;\r\n    return count;\r\n  };\r\n  return g;\r\n}\r\n\r\nlet z = f();\r\nz(); // 返回：1z(); // 返回：2\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"函数重载",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数重载",children:"#"}),"函数重载"]}),"\n",(0,s.jsx)(e.p,{children:"我们可以通过编写重载，指定函数的不同调用方式。具体方法为，为同一个函数写入多个同名但签名不同的函数头，函数实现紧随其后。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function foo(x: number): void;            /* 第一个函数定义 */\r\nfunction foo(x: string): void;            /* 第二个函数定义 */\r\nfunction foo(x: number | string): void {  /* 函数实现 */\r\n}\r\n\r\nfoo(123);     //  OK，使用第一个定义foo('aa'); // OK，使用第二个定义\n"})}),"\n",(0,s.jsx)(e.p,{children:"不允许重载函数有相同的名字以及参数列表，否则将会编译报错。"}),"\n",(0,s.jsxs)(e.h2,{id:"类",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类",children:"#"}),"类"]}),"\n",(0,s.jsx)(e.p,{children:"类声明引入一个新类型，并定义其字段、方法和构造函数。"}),"\n",(0,s.jsx)(e.p,{children:"在以下示例中，定义了Person类，该类具有字段name和surname、构造函数和方法fullName："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  name: string = '';\r\n  surname: string = '';\r\n\r\n  constructor(n: string, sn: string) {\r\n    this.name = n;\r\n    this.surname = sn;\r\n  }\r\n\r\n  fullName(): string {\r\n    return this.name + ' ' + this.surname;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"定义类后，可以使用关键字new创建实例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let p = new Person('John', 'Smith');\r\nconsole.log(p.fullName());\n"})}),"\n",(0,s.jsx)(e.p,{children:"或者，可以使用对象字面量创建实例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Point {\r\n  x: number = 0;\r\n  y: number = 0;\r\n}\r\n\r\nlet p: Point = {x: 42, y: 42};\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"字段",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字段",children:"#"}),"字段"]}),"\n",(0,s.jsx)(e.p,{children:"字段是直接在类中声明的某种类型的变量。"}),"\n",(0,s.jsx)(e.p,{children:"类可以具有实例字段或者静态字段。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"实例字段"})}),"\n",(0,s.jsx)(e.p,{children:"实例字段存在于类的每个实例上。每个实例都有自己的实例字段集合。"}),"\n",(0,s.jsx)(e.p,{children:"要访问实例字段，需要使用类的实例。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  name: string = '';\r\n  age: number = 0;\r\n\r\n  constructor(n: string, a: number) {\r\n    this.name = n;\r\n    this.age = a;\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\nlet p1 = new Person('Alice', 25);\r\np1.name;\r\nlet p2 = new Person('Bob', 28);\r\np2.getName();\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"静态字段"})}),"\n",(0,s.jsx)(e.p,{children:"使用关键字static将字段声明为静态。静态字段属于类本身，类的所有实例共享一个静态字段。"}),"\n",(0,s.jsx)(e.p,{children:"要访问静态字段，需要使用类名："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  name: string = '';\r\n  age: number = 0;\r\n  constructor(n: string, a: number) {\r\n    this.name = n;\r\n    this.age = a;\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\nlet p1 = new Person('Alice', 25);\r\np1.name;\r\nlet p2 = new Person('Bob', 28);\r\np2.getName();\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"字段初始化"})}),"\n",(0,s.jsx)(e.p,{children:"为了减少运行时的错误和获得更好的执行性能，"}),"\n",(0,s.jsx)(e.p,{children:"ArkTS要求所有字段在声明时或者构造函数中显式初始化。这和标准TS中的strictPropertyInitialization模式一样。"}),"\n",(0,s.jsx)(e.p,{children:"以下代码是在ArkTS中不合法的代码。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:'class Person {\r\n  name: string; // undefined\r\n  \r\n  setName(n:string): void {\r\n    this.name = n;\r\n  }\r\n  \r\n  getName(): string {\r\n    // 开发者使用"string"作为返回类型，这隐藏了name可能为"undefined"的事实。\r\n    // 更合适的做法是将返回类型标注为"string | undefined"，以告诉开发者这个API所有可能的返回值。\r\n    return this.name;\r\n  }\r\n}\r\n\r\nlet jack = new Person();\r\n// 假设代码中没有对name赋值，例如调用"jack.setName(\'Jack\')"\r\njack.getName().length; // 运行时异常：name is undefined\n'})}),"\n",(0,s.jsx)(e.p,{children:"在ArkTS中，应该这样写代码。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  name: string = '';\r\n  \r\n  setName(n:string): void {\r\n    this.name = n;\r\n  }\r\n  \r\n  // 类型为'string'，不可能为\"null\"或者\"undefined\"\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n  \r\n\r\nlet jack = new Person();\r\n// 假设代码中没有对name赋值，例如调用\"jack.setName('Jack')\"\r\njack.getName().length; // 0, 没有运行时异常\n"})}),"\n",(0,s.jsx)(e.p,{children:"接下来的代码展示了如果name的值可以是undefined，那么应该如何写代码。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:'class Person {\r\n  name?: string; // 可能为`undefined`\r\n\r\n  setName(n:string): void {\r\n    this.name = n;\r\n  }\r\n\r\n  // 编译时错误：name可以是"undefined"，所以这个API的返回值类型不能仅定义为string类型\r\n  getNameWrong(): string {\r\n    return this.name;\r\n  }\r\n\r\n  getName(): string | undefined { // 返回类型匹配name的类型\r\n    return this.name;\r\n  }\r\n}\r\n\r\nlet jack = new Person();\r\n// 假设代码中没有对name赋值，例如调用"jack.setName(\'Jack\')"\r\n\r\n// 编译时错误：编译器认为下一行代码有可能会访问undefined的属性，报错\r\njack.getName().length;  // 编译失败\r\n\r\njack.getName()?.length; // 编译成功，没有运行时错误\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"getter和setter"})}),"\n",(0,s.jsx)(e.p,{children:"setter和getter可用于提供对对象属性的受控访问。"}),"\n",(0,s.jsx)(e.p,{children:"在以下示例中，setter用于禁止将_age属性设置为无效值："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  name: string = '';\r\n  private _age: number = 0;\r\n  get age(): number { return this._age; }\r\n  set age(x: number) {\r\n    if (x < 0) {\r\n      throw Error('Invalid age argument');\r\n    }\r\n    this._age = x;\r\n  }\r\n}\r\n\r\nlet p = new Person();\r\np.age; // 输出0\r\np.age = -42; // 设置无效age值会抛出错误\n"})}),"\n",(0,s.jsx)(e.p,{children:"在类中可以定义getter或者setter。"}),"\n",(0,s.jsxs)(e.h3,{id:"方法",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#方法",children:"#"}),"方法"]}),"\n",(0,s.jsx)(e.p,{children:"方法属于类。类可以定义实例方法或者静态方法。静态方法属于类本身，只能访问静态字段。而实例方法既可以访问静态字段，也可以访问实例字段，包括类的私有字段。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"实例方法"})}),"\n",(0,s.jsx)(e.p,{children:"以下示例说明了实例方法的工作原理。"}),"\n",(0,s.jsx)(e.p,{children:"calculateArea方法通过将高度乘以宽度来计算矩形的面积："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class RectangleSize {\r\n  private height: number = 0;\r\n  private width: number = 0;\r\n\r\n  constructor(height: number, width: number) {\r\n    this.height = height;\r\n    this.width = width;\r\n  }\r\n\r\n  calculateArea(): number {\r\n    return this.height * this.width;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"必须通过类的实例调用实例方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let square = new RectangleSize(10, 10);\r\nsquare.calculateArea(); // 输出：100\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"静态方法"})}),"\n",(0,s.jsx)(e.p,{children:"使用关键字static将方法声明为静态。静态方法属于类本身，只能访问静态字段。"}),"\n",(0,s.jsx)(e.p,{children:"静态方法定义了类作为一个整体的公共行为。"}),"\n",(0,s.jsx)(e.p,{children:"必须通过类名调用静态方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Cl {\r\n  static staticMethod(): string {\r\n    return 'this is a static method.';\r\n  }\r\n}\r\n\r\nconsole.log(Cl.staticMethod());\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"继承"})}),"\n",(0,s.jsx)(e.p,{children:"一个类可以继承另一个类（称为基类），并使用以下语法实现多个接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class [extends BaseClassName] [implements listOfInterfaces] {\r\n  // ...\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"继承类继承基类的字段和方法，但不继承构造函数。继承类可以新增定义字段和方法，也可以覆盖其基类定义的方法。"}),"\n",(0,s.jsx)(e.p,{children:"基类也称为“父类”或“超类”。继承类也称为“派生类”或“子类”。"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  name: string = '';\r\n  private _age = 0;\r\n  get age(): number {\r\n    return this._age;\r\n  }\r\n}\r\nclass Employee extends Person {\r\n  salary: number = 0;\r\n  calculateTaxes(): number {\r\n    return this.salary * 0.42;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"包含implements子句的类必须实现列出的接口中定义的所有方法，但使用默认实现定义的方法除外。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"interface DateInterface {\r\n  now(): string;\r\n}\r\nclass MyDate implements DateInterface {\r\n  now(): string {\r\n    // 在此实现\r\n    return 'now';\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"父类访问"})}),"\n",(0,s.jsx)(e.p,{children:"关键字super可用于访问父类的实例字段、实例方法和构造函数。在实现子类功能时，可以通过该关键字从父类中获取所需接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class RectangleSize {\r\n  protected height: number = 0;\r\n  protected width: number = 0;\r\n\r\n  constructor (h: number, w: number) {\r\n    this.height = h;\r\n    this.width = w;\r\n  }\r\n\r\n  draw() {\r\n    /* 绘制边界 */\r\n  }\r\n}\r\nclass FilledRectangle extends RectangleSize {\r\n  color = ''\r\n  constructor (h: number, w: number, c: string) {\r\n    super(h, w); // 父类构造函数的调用\r\n    this.color = c;\r\n  }\r\n\r\n  draw() {\r\n    super.draw(); // 父类方法的调用\r\n    // super.height -可在此处使用\r\n    /* 填充矩形 */\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"方法重写"})}),"\n",(0,s.jsx)(e.p,{children:"子类可以重写其父类中定义的方法的实现。重写的方法必须具有与原始方法相同的参数类型和相同或派生的返回类型。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class RectangleSize {\r\n  // ...\r\n  area(): number {\r\n    // 实现\r\n    return 0;\r\n  }\r\n}\r\nclass Square extends RectangleSize {\r\n  private side: number = 0;\r\n  area(): number {\r\n    return this.side * this.side;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"方法重载签名"})}),"\n",(0,s.jsx)(e.p,{children:"通过重载签名，指定方法的不同调用。具体方法为，为同一个方法写入多个同名但签名不同的方法头，方法实现紧随其后。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class C {\r\n  foo(x: number): void;            /* 第一个签名 */\r\n  foo(x: string): void;            /* 第二个签名 */\r\n  foo(x: number | string): void {  /* 实现签名 */\r\n  }\r\n}\r\nlet c = new C();\r\nc.foo(123);     // OK，使用第一个签名\r\nc.foo('aa'); // OK，使用第二个签名\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果两个重载签名的名称和参数列表均相同，则为错误。"}),"\n",(0,s.jsxs)(e.h3,{id:"构造函数",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构造函数",children:"#"}),"构造函数"]}),"\n",(0,s.jsx)(e.p,{children:"类声明可以包含用于初始化对象状态的构造函数。"}),"\n",(0,s.jsx)(e.p,{children:"构造函数定义如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"constructor ([parameters]) {\r\n  // ...\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果未定义构造函数，则会自动创建具有空参数列表的默认构造函数，例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Point {\r\n  x: number = 0;\r\n  y: number = 0;\r\n}\r\n\r\nlet p = new Point();\n"})}),"\n",(0,s.jsx)(e.p,{children:"在这种情况下，默认构造函数使用字段类型的默认值来初始化实例中的字段。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"派生类的构造函数"})}),"\n",(0,s.jsx)(e.p,{children:"构造函数函数体的第一条语句可以使用关键字super来显式调用直接父类的构造函数。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class RectangleSize {\r\n  constructor(width: number, height: number) {\r\n    // ...\r\n  }\r\n}\r\nclass Square extends RectangleSize {\r\n  constructor(side: number) {\r\n    super(side, side);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"构造函数重载签名"})}),"\n",(0,s.jsx)(e.p,{children:"我们可以通过编写重载签名，指定构造函数的不同调用方式。具体方法为，为同一个构造函数写入多个同名但签名不同的构造函数头，构造函数实现紧随其后。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class C {\r\n  constructor(x: number)             /* 第一个签名 */\r\n  constructor(x: string)             /* 第二个签名 */\r\n  constructor(x: number | string) {  /* 实现签名 */\r\n  }\r\n}\r\nlet c1 = new C(123);      // OK，使用第一个签名\r\nlet c2 = new C('abc');    // OK，使用第二个签名\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果两个重载签名的名称和参数列表均相同，则为错误。"}),"\n",(0,s.jsxs)(e.h3,{id:"可见性修饰符",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#可见性修饰符",children:"#"}),"可见性修饰符"]}),"\n",(0,s.jsx)(e.p,{children:"类的方法和属性都可以使用可见性修饰符。"}),"\n",(0,s.jsx)(e.p,{children:"可见性修饰符包括：private、protected和public。默认可见性为public。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Public（公有）"})}),"\n",(0,s.jsx)(e.p,{children:"public修饰的类成员（字段、方法、构造函数）在程序的任何可访问该类的地方都是可见的。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Private（私有）"})}),"\n",(0,s.jsx)(e.p,{children:"private修饰的成员不能在声明该成员的类之外访问，例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class C {\r\n  public x: string = '';\r\n  private y: string = '';\r\n  set_y (new_y: string) {\r\n    this.y = new_y; // OK，因为y在类本身中可以访问\r\n  }\r\n}\r\nlet c = new C();\r\nc.x = 'a'; // OK，该字段是公有的\r\nc.y = 'b'; // 编译时错误：'y'不可见\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Protected（受保护）"})}),"\n",(0,s.jsx)(e.p,{children:"protected修饰符的作用与private修饰符非常相似，不同点是protected修饰的成员允许在派生类中访问，例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Base {\r\n  protected x: string = '';\r\n  private y: string = '';\r\n}\r\nclass Derived extends Base {\r\n  foo() {\r\n    this.x = 'a'; // OK，访问受保护成员\r\n    this.y = 'b'; // 编译时错误，'y'不可见，因为它是私有的\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"对象字面量",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#对象字面量",children:"#"}),"对象字面量"]}),"\n",(0,s.jsx)(e.p,{children:"对象字面量是一个表达式，可用于创建类实例并提供一些初始值。它在某些情况下更方便，可以用来代替new表达式。"}),"\n",(0,s.jsx)(e.p,{children:"对象字面量的表示方式是：封闭在花括号对({})中的'属性名：值'的列表。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class C {\r\n  n: number = 0;\r\n  s: string = '';\r\n}\r\n\r\nlet c: C = {n: 42, s: 'foo'};\n"})}),"\n",(0,s.jsx)(e.p,{children:"ArkTS是静态类型语言，如上述示例所示，对象字面量只能在可以推导出该字面量类型的上下文中使用。其他正确的例子："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class C {\r\n  n: number = 0;\r\n  s: string = '';\r\n}\r\n\r\nfunction foo(c: C) {}\r\n\r\nlet c: C\r\n\r\nc = {n: 42, s: 'foo'};  // 使用变量的类型\r\nfoo({n: 42, s: 'foo'}); // 使用参数的类型\r\n\r\nfunction bar(): C {\r\n  return {n: 42, s: 'foo'}; // 使用返回类型\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"也可以在数组元素类型或类字段类型中使用："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class C {\r\n  n: number = 0;\r\n  s: string = '';\r\n}\r\nlet cc: C[] = [{n: 1, s: 'a'}, {n: 2, s: 'b'}];\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Record类型的对象字面量"})}),"\n",(0,s.jsx)(e.p,{children:"泛型Record<K, V>用于将类型（键类型）的属性映射到另一个类型（值类型）。常用对象字面量来初始化该类型的值："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let map: Record<string, number> = {\r\n  'John': 25,\r\n  'Mary': 21,\r\n}\r\n\r\nmap['John']; // 25\n"})}),"\n",(0,s.jsx)(e.p,{children:"类型K可以是字符串类型或数值类型，而V可以是任何类型。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"interface PersonInfo {\r\n  age: number;\r\n  salary: number;\r\n}\r\nlet map: Record<string, PersonInfo> = {\r\n  'John': { age: 25, salary: 10},\r\n  'Mary': { age: 21, salary: 20}\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"抽象类",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#抽象类",children:"#"}),"抽象类"]}),"\n",(0,s.jsx)(e.p,{children:"带有修饰符abstract的类称为抽象类。抽象类可用于表示一组更具体的概念所共有的概念。"}),"\n",(0,s.jsx)(e.p,{children:"如果尝试创建抽象类的实例，则会发生编译时的错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"abstract class X {\r\n  field: number;\r\n  constructor(p: number) {\r\n    this.field = p; \r\n  }\r\n}\r\n\r\nlet x = new X(666)  //编译时错误：不能创建抽象类的具体实例\n"})}),"\n",(0,s.jsx)(e.p,{children:"抽象类的子类可以是抽象类也可以是非抽象类。抽象父类的非抽象子类可以实例化。因此，执行抽象类的构造函数和该类非静态字段的字段初始化器："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"abstract class Base {\r\n  field: number;\r\n  constructor(p: number) { \r\n    this.field = p; \r\n  }\r\n}\r\n\r\nclass Derived extends Base {\r\n  constructor(p: number) {\r\n    super(p); \r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"抽象方法"})}),"\n",(0,s.jsx)(e.p,{children:"带有abstract修饰符的方法称为抽象方法，抽象方法可以被声明但不能被实现。"}),"\n",(0,s.jsx)(e.p,{children:"只有抽象类内才能有抽象方法，如果非抽象类具有抽象方法，则会发生编译时错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"abstract class Base {\r\n  field: number;\r\n  constructor(p: number) { \r\n    this.field = p; \r\n  }\r\n}\r\n\r\nclass Derived extends Base {\r\n  constructor(p: number) {\r\n    super(p); \r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"接口",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口",children:"#"}),"接口"]}),"\n",(0,s.jsx)(e.p,{children:"接口声明引入新类型。接口是定义代码协定的常见方式。"}),"\n",(0,s.jsx)(e.p,{children:"任何一个类的实例只要实现了特定接口，就可以通过该接口实现多态。"}),"\n",(0,s.jsx)(e.p,{children:"接口通常包含属性和方法的声明"}),"\n",(0,s.jsx)(e.p,{children:"示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"interface Style {\r\n  color: string; // 属性\r\n}\r\ninterface AreaSize {\r\n  calculateAreaSize(): number; // 方法的声明\r\n  someMethod(): void;     // 方法的声明\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"实现接口的类示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"// 接口：\r\ninterface AreaSize {\r\n  calculateAreaSize(): number; // 方法的声明\r\n  someMethod(): void;     // 方法的声明\r\n}\r\n\r\n// 实现：\r\nclass RectangleSize implements AreaSize {\r\n  private width: number = 0;\r\n  private height: number = 0;\r\n  someMethod(): void {\r\n    console.log('someMethod called');\r\n  }\r\n  calculateAreaSize(): number {\r\n    this.someMethod(); // 调用另一个方法并返回结果\r\n    return this.width * this.height;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"接口属性",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口属性",children:"#"}),"接口属性"]}),"\n",(0,s.jsx)(e.p,{children:"接口属性可以是字段、getter、setter或getter和setter组合的形式。"}),"\n",(0,s.jsx)(e.p,{children:"属性字段只是getter/setter对的便捷写法。以下表达方式是等价的："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"interface Style {\r\n  color: string;\r\n}\r\n// 等价于\r\ninterface Style {\r\n  get color(): string;\r\n\r\n  set color(x: string);\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"实现接口的类也可以使用以下两种方式："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"interface Style {\r\n  color: string;\r\n}\r\n\r\nclass StyledRectangle implements Style {\r\n  color: string = '';\r\n}\r\n// 或\r\n\r\nclass StyledRectangle implements Style {\r\n  private _color: string = '';\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n\r\n  set color(x: string) {\r\n    this._color = x;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"接口继承",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口继承",children:"#"}),"接口继承"]}),"\n",(0,s.jsx)(e.p,{children:"接口可以继承其他接口，如下面的示例所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"interface Style {\r\n  color: string;\r\n}\r\n\r\ninterface ExtendedStyle extends Style {\r\n  width: number;\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"继承接口包含被继承接口的所有属性和方法，还可以添加自己的属性和方法。"}),"\n",(0,s.jsxs)(e.h3,{id:"抽象类和接口",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#抽象类和接口",children:"#"}),"抽象类和接口"]}),"\n",(0,s.jsx)(e.p,{children:"抽象类与接口都无法实例化。抽象类是类的抽象，抽象类用来捕捉子类的通用特性，接口是行为的抽象。在ArkTS中抽象类与接口的区别如下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"一个类只能继承一个抽象类，而一个类可以实现一个或多个接口；"}),"\n",(0,s.jsx)(e.li,{children:"接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；"}),"\n",(0,s.jsx)(e.li,{children:"抽象类里面可以有方法的实现，但是接口完全都是抽象的，不存在方法的实现；"}),"\n",(0,s.jsx)(e.li,{children:"抽象类可以有构造函数，而接口不能有构造函数。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"泛型类型和函数",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型类型和函数",children:"#"}),"泛型类型和函数"]}),"\n",(0,s.jsx)(e.p,{children:"泛型类型和函数允许创建的代码在各种类型上运行，而不仅支持单一类型。"}),"\n",(0,s.jsxs)(e.h3,{id:"泛型类和接口",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型类和接口",children:"#"}),"泛型类和接口"]}),"\n",(0,s.jsx)(e.p,{children:"类和接口可以定义为泛型，将参数添加到类型定义中，如以下示例中的类型参数Element："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class CustomStack<Element> {\r\n  public push(e: Element):void {\r\n    // ...\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"要使用类型CustomStack，必须为每个类型参数指定类型实参："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let s = new CustomStack<string>();\r\ns.push('hello');\n"})}),"\n",(0,s.jsx)(e.p,{children:"编译器在使用泛型类型和函数时会确保类型安全。参见以下示例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let s = new CustomStack<string>();\r\ns.push(55); // 将会产生编译时错误\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"泛型约束",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型约束",children:"#"}),"泛型约束"]}),"\n",(0,s.jsx)(e.p,{children:"泛型类型的类型参数可以被限制只能取某些特定的值。例如，MyHashMap<Key, Value>这个类中的Key类型参数必须具有hash方法。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"interface Hashable {\r\n  hash(): number;\r\n}\r\nclass MyHashMap<Key extends Hashable, Value> {\r\n  public set(k: Key, v: Value) {\r\n    let h = k.hash();\r\n    // ...其他代码...\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"在上面的例子中，Key类型扩展了Hashable，Hashable接口的所有方法都可以为key调用。"}),"\n",(0,s.jsxs)(e.h3,{id:"泛型函数",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型函数",children:"#"}),"泛型函数"]}),"\n",(0,s.jsx)(e.p,{children:"使用泛型函数可编写更通用的代码。比如返回数组最后一个元素的函数："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function last(x: number[]): number {\r\n  return x[x.length - 1];\r\n}\r\n\r\nlast([1, 2, 3]); // 3\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果需要为任何数组定义相同的函数，使用类型参数将该函数定义为泛型："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"function last<T>(x: T[]): T {\r\n  return x[x.length - 1];\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"现在，该函数可以与任何数组一起使用。"}),"\n",(0,s.jsx)(e.p,{children:"在函数调用中，类型实参可以显式或隐式设置："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"// 显式设置的类型实参\r\nlast<string>(['aa', 'bb']);\r\nlast<number>([1, 2, 3]);\r\n\r\n// 隐式设置的类型实参\r\n// 编译器根据调用参数的类型来确定类型实参\r\nlast([1, 2, 3]);\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"泛型默认值",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型默认值",children:"#"}),"泛型默认值"]}),"\n",(0,s.jsx)(e.p,{children:"泛型类型的类型参数可以设置默认值。这样可以不指定实际的类型实参，而只使用泛型类型名称。下面的示例展示了类和函数的这一点。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class SomeType {}\r\ninterface Interface <T1 = SomeType> { }\r\nclass Base <T2 = SomeType> { }\r\nclass Derived1 extends Base implements Interface { }\r\n// Derived1在语义上等价于Derived2\r\nclass Derived2 extends Base<SomeType> implements Interface<SomeType> { }\r\n\r\nfunction foo<T = number>(): T {\r\n  // ...\r\n}\r\nfoo();\r\n// 此函数在语义上等价于下面的调用\r\nfoo<number>();\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"空安全",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#空安全",children:"#"}),"空安全"]}),"\n",(0,s.jsx)(e.p,{children:"默认情况下，ArkTS中的所有类型都是不可为空的，因此类型的值不能为空。这类似于TypeScript的严格空值检查模式（strictNullChecks），但规则更严格。"}),"\n",(0,s.jsx)(e.p,{children:"在下面的示例中，所有行都会导致编译时错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let x: number = null;    // 编译时错误\r\nlet y: string = null;    // 编译时错误\r\nlet z: number[] = null;  // 编译时错误\n"})}),"\n",(0,s.jsx)(e.p,{children:"可以为空值的变量定义为联合类型T | null。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"let x: number | null = null;\r\nx = 1;    // ok\r\nx = null; // ok\r\nif (x != null) { /* do something */ }\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"非空断言运算符",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#非空断言运算符",children:"#"}),"非空断言运算符"]}),"\n",(0,s.jsx)(e.p,{children:"后缀运算符!可用于断言其操作数为非空。"}),"\n",(0,s.jsx)(e.p,{children:"应用于可空类型的值时，它的编译时类型变为非空类型。例如，类型将从T | null更改为T："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class A {\r\n  value: number = 0;\r\n}\r\n\r\nfunction foo(a: A | null) {\r\n  a.value;   // 编译时错误：无法访问可空值的属性\r\n  a!.value;  // 编译通过，如果运行时a的值非空，可以访问到a的属性；如果运行时a的值为空，则发生运行时异常\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"空值合并运算符",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#空值合并运算符",children:"#"}),"空值合并运算符"]}),"\n",(0,s.jsx)(e.p,{children:"空值合并二元运算符??用于检查左侧表达式的求值是否等于null或者undefined。如果是，则表达式的结果为右侧表达式；否则，结果为左侧表达式。"}),"\n",(0,s.jsx)(e.p,{children:"换句话说，a ?? b等价于三元运算符(a != null && a != undefined) ? a : b。"}),"\n",(0,s.jsx)(e.p,{children:"在以下示例中，getNick方法如果设置了昵称，则返回昵称；否则，返回空字符串："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  // ...\r\n  nick: string | null = null;\r\n  getNick(): string {\r\n    return this.nick ?? '';\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"可选链",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#可选链",children:"#"}),"可选链"]}),"\n",(0,s.jsx)(e.p,{children:"在访问对象属性时，如果该属性是undefined或者null，可选链运算符会返回undefined。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  nick: string | null = null;\r\n  spouse?: Person\r\n\r\n  setSpouse(spouse: Person): void {\r\n    this.spouse = spouse;\r\n  }\r\n\r\n  getSpouseNick(): string | null | undefined {\r\n    return this.spouse?.nick;\r\n  }\r\n\r\n  constructor(nick: string) {\r\n    this.nick = nick;\r\n    this.spouse = undefined;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"说明"}),"：getSpouseNick的返回类型必须为string | null | undefined，因为该方法可能返回null或者undefined。"]}),"\n",(0,s.jsx)(e.p,{children:"可选链可以任意长，可以包含任意数量的?.运算符。"}),"\n",(0,s.jsx)(e.p,{children:"在以下示例中，如果一个Person的实例有不为空的spouse属性，且spouse有不为空的nick属性，则输出spouse.nick。否则，输出undefined："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class Person {\r\n  nick: string | null = null;\r\n  spouse?: Person;\r\n\r\n  constructor(nick: string) {\r\n    this.nick = nick;\r\n    this.spouse = undefined;\r\n  }\r\n}\r\n\r\nlet p: Person = new Person('Alice');\r\np.spouse?.nick; // undefined\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"模块",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模块",children:"#"}),"模块"]}),"\n",(0,s.jsx)(e.p,{children:"程序可划分为多组编译单元或模块。"}),"\n",(0,s.jsx)(e.p,{children:"每个模块都有其自己的作用域，即，在模块中创建的任何声明（变量、函数、类等）在该模块之外都不可见，除非它们被显式导出。"}),"\n",(0,s.jsx)(e.p,{children:"与此相对，从另一个模块导出的变量、函数、类、接口等必须首先导入到模块中。"}),"\n",(0,s.jsxs)(e.h3,{id:"导出",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#导出",children:"#"}),"导出"]}),"\n",(0,s.jsx)(e.p,{children:"可以使用关键字export导出顶层的声明。"}),"\n",(0,s.jsx)(e.p,{children:"未导出的声明名称被视为私有名称，只能在声明该名称的模块中使用。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"export class Point {\r\n  x: number = 0;\r\n  y: number = 0;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\nexport let Origin = new Point(0, 0);\r\n\r\nexport function Distance(p1: Point, p2: Point): number {\r\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"导入",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#导入",children:"#"}),"导入"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"静态导入"})}),"\n",(0,s.jsx)(e.p,{children:"导入声明用于导入从其他模块导出的实体，并在当前模块中提供其绑定。导入声明由两部分组成："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"导入路径，用于指定导入的模块；"}),"\n",(0,s.jsx)(e.li,{children:"导入绑定，用于定义导入的模块中的可用实体集和使用形式（限定或不限定使用）。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"导入绑定可以有几种形式。"}),"\n",(0,s.jsx)(e.p,{children:"假设模块具有路径“./utils”和导出实体“X”和“Y”。"}),"\n",(0,s.jsx)(e.p,{children:"导入绑定* as A表示绑定名称“A”，通过A.name可访问从导入路径指定的模块导出的所有实体："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"import * as Utils from './utils';\r\n\r\nUtils.X // 表示来自Utils的XUtils.Y // 表示来自Utils的Y\n"})}),"\n",(0,s.jsx)(e.p,{children:"导入绑定{ ident1, ..., identN }表示将导出的实体与指定名称绑定，该名称可以用作简单名称："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"import {X, Y} from './utils';\r\n\r\nX // 表示来自utils的XY // 表示来自utils的Y\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果标识符列表定义了ident as alias，则实体ident将绑定在名称alias下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"import {X as Z, Y} from './utils';\r\n\r\nZ // 表示来自Utils的XY // 表示来自Utils的YX // 编译时错误：'X'不可见\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"动态导入"})}),"\n",(0,s.jsx)(e.p,{children:"应用开发的有些场景中，如果希望根据条件导入模块或者按需导入模块，可以使用动态导入代替静态导入。"}),"\n",(0,s.jsx)(e.p,{children:"import()语法通常称为动态导入（dynamic import），是一种类似函数的表达式，用来动态导入模块。以这种方式调用，将返回一个promise。"}),"\n",(0,s.jsx)(e.p,{children:"如下例所示，import(modulePath)可以加载模块并返回一个promise，该promise resolve为一个包含其所有导出的模块对象。该表达式可以在代码中的任意位置调用。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:'// Calc.ts\r\nexport function add(a:number, b:number):number {\r\n  let c = a + b;\r\n  console.info(\'Dynamic import, %d + %d = %d\', a, b, c);\r\n  return c;\r\n}\r\n\r\n// Index.ts\r\nimport("./Calc").then((obj: ESObject) => {\r\n  console.info(obj.add(3, 5));  \r\n}).catch((err: Error) => {\r\n  console.error("Module dynamic import error: ", err);\r\n});\n'})}),"\n",(0,s.jsx)(e.p,{children:"如果在异步函数中，可以使用let module = await import(modulePath)。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"// say.ts\r\nexport function hi() {\r\n  console.log('Hello');\r\n}\r\nexport function bye() {\r\n  console.log('Bye');\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"那么，可以像下面这样进行动态导入："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"async function test() {\r\n  let ns = await import('./say');\r\n  let hi = ns.hi;\r\n  let bye = ns.bye;\r\n  hi();\r\n  bye();\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["更多的使用动态import的业务场景和使用实例见",(0,s.jsx)(e.a,{href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-dynamic-import-V5",rel:"noopener noreferrer",target:"_blank",children:"动态import"}),"。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"导入HarmonyOS SDK的开放能力"})}),"\n",(0,s.jsx)(e.p,{children:"HarmonyOS SDK提供的开放能力（接口）也需要在导入声明后使用。可直接导入接口模块来使用该模块内的所有接口能力，例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"import UIAbility from '@ohos.app.ability.UIAbility';\n"})}),"\n",(0,s.jsx)(e.p,{children:"从HarmonyOS NEXT Developer Preview\r\n1版本开始引入Kit概念。SDK对同一个Kit下的接口模块进行了封装，开发者在示例代码中可通过导入Kit的方式来使用Kit所包含的接口能力。其中，Kit封装的接口模块可查看SDK目录下Kit子目录中各Kit的定义。"}),"\n",(0,s.jsx)(e.p,{children:"通过导入Kit方式使用开放能力有三种方式："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"方式一：导入Kit下单个模块的接口能力。例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"import { UIAbility } from '@kit.AbilityKit';\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"方式二：导入Kit下多个模块的接口能力。例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"import { UIAbility, Ability, Context } from '@kit.AbilityKit';\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"方式三：导入Kit包含的所有模块的接口能力。例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"import * as module from '@kit.AbilityKit';\n"})}),"\n",(0,s.jsx)(e.p,{children:"其中，“module”为别名，可自定义，然后通过该名称调用模块的接口。"}),"\n",(0,s.jsx)(e.p,{children:"说明"}),"\n",(0,s.jsx)(e.p,{children:"方式三可能会导入过多无需使用的模块，导致编译后的HAP包太大，占用过多资源，请谨慎使用。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"顶层语句",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#顶层语句",children:"#"}),"顶层语句"]}),"\n",(0,s.jsx)(e.p,{children:"顶层语句是指在模块的最外层直接编写的语句，这些语句不被包裹在任何函数、类、块级作用域中。顶层语句包括变量声明、函数声明、表达式等。"}),"\n",(0,s.jsxs)(e.h2,{id:"关键字",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#关键字",children:"#"}),"关键字"]}),"\n",(0,s.jsxs)(e.h3,{id:"this",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#this",children:"#"}),"this"]}),"\n",(0,s.jsx)(e.p,{children:"关键字this只能在类的实例方法中使用。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"示例"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class A {\r\n  count: string = 'a';\r\n\r\n  m(i: string): void {\r\n    this.count = i;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"使用限制："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"不支持this类型"}),"\n",(0,s.jsx)(e.li,{children:"不支持在函数和类的静态方法中使用this"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"示例"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",meta:"",children:"class A {\r\n  n: number = 0;\r\n  f1(arg1: this) {} // 编译时错误，不支持this类型\r\n  static f2(arg1: number) {\r\n    this.n = arg1;  // 编译时错误，不支持在类的静态方法中使用this\r\n  }\r\n}\r\n\r\nfunction foo(arg1: number) {\r\n  this.n = i;       // 编译时错误，不支持在函数中使用this\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"关键字this的指向:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"调用实例方法的对象"}),"\n",(0,s.jsx)(e.li,{children:"正在构造的对象"}),"\n"]})]})}function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(l,n)})):l(n)}let c=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["harmony%2Fkaifajichu%2Fpart6.md"]={toc:[{id:"基本知识",text:"基本知识",depth:2},{id:"声明",text:"声明",depth:3},{id:"类型",text:"类型",depth:3},{id:"运算符",text:"运算符",depth:3},{id:"语句",text:"语句",depth:3},{id:"函数",text:"函数",depth:2},{id:"函数声明",text:"函数声明",depth:3},{id:"可选参数",text:"可选参数",depth:3},{id:"rest参数",text:"Rest参数",depth:3},{id:"返回类型",text:"返回类型",depth:3},{id:"函数的作用域",text:"函数的作用域",depth:3},{id:"函数调用",text:"函数调用",depth:3},{id:"函数类型",text:"函数类型",depth:3},{id:"箭头函数又名lambda函数",text:"箭头函数（又名Lambda函数）",depth:3},{id:"闭包",text:"闭包",depth:3},{id:"函数重载",text:"函数重载",depth:3},{id:"类",text:"类",depth:2},{id:"字段",text:"字段",depth:3},{id:"方法",text:"方法",depth:3},{id:"构造函数",text:"构造函数",depth:3},{id:"可见性修饰符",text:"可见性修饰符",depth:3},{id:"对象字面量",text:"对象字面量",depth:3},{id:"抽象类",text:"抽象类",depth:3},{id:"接口",text:"接口",depth:2},{id:"接口属性",text:"接口属性",depth:3},{id:"接口继承",text:"接口继承",depth:3},{id:"抽象类和接口",text:"抽象类和接口",depth:3},{id:"泛型类型和函数",text:"泛型类型和函数",depth:2},{id:"泛型类和接口",text:"泛型类和接口",depth:3},{id:"泛型约束",text:"泛型约束",depth:3},{id:"泛型函数",text:"泛型函数",depth:3},{id:"泛型默认值",text:"泛型默认值",depth:3},{id:"空安全",text:"空安全",depth:2},{id:"非空断言运算符",text:"非空断言运算符",depth:3},{id:"空值合并运算符",text:"空值合并运算符",depth:3},{id:"可选链",text:"可选链",depth:3},{id:"模块",text:"模块",depth:2},{id:"导出",text:"导出",depth:3},{id:"导入",text:"导入",depth:3},{id:"顶层语句",text:"顶层语句",depth:3},{id:"关键字",text:"关键字",depth:2},{id:"this",text:"this",depth:3}],title:"**ArkTS语言介绍**",headingTitle:"**ArkTS语言介绍**",frontmatter:{}}}}]);