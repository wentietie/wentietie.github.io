"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["2804"],{44997:function(e,n,r){r.r(n),r.d(n,{default:function(){return s}});var t=r(85893),a=r(50065);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ol:"ol",li:"li",ul:"ul",h2:"h2",pre:"pre",code:"code",h3:"h3",h4:"h4"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"vue2原理分析",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vue2原理分析",children:"#"}),"VUE2原理分析"]}),"\n",(0,t.jsxs)(n.p,{children:["MVVM框架的三要素：",(0,t.jsx)(n.strong,{children:"数据响应式、模板引擎、渲染"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"数据响应式：监听数据的变化并在视图中更新"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Object.defineProperty()   ---vue2"}),"\n",(0,t.jsx)(n.li,{children:"Proxy ---vue3"}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"模板引擎"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"插值： {{}}"}),"\n",(0,t.jsx)(n.li,{children:"指令： v-bind, v-on, v-model, v-for, v-if"}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"渲染: 将模板转换为html"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"模板 => vdom => dom"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"数据响应式原理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据响应式原理",children:"#"}),"数据响应式原理"]}),"\n",(0,t.jsx)(n.p,{children:"简单实现"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"/**\r\n * 首先实现简单对象的访问拦截\r\n * @type {{}}\r\n */\r\nconst obj = {}\r\n\r\nfunction defineReactive(obj, key, value) {\r\n    Object.defineProperty(obj, key, {\r\n        get() {\r\n            console.log('get:::' + key);\r\n            return value\r\n        },\r\n        set(newVal) {\r\n            if (newVal != value) {\r\n                console.log('set:::' + key + \"=\" + newVal)\r\n                value = newVal\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\ndefineReactive(obj, 'foo', 'foo')\r\nobj.foo // get:::foo\r\nobj.foo = '123' // set:::foo=123\n"})}),"\n",(0,t.jsx)(n.p,{children:"此时我们可以监听到对象的更改。这样我们就需要在监听到更改的同时去更新页面上的内容。 现在我们来对上边的方法进行一些修改。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"function defineReactive(obj, key, value) {\r\n    Object.defineProperty(obj, key, {\r\n        get() {\r\n            console.log('get:::' + key);\r\n            return value\r\n        },\r\n        set(newVal) {\r\n            if (newVal != value) {\r\n                console.log('set:::' + key + \"=\" + newVal)\r\n                value = newVal\r\n                reactive(newVal)\r\n                // 在这个地方我们监听到了对象的修改那我们就需要在更改之后调用更新页面的方法\r\n                update()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction update() {\r\n    // 执行更新\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"现在响应式的雏形已经具备了。 现在我们需要实现一个响应式的入口方法"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"// 当前只讨论对象的响应式，数组是通过重写数组的原始方法实现的。\r\nfunction reactive(target) {\r\n    // 首先，不是对象直接返回\r\n    if (typeof target !== 'object' || target === null) {\r\n        return target\r\n    }\r\n    // 如果是对象的话，则要遍历对象的key\r\n    Object.keys(target).map(key => {\r\n        defineReactive(target, key, target[key])\r\n    })\r\n}\r\n\r\n// 此时需要递归遍历对象，使对象所有的值都拦截到\r\nfunction defineReactive(obj, key, value) {\r\n    reactive(value)\r\n    Object.defineProperty(obj, key, {\r\n        get() {\r\n            console.log('get:::' + key);\r\n            return value\r\n        },\r\n        set(newVal) {\r\n            if (newVal != value) {\r\n                // 修改的时候将新的值改为响应式\r\n                reactive(newVal)\r\n                console.log('set:::' + key + \"=\" + newVal)\r\n                value = newVal\r\n                // 在这个地方我们监听到了对象的修改那我们就需要在更改之后调用更新页面的方法\r\n                update()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nconst reactiveData = reactive(data)\n"})}),"\n",(0,t.jsx)(n.p,{children:"到此就实现了vue对象的简单响应式"}),"\n",(0,t.jsxs)(n.h2,{id:"vue中的数据响应化",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vue中的数据响应化",children:"#"}),"Vue中的数据响应化"]}),"\n",(0,t.jsxs)(n.h3,{id:"原理分析",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#原理分析",children:"#"}),"原理分析"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"new Vue()首先进行初始化，对data执行响应化处理。这个过程发生在Observer中"}),"\n",(0,t.jsx)(n.li,{children:"同时对模板进行编译，倒找其中动态绑定的数据，从data中获取并初始化视图，这个过程发生在Compile中"}),"\n",(0,t.jsx)(n.li,{children:"定义一个更新函数和watcher，将来对应数据变化时，watcher会调用更新函数"}),"\n",(0,t.jsx)(n.li,{children:"由于data的某个key在一个视图中可能出现多次，所以每个key需要一个管家dep管理多个watcher"}),"\n",(0,t.jsx)(n.li,{children:"data数据发生变化，找到对应的dep，通知所有的watcher执行更新函数。"}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"框架构造函数",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#框架构造函数",children:"#"}),"框架构造函数"]}),"\n",(0,t.jsx)(n.p,{children:"执行初始化操作。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"class Vue {\r\n    constructor(options) {\r\n        this.$options = options\r\n        this.$data = options.data\r\n        // 监听数据\r\n        observe(this.$data)\r\n        // 将data的数据挂载到vue实例上\r\n        proxy(this)\r\n    }\r\n}\r\n\r\nfunction observe(obj) {\r\n    if (typeof obj !== 'object' || obj == null) {\r\n        return\r\n    }\r\n    new Observer(obj)\r\n\r\n}\r\n\r\nfunction proxy(vm) {\r\n    Object.keys(vm.$data).map(key => {\r\n        Object.defineProperty(vm, key, {\r\n            get() {\r\n                return vm.$data[key]\r\n            },\r\n            set(val) {\r\n                vm.$data[key] = val\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nclass Observer {\r\n    constructor(value) {\r\n        this.value = value\r\n        this.walk(value)\r\n    }\r\n\r\n    reactive(target) {\r\n        // 首先，不是对象直接返回\r\n        if (typeof target !== 'object' || target === null) {\r\n            return target\r\n        }\r\n        // 如果是对象的话，则要遍历对象的key\r\n        Object.keys(target).map(key => {\r\n            defineReactive(target, key, target[key])\r\n        })\r\n    }\r\n}\r\n\r\n// 此时需要递归遍历对象，使对象所有的值都拦截到\r\nfunction defineReactive(obj, key, value) {\r\n    reactive(value)\r\n    Object.defineProperty(obj, key, {\r\n        get() {\r\n            console.log('get:::' + key);\r\n            return value\r\n        },\r\n        set(newVal) {\r\n            if (newVal != value) {\r\n                // 修改的时候将新的值改为响应式\r\n                reactive(newVal)\r\n                console.log('set:::' + key + \"=\" + newVal)\r\n                value = newVal\r\n                // 在这个地方我们监听到了对象的修改那我们就需要在更改之后调用更新页面的方法\r\n                update()\r\n            }\r\n        }\r\n    })\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"编译",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译",children:"#"}),"编译"]}),"\n",(0,t.jsx)(n.p,{children:"编译模板中的vue语法，初始化视图，更新视图"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:'class Compile {\r\n    constructor(el, vm) {\r\n        this.$vm = vm\r\n        this.$el = document.querySelector(this.$el)\r\n        if (this.$el) {\r\n            this.compile(this.$el)\r\n        }\r\n    }\r\n\r\n    compile(el) {\r\n        const childNodes = [...el.childNodes]\r\n        childNodes.map(node => {\r\n            if (this.isElement(node)) {\r\n                // 编译元素\r\n                this.compileElement(node)\r\n            } else if (this.isInterpolation(node)) {\r\n                // 编译插值文本\r\n                this.compileText(node);\r\n            }\r\n\r\n            if (node.childNodes && node.childNodes.length > 0) {\r\n                this.compile(node)\r\n            }\r\n        })\r\n    }\r\n\r\n    isElement(node){\r\n        return node.nodeType == 1 // 元素节点是1， 属性节点是2，文本节点是3\r\n    }\r\n    isInterpolation(node) {\r\n        return node.nodeType == 3 && /\\{\\{(.*)\\}\\}/.test(node.textContent);\r\n    }\r\n\r\n    compileText(node) {\r\n        node.textContent = this.$vm[RegExp.$1];\r\n    }\r\n\r\n    compileElement(node) {\r\n        let nodeAttrs = [...node.attributes];\r\n        nodeAttrs.forEach(attr => {\r\n            let attrName = attr.name;\r\n            let exp = attr.value;\r\n            // 判断是否有自定义指令\r\n            if (this.isDirective(attrName)) {\r\n                let dir = attrName.substring(2);\r\n                // 执行自定义指令方法\r\n                this[dir] && this[dir](node, exp);\r\n            }\r\n        });\r\n    }\r\n\r\n    isDirective(attr) {\r\n        return attr.findIndex("v-") === 0;\r\n    }\r\n    \r\n    // 指令方法\r\n    /**\r\n     * @param node 当前指定节点\r\n     * @param exp 当前指令的值\r\n     */\r\n    for(node, exp){\r\n        // v-for 的方法\r\n    }\r\n    if(node, exp){\r\n        // v-if 的方法\r\n    }\r\n}\r\n\r\n\r\n\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"收集依赖",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#收集依赖",children:"#"}),"收集依赖"]}),"\n",(0,t.jsx)(n.p,{children:"实现思路"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"响应式化时为每一个key创建一个依赖Dep"}),"\n",(0,t.jsx)(n.li,{children:"初始化时读取某个key，为这个key创建一个观察者watcher"}),"\n",(0,t.jsx)(n.li,{children:"触发key的get方法时，将观察者添加到key对应的依赖中"}),"\n",(0,t.jsx)(n.li,{children:"当key的set触发时，通过对应的Dep通知其管理所有的观察者进行更新。"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:""})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)}let s=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["formwork%2Fvue%2Fvueyuanli.md"]={toc:[{id:"数据响应式原理",text:"数据响应式原理",depth:2},{id:"vue中的数据响应化",text:"Vue中的数据响应化",depth:2},{id:"原理分析",text:"原理分析",depth:3},{id:"框架构造函数",text:"框架构造函数",depth:4},{id:"编译",text:"编译",depth:3},{id:"收集依赖",text:"收集依赖",depth:3}],title:"VUE2原理分析",headingTitle:"VUE2原理分析",frontmatter:{}}}}]);