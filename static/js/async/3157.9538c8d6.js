"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["3157"],{64503:function(n,e,r){r.r(e),r.d(e,{default:()=>N});var s=r("85893"),i=r("50065");let l=r.p+"static/image/image-20220825164049430.789e4924.png",c=r.p+"static/image/image-20220823155818208.ce186d29.png",t=r.p+"static/image/image-20220823101949484.1bde0b76.png",d=r.p+"static/image/image-20220818162952056.9eda61cf.png",h=r.p+"static/image/image-20220816165924940.e0bf118d.png",a=r.p+"static/image/image-20220815165502670.06254b8b.png",o=r.p+"static/image/image-20220815151402120.2226c75a.png",x=r.p+"static/image/image-20220812144744808.df631dd0.png",j=r.p+"static/image/image-20220812110644290.16b3feb9.png",p=r.p+"static/image/image-20220812110613473.ec322851.png",u=r.p+"static/image/image-20220812110449683.9ec2cbb4.png",m=r.p+"static/image/image-20220812110231975.d96d0fb0.png",g=r.p+"static/image/image-20220812105904439.a27df0ae.png",v=r.p+"static/image/image-20220810153841907.ce7335e9.png";function f(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",p:"p",blockquote:"blockquote",code:"code",pre:"pre",img:"img"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"vue组件编程",children:["Vue组件编程",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#vue组件编程",children:"#"})]}),"\n",(0,s.jsxs)(e.h1,{id:"1定义",children:["1.定义",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1定义",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"11-模块",children:["1.1 模块",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#11-模块",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"理解：向外提供特定功能的js代码，一般就是一个js文件"}),"\n",(0,s.jsx)(e.li,{children:"为什么要使用模块：js文件很多很复杂"}),"\n",(0,s.jsx)(e.li,{children:"作用：复用js，简化js的编写，提高js运行效率"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"12-组件",children:["1.2 组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#12-组件",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"理解：用来实现==局部（特定）功能==效果的代码的==集合=="}),"\n",(0,s.jsx)(e.li,{children:"为什么要使用组件：一个界面的功能很复杂"}),"\n",(0,s.jsx)(e.li,{children:"作用：提高代码的复用，简化编码，提高运行效率"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"13-模块化",children:["1.3 模块化",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#13-模块化",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"当应用中的js都以模块来编写的，那么这个应用就是一个模块化的应用"}),"\n",(0,s.jsxs)(e.h2,{id:"14-组件化",children:["1.4 组件化",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#14-组件化",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"当应用中的功能都是以多组件的方式来编写的，那么这个应用就是一个组件化的应用"}),"\n",(0,s.jsxs)(e.h2,{id:"15-非单文件组件",children:["1.5 非单文件组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#15-非单文件组件",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"一个文件中包含有n个组件"}),"\n",(0,s.jsxs)(e.h2,{id:"16-单文件组件",children:["1.6 单文件组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#16-单文件组件",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"一个文件中只包含1个组件"}),"\n",(0,s.jsxs)(e.h1,{id:"2组件",children:["2.组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2组件",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"21-组件的基本使用",children:["2.1 组件的基本使用",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#21-组件的基本使用",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"Vue中使用组件的三大步骤"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"定义组件（创建组件）"}),"\n",(0,s.jsx)(e.li,{children:"注册组件"}),"\n",(0,s.jsx)(e.li,{children:"使用组件（编写组件标签）"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"定义组件"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"语法："}),"\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.code,{children:"Vue.extend(options)"}),"创建。其中",(0,s.jsx)(e.code,{children:"options"}),"和",(0,s.jsx)(e.code,{children:"new Vue(options)"}),"时传入的",(0,s.jsx)(e.code,{children:"options"}),"几乎一样，仅有的区别如下："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"el"}),"不要写（原因：最终所有的组件都要经过一个Vue实例管理，由Vue实例中的el决定服务哪个容器）"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"data"}),"必须写成函数（原因：避免组件被复用时，数据存在引用关系）"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"备注："}),"\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.code,{children:"template"}),"可以配置组件结构"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"示例："}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 学生组件\r\n    const student = Vue.extend({\r\n        template: `<div>\r\n            <h2>学生姓名：{{studentName}}</h2>\r\n            <h2>学生年龄：{{age}}</h2>\r\n            </div>`,\r\n        data() {\r\n            return {\r\n                studentName: '张三',\r\n                age: 18\r\n            }\r\n        }\r\n    })\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"注册组件"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["局部注册：靠",(0,s.jsx)(e.code,{children:"new Vue"}),"的时候传入",(0,s.jsx)(e.code,{children:"components"}),"选项"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"new Vue({\r\n        el: '#root',\r\n        data: {\r\n            msg: '你好啊!'\r\n        },\r\n        components: { // 组件\r\n            student\r\n        }\r\n    })\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["全局注册：靠",(0,s.jsx)(e.code,{children:"Vue.component('组件名', 组件)"}),"注册"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"Vue.component('school',school)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"编写组件标签"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["​	",(0,s.jsx)(e.code,{children:"<组件名></组件名>"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"完整代码"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>组件的基本使用（非单文件）</title>\r\n    <script src="../js/vue.js"><\/script>\r\n</head>\r\n<body>\r\n    <div id="root">\r\n        <h2>{{msg}}</h2>\r\n        <hr>\r\n        \x3c!-- 第三步：编写学生组件标签 --\x3e\r\n        <student></student>\r\n        <hr>\r\n        \x3c!-- 第三步：编写学校组件标签 --\x3e\r\n        <school></school>\r\n    </div>\r\n</body>\r\n<script type="text/javascript">\r\n    // 第一步：定义学生组件\r\n    const student = Vue.extend({\r\n        template: `<div>\r\n            <h2>学生姓名：{{studentName}}</h2>\r\n            <h2>学生年龄：{{age}}</h2>\r\n            </div>`,\r\n        data() {\r\n            return {\r\n                studentName: \'张三\',\r\n                age: 18\r\n            }\r\n        }\r\n    })\r\n\r\n    // 第一步：定义学校组件\r\n    const school = Vue.extend({\r\n        template: `<div>\r\n            <h2>学校名称：{{schoolName}}</h2>\r\n            <h2>学校地址：{{address}}</h2>\r\n            </div>`,\r\n        data() {\r\n            return {\r\n                schoolName: \'尚硅谷\',\r\n                address: \'北京\'\r\n            }\r\n        }\r\n    })\r\n    \r\n    // 第二步：注册全局组件\r\n    Vue.component(\'school\',school)\r\n\r\n    // 第二步：注册局部组件\r\n    new Vue({\r\n        el: \'#root\',\r\n        data: {\r\n            msg: \'你好啊!\'\r\n        },\r\n        components: {\r\n            student\r\n        }\r\n    })\r\n<\/script>\r\n</html>\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"22-组件几个注意点",children:["2.2 组件几个注意点",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#22-组件几个注意点",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"关于组件名"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["一个单词组成：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"第一种写法（首字母小写）：school"}),"\n",(0,s.jsx)(e.li,{children:"第二种写法（首字母大写）：School"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["多个单词组成","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"第一种写法（kebab-case命名）：my-school"}),"\n",(0,s.jsx)(e.li,{children:"第二种写法（CamelCase命名）：MySchool（需要Vue脚手架支持）"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["备注：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"可以使用name配置项指定组件在开发工具中呈现的名字"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"const school = Vue.extend({\r\n    	name: 'tth', // 使用该组件时，在开发者工具中，标签名是tth\r\n        template: `<div>\r\n            <h2>学校名称：{{schoolName}}</h2>\r\n            <h2>学校地址：{{address}}</h2>\r\n            </div>`,\r\n        data() {\r\n            return {\r\n                schoolName: '尚硅谷',\r\n                address: '北京'\r\n            }\r\n        }\r\n    })\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"关于组件标签"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["第一种写法：",(0,s.jsx)(e.code,{children:"<school></school>"})]}),"\n",(0,s.jsxs)(e.li,{children:["第二种写法：",(0,s.jsx)(e.code,{children:"<school/>"}),"（不使用脚手架时，会导致后续组件不能渲染）"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"简写"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"const school = Vue.extend(options)"}),"可简写为：",(0,s.jsx)(e.code,{children:"const school = options"})]}),"\n",(0,s.jsxs)(e.h2,{id:"23-vuecomponent构造函数",children:["2.3 VueComponent构造函数",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#23-vuecomponent构造函数",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"关于VueComponent构造函数的几个注意事项"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["组件本质是一个名为",(0,s.jsx)(e.code,{children:"VueComponent"}),"的构造函数，并不是程序员定义的，而是通过",(0,s.jsx)(e.code,{children:"Vue.extend"}),"生成的"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["我们只需要写",(0,s.jsx)(e.code,{children:"<组件名/>"}),"或",(0,s.jsx)(e.code,{children:"<组件名></组件名>"}),"，Vue解析时会自动创建该组件的实例对象。即Vue自动执行",(0,s.jsx)(e.code,{children:"new VueComponent(options)"}),"。假如页面中有多个相同组件，Vue解析时会创建相应数量的该组件的实例。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"$\\textcolor{Red}{每次调用 Vue.extend()，返回的都是一个全新的 VueComponent }$"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"关于this的指向"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"组件中："}),"\n",(0,s.jsx)(e.p,{children:"data函数、methods中的函数、watch中的函数、computed中的函数，它们的this指向均为$\\textcolor{Red}{ VueComponent 实例对象}$"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"new Vue(options)中："}),"\n",(0,s.jsx)(e.p,{children:"data函数、methods中的函数、watch中的函数、computed中的函数，它们的this指向均为$\\textcolor{Red}{ Vue 实例对象}$"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"24-一个重要的内置关系",children:["2.4 一个重要的内置关系",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#24-一个重要的内置关系",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"重要的内置关系"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"$\\textcolor{Red}{VueComponent.prototype === Vue.prototype }$"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:v,alt:"image-20220810153841907"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"为什么要有这个关系"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"让组件实例对象可以访问到VUe原型上的属性、方法"}),"\n",(0,s.jsxs)(e.h2,{id:"25-单文件组件",children:["2.5 单文件组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#25-单文件组件",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"定义School组件(School.vue文件)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"<template>\r\n    \x3c!-- 组件的结构 --\x3e\r\n    <div class=\"demo\">\r\n        <h2>学校名称：{{schoolName}}</h2>\r\n        <h2>学校地址：{{address}}</h2>\r\n        <button @click=\"showSchoolName\">show SchoolName</button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    // const school = Vue.extend({\r\n    //     name: 'school',\r\n    //     data() {\r\n    //         return {\r\n    //             schoolName: '尚硅谷',\r\n    //             address: '北京'\r\n    //         }\r\n    //     },\r\n    //     methods: {\r\n    //         showSchoolName() {\r\n    //             alert(this.schoolName)\r\n    //         }\r\n    //     },\r\n    // })\r\n    // 将组件暴露出去\r\n    // 方法一（默认暴露）：\r\n    // export default school\r\n    // 对应的引入语法：import ??? from ???\r\n\r\n    // 方法二（统一暴露）：\r\n    // export {school}\r\n    // 对应的引入语法：import {???} from ???\r\n\r\n    // 方法三（分别暴露）：\r\n    // 直接在定义school组件前加上export关键字即可，如：export const school = Vue.extend({...)}\r\n    // 对应的引入语法：import {???} from ???\r\n\r\n    // 以上可简写为：\r\n    export default {\r\n        name: 'school',\r\n        data() {\r\n            return {\r\n                schoolName: '尚硅谷',\r\n                address: '北京'\r\n            }\r\n        },\r\n        methods: {\r\n            showSchoolName() {\r\n                alert(this.schoolName)\r\n            }\r\n        },\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .demo {\r\n        background-color: orange;\r\n    }\r\n</style>\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"定义Student组件(Student.vue文件)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n    \x3c!-- 组件的结构 --\x3e\r\n    <div>\r\n        <h2>学生姓名：{{studentName}}</h2>\r\n        <h2>学生年龄：{{age}}</h2>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'student',\r\n        data() {\r\n            return {\r\n                studentName: '张三',\r\n                age: 18\r\n            }\r\n        }\r\n    }\r\n<\/script>\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"定义APP组件(App.vue文件)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"\x3c!-- 模板生成快捷键：输入<v,点击回车即可 --\x3e\r\n<template>\r\n    <div>\r\n        <School></School>\r\n        <Student></Student>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    // 引入组件\r\n    import School from './School.vue'\r\n    import Student from './Student.vue'\r\n    export default {\r\n        name: 'App',\r\n        components: {\r\n            School,\r\n            Student\r\n        }\r\n    }\r\n<\/script>\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"编写main.js文件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import App from './App.vue'\r\n\r\nnew Vue({\r\n    el: '#root',\r\n    template: `<App></App>`,\r\n    comments: {App}\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"编写index.html文件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n    <meta name="viewport" content="width=div, initial-scale=1.0">\r\n    <title>单文件组件语法练习</title>\r\n</head>\r\n<body>\r\n    <div id="root"></div>\r\n    \x3c!-- 先渲染容器，再引入js --\x3e\r\n    <script src="../js/vue.js"><\/script>\r\n    <script src="./main.js"><\/script>\r\n</body>\r\n</html>\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"==注意=="}),"\n",(0,s.jsx)(e.p,{children:"此时运行index.html文件，页面控制台报错。原因是到目前为止，浏览器并不能解析Vue文件，需要借助Vue脚手架"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"3使用vue脚手架vue-cli",children:["3.使用Vue脚手架（Vue CLI）",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3使用vue脚手架vue-cli",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"CLI：Command Line Interface"}),"\n",(0,s.jsxs)(e.h2,{id:"31-初始化脚手架",children:["3.1 初始化脚手架",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#31-初始化脚手架",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"脚手架官方文档"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://cli.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer",children:"https://cli.vuejs.org/zh/"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"脚手架初始化步骤"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step1.创建：vue create vue_test"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step2.选择Vue版本：此处选择Vue2即可"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:g,alt:"image-20220812105904439"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step3.初始化成功："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:m,alt:"image-20220812110231975"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step4.按照控制台提示，进入vue_test文件夹，并运行项目"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:u,alt:"image-20220812110449683"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step5.项目运行成功"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:"image-20220812110613473"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:"image-20220812110644290"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"32-vue项目各文件解释",children:["3.2 vue项目各文件解释",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#32-vue项目各文件解释",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"33-mainjs中的rander函数解释",children:["3.3 main.js中的rander函数解释",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#33-mainjs中的rander函数解释",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:"image-20220812144744808"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"vue.js"}),"和",(0,s.jsx)(e.code,{children:"vue.runtime.XXX.js"}),"的区别：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"vue.js"}),"是完整版的Vue，包含：核心功能+模板解析器"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"vue.runtime.XXX.js"}),"是运行版的Vue，只包含核心功能"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["因为",(0,s.jsx)(e.code,{children:"vue.runtime.XXX.js"}),"没有模板解析器，所以不能用",(0,s.jsx)(e.code,{children:"new Vue"}),"时不能使用",(0,s.jsx)(e.code,{children:"template"}),"配置项。需要使用",(0,s.jsx)(e.code,{children:"render"}),"函数接收到的",(0,s.jsx)(e.code,{children:"createElement"}),"函数去之情具体内容。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"34-脚手架文件结构",children:["3.4 脚手架文件结构",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#34-脚手架文件结构",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:"image-20220815151402120"})}),"\n",(0,s.jsxs)(e.h2,{id:"35-vueconfigjs配置文件",children:["3.5 vue.config.js配置文件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#35-vueconfigjs配置文件",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["使用",(0,s.jsx)(e.code,{children:"vue inspect > output.js"}),"命令可以查看到Vue脚手架的默认配置"]}),"\n",(0,s.jsxs)(e.li,{children:["使用",(0,s.jsx)(e.code,{children:"vue.config.js"}),"文件可以对脚手架进行个性化定制。（详情见：",(0,s.jsx)(e.a,{href:"https://cli.vuejs.org/zh/config/",target:"_blank",rel:"noopener noreferrer",children:"配置参考 | Vue CLI (vuejs.org)"}),"）"]}),"\n",(0,s.jsxs)(e.li,{children:["每次修改",(0,s.jsx)(e.code,{children:"vue.config.js"}),"文件，必须重启，修改才会生效"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"36-ref属性",children:["3.6 ref属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#36-ref属性",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"被用来给元素或子组件注册引用信息（id的替代者）"}),"\n",(0,s.jsx)(e.li,{children:"应用在html标签上，获取的是真实的DOM元素"}),"\n",(0,s.jsx)(e.li,{children:"应用在组件标签上，获取的是组件的实例对象"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"举例"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div id="app">\r\n    <h1 v-text="msg" ref="title"></h1>\r\n    <School ref="sch"/>\r\n    <button ref="btn" @click="showDOM">点我输出上方DOM元素</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入School组件\r\nimport School from \'./components/School.vue\'\r\n\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    School\r\n  },\r\n  data() {\r\n    return {\r\n      msg: \'欢迎学习Vue\'\r\n    }\r\n  },\r\n  methods: {\r\n    showDOM() {\r\n      console.log(this.$refs.title) // 输出h1标签的DOM元素\r\n      console.log(this.$refs.sch) // 输出School子组件的实例对象\r\n      console.log(this.$refs.btn) // 输出button标签的DOM元素\r\n    }\r\n  }\r\n}\r\n<\/script>\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"运行结果"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:"image-20220815165502670"})}),"\n",(0,s.jsxs)(e.h2,{id:"37-props配置项",children:["3.7 props配置项",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#37-props配置项",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"让组件接收外部传过来的数据"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"外部传递数据"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:'<组件名 prop1="prop1值" prop2="prop2值" ...>'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"\x3c!-- age属性用v-bind指令是想强制age的值是个Number类型 --\x3e\r\n<Student name='李四' sex='女' :age=\"18\"/>\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"本组件接收数据"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"第一种方式（只接收）"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default {\r\n    name: 'Student',\r\n    data() {...},\r\n    props: ['name', 'age', 'sex']\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"第二种方式（限制prop类型）"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default {\r\n    name: 'Student',\r\n    data() {...},\r\n    props: {\r\n        name: String,\r\n        age: Number,\r\n        sex: String\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"第三种方式（限制类型+限制必要性+指定默认值）"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default {\r\n    name: 'Student',\r\n    data() {...},\r\n    props: {\r\n        name: {\r\n            type: String, // 类型\r\n            required: true // 必要性\r\n        },\r\n        age: {\r\n            type: Number,\r\n            default: 99 // 默认值\r\n        },\r\n        sex: {\r\n            type: String, \r\n            required: true \r\n        }\r\n    }\r\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"注意事项"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"props是只读的，Vue底层会监测对props的修改。如果进行了修改，控制台会报错"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"如果业务需求确需修改，可以$\\textcolor{Red}{复制props的内容到data中，然后去修改data中的数据 }$"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["如果父组件传值了，但是子组件没有使用props接收，父组件传给子组件的值保留在",(0,s.jsx)(e.code,{children:"vm.$attrs"}),"中"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default {\r\n    name: 'Student',\r\n    data() {\r\n        return {\r\n            msg: '我是一个尚硅谷的学生',\r\n            myAge: this.age // 复制props中的age到data中\r\n        }\r\n    },\r\n    props: ['name', 'age', 'sex']\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"38-mixin混入混合",children:["3.8 mixin（混入/混合）",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#38-mixin混入混合",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"可以把多个组件共用的配置提取成一个混入对象"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"定义混合"}),"\n",(0,s.jsx)(e.p,{children:"新建js文件，在js文件中声明一个对象，对象里包含多个组件共用的配置，并将该对象暴露出去。"}),"\n",(0,s.jsxs)(e.p,{children:["如新建",(0,s.jsx)(e.code,{children:"commonUtils.js"}),"文件，在文件中定义如下对象，并将其暴露出去："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export const myMixin = {\r\n    data(){\r\n        return {\r\n            x: 100,\r\n            y: 200\r\n        }\r\n    },\r\n    methods: {\r\n        showName() {\r\n            alert(this.name)\r\n        }\r\n    },\r\n    mounted: {\r\n        console.log('挂载完成!!!')\r\n    }\r\n} \n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"使用混合"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["方法一，全局混合：在",(0,s.jsx)(e.code,{children:"main.js"}),"文件中定义全局混合",(0,s.jsx)(e.code,{children:"Vue.mixin(myMixin)"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 引入\r\nimport {myMixin} from 'XXX/commonUtils'\r\n// 全局使用\r\nVue.mixin(myMixin)\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["方法二，局部混入：在指定组件文件中定义",(0,s.jsx)(e.code,{children:"mixins(myMixin)"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"// ...\r\n<script>\r\n    // 引入\r\n	import {myMixin} from 'XXX/commonUtils'\r\n    export default {\r\n        name: 'Student',\r\n        data() {...},\r\n        mixins: [myMixin] // 本组件内使用\r\n    }\r\n<\/script>\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"39-插件",children:["3.9 插件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#39-插件",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"用于增强Vue"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"本质"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["包含",(0,s.jsx)(e.code,{children:"install()"}),"的一个对象。install方法的第一个参数是Vue，第二个及其以后的参数是插件使用者传递的数据"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"定义插件"}),"\n",(0,s.jsxs)(e.p,{children:["新建",(0,s.jsx)(e.code,{children:"plugins.js"}),"文件，在该文件中定义插件，并将其暴露出去"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default {\r\n    install(Vue) {\r\n        // 定义全局过滤器\r\n        Vue.filter('mySlice', function(value){\r\n            return value.slice(0, 2)\r\n        })\r\n\r\n        // 定义全局指令\r\n        Vue.directive('fbind', {\r\n             // 指令与元素成功绑定时（一上来）就会被调用\r\n            bind(element, binding) {\r\n                element.value = binding.value\r\n            },\r\n            // 指令所在元素被插入页面时被调用\r\n            inserted(element, binding) {\r\n                // 获取焦点\r\n                element.focus()\r\n            },\r\n            // 指令所在模板被重新解析时被调用\r\n            update(element, binding) {\r\n                element.value = binding.value\r\n            }\r\n        })\r\n\r\n        // 定义全局混入\r\n        Vue.mixin({\r\n            data() {\r\n                return {\r\n                    x: 100,\r\n                    y: 200\r\n                }\r\n            },\r\n        })\r\n\r\n        // 在Vue原型上添加一个方法（vm和vc都可以用）\r\n        Vue.prototype.hello = () => {alert('你好啊')}\r\n\r\n        // 在Vue原型上添加一个属性（vm和vc都可以用）\r\n        Vue.prototype.z = 111\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"使用插件"}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"main.js"}),"中引入并使用插件"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 引入插件\r\nimport plugins from './plugins'\r\n\r\n// 使用插件\r\nVue.use(plugins)\r\n// 使用多个插件\r\n// Vue.use(plugins2)\r\n// Vue.use(plugins3)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"310-scoped样式",children:["3.10 scoped样式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#310-scoped样式",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"让样式在局部生效，防止冲突"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"写法"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<style scoped></style>\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"311-lang属性",children:["3.11 lang属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#311-lang属性",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["定义",(0,s.jsx)(e.code,{children:"<style>"}),"标签中的语法是",(0,s.jsx)(e.code,{children:"css"}),"还是",(0,s.jsx)(e.code,{children:"less"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"用法"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<style lang='less'></style>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["当使用",(0,s.jsx)(e.code,{children:"less"}),"时，需要安装",(0,s.jsx)(e.code,{children:"less-loader"})]}),"\n",(0,s.jsxs)(e.h2,{id:"312-todo-list案例",children:["3.12 Todo-list案例",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#312-todo-list案例",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:"image-20220816165924940"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"组件化编程流程（通用）"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"1.实现静态组件：抽取组件，使用组件实现静态页面效果"}),"\n",(0,s.jsxs)(e.li,{children:["2.实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"一个组件在用：放在组件自身即可"}),"\n",(0,s.jsx)(e.li,{children:"一些组件在用：放在他们共同的父组件上（这种行为叫$\\textcolor{Red}{状态提升}$）"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"3.实现交互：从绑定事件监听开始"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"props使用场景"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"父传子通信"}),"\n",(0,s.jsx)(e.li,{children:"子传父通信：要求父组件先给子组件一个函数"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用props注意事项"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"v-model"}),"绑定的值不能是",(0,s.jsx)(e.code,{children:"props"}),"传过来的值，因为",(0,s.jsx)(e.code,{children:"props"}),"是不可以修改的"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"props"}),"传过来的值如果是对象类型，使用",(0,s.jsx)(e.code,{children:"v-model"}),"等==修改对象中的属性==时，Vue不会报错，但是$\\textcolor{Red}{不推荐}$"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"313-webstorage",children:["3.13 webStorage",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#313-webstorage",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["webStorage，即浏览器的本地存储，存储大小一般在==5MB==左右。浏览器端通过",(0,s.jsx)(e.code,{children:"Window.localStorage"}),"和",(0,s.jsx)(e.code,{children:"Window.sessionStorage"}),"属性来实现本地存储机制。"]}),"\n",(0,s.jsx)(e.p,{children:"==该内容并不是Vue团队提供的，原生JS就有的。=="}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"localStorage"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"==浏览器关掉后，存储的内容不会消失。==只有当调用localStorage的删除API或者清空浏览器缓存时，存储的内容才会消失。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["存储：",(0,s.jsx)(e.code,{children:"localStorage.setItem(key, value)"}),"$\\textcolor{Red}{value必须是字符串}$"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["获取：",(0,s.jsx)(e.code,{children:"localStorage.getItem(key)"}),"$\\textcolor{Red}{方法返回值是字符串类型}$"]}),"\n",(0,s.jsx)(e.p,{children:"==如果key不存在，返回的结果是null=="}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["移除：",(0,s.jsx)(e.code,{children:"localStorage.removeItem(key)"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["清空：",(0,s.jsx)(e.code,{children:"localStorage.clear()"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"sessionStorage"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"==浏览器关掉后，存储的内容会立即消失=="}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["存储：",(0,s.jsx)(e.code,{children:"sessionStorage.setItem(key, value)"}),"$\\textcolor{Red}{value必须是字符串}$"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["获取：",(0,s.jsx)(e.code,{children:"sessionStorage.getItem(key)"}),"$\\textcolor{Red}{方法返回值是字符串类型}$"]}),"\n",(0,s.jsx)(e.p,{children:"如果key不存在，返回的结果是null"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["移除：",(0,s.jsx)(e.code,{children:"sessionStorage.removeItem(key)"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["清空：",(0,s.jsx)(e.code,{children:"sessionStorage.clear()"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"314-vue中的自定义事件",children:["3.14 Vue中的自定义事件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#314-vue中的自定义事件",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"一种组件间通信的方式，适用于$\\textcolor{red}{子组件 ===> 父组件}$"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"A是父组件，B是子组件，B想给A传值，那么需要在A中给B绑定自定义事件（==事件的回调在父组件A中==）"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"父组件绑定自定义事件"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["方法一：使用",(0,s.jsx)(e.code,{children:"v-on"}),"或",(0,s.jsx)(e.code,{children:"@"}),"指令"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div id=\"app\">\r\n    <h1>{{msg}}</h1>\r\n    \x3c!-- 【父子组件通信】子传父：方法二，自定义事件（第一种写法） --\x3e\r\n    <Student v-on:myEvent=\"getStudentMsg\" @demo=\"m1\"/>\r\n    \x3c!-- @等价于v-on，once表示只调用一次 --\x3e\r\n    \x3c!-- <Student @myEvent.once=\"getStudentMsg\"/> --\x3e\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Student\r\nimport Student from './components/Student.vue'\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    Student\r\n  },\r\n  data() {\r\n    return {\r\n      msg: '欢迎学习Vue'\r\n    }\r\n  },\r\n  methods: {\r\n    // 事件回调\r\n    getStudentMsg(msg) {\r\n      console.log('APP接收到了学生组件传递的信息：', msg)\r\n    },\r\n  }\r\n}\r\n<\/script>\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["方法二：使用",(0,s.jsx)(e.code,{children:"ref"}),"属性"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div id=\"app\">\r\n    <h1>{{msg}}</h1>\r\n    \x3c!-- 【父子组件通信】子传父：方法二，自定义事件（第二种写法） --\x3e\r\n    <Student ref=\"student\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Student\r\nimport Student from './components/Student.vue'\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    Student\r\n  },\r\n  data() {\r\n    return {\r\n      msg: '欢迎学习Vue'\r\n    }\r\n  },\r\n  methods: {\r\n    // 事件回调\r\n    getStudentMsg(msg) {\r\n      console.log('APP接收到了学生组件传递的信息：', msg)\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$refs.student.$on('myEvent', this.getStudentMsg) // 绑定自定义事件\r\n    // this.$refs.student.$once('myEvent', this.getStudentMsg) // 绑定自定义事件，只触发一次\r\n  }\r\n}\r\n<\/script>\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["==如果想让自定义事件只触发一次，可以使用",(0,s.jsx)(e.code,{children:"once"}),"修饰符或者",(0,s.jsx)(e.code,{children:"$once"}),"方法=="]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["子组件触发自定义事件：使用子组件的",(0,s.jsx)(e.code,{children:"$emit"}),"方法"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div class=\"student\">\r\n    <h2>学生姓名：{{name}}</h2>\r\n    <h2>学生性别：{{sex}}</h2>\r\n    <h2>学生年龄：{{age}}</h2>\r\n    <button @click=\"sendStudentMsg\">向父组件传学生递信息</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'Student',\r\n    data() {\r\n        return {\r\n            name: '张三',\r\n            age: 18,\r\n            sex: '男'\r\n        }\r\n    },\r\n    methods: {\r\n      sendStudentMsg() {\r\n        // 触发组件的myEvent事件\r\n        this.$emit('myEvent', {name: this.name, age: this.age, sex: this.sex})\r\n      }\r\n    }\r\n\r\n}\r\n<\/script>\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"子组件解绑自定义事件"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["方法一：借助",(0,s.jsx)(e.code,{children:"$off"}),"方法"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"unbindSelfEvent() {\r\n    this.$off('myEvent') // 销毁一个自定义事件\r\n    // this.$off(['myEvent', 'demo']) // 销毁多个自定义事件\r\n    // this.$off() // 销毁所有自定义事件\r\n},\r\n\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"方法二：销毁当前组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"destroyStudent() {\r\n    this.$destroy() // 销毁了当前Student组件实例，销毁后所有Student实例的自定义事件全部失效\r\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"组件绑定原生DOM事件的方法"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"使用==native==修饰符"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:"<Student @click.native='alert(123)'/>"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"注意事项"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["通过",(0,s.jsx)(e.code,{children:"this.$ref.xxx.$on('myEvent', 回调函数)"}),"绑定自定义事件时，回调函数==要么配置在methods中，要么用箭头函数==，否则this指向会出现问题！"]}),"\n",(0,s.jsxs)(e.h2,{id:"315-全局事件总线",children:["3.15 全局事件总线",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#315-全局事件总线",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"一种组件间通信的方式，适用于==任意组件间通信=="}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step1. 安装全局事件总线"}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"main.js"}),"文件创建",(0,s.jsx)(e.code,{children:"Vue"}),"实例时安装全局事件总线："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"new Vue({\r\n    ...\r\n    beforeCreate() {\r\n    	Vue.prototype.$bus = this; // 安装全局事件总线$bus, $bus就是当前的vm实例\r\n	}\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step2. 接收数据"}),"\n",(0,s.jsxs)(e.p,{children:["在需要接收数据的组件中，给",(0,s.jsx)(e.code,{children:"$bus"}),"绑定自定义事件，==事件的回调留在当前组件中=="]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\nmethods() {\r\n    // 定义回调方法\r\n    demo(data) {...}\r\n}\r\n...\r\nmounted() {\r\n    // 给$bus绑定自定义事件\r\n    this.$bus.$on('自定义事件名', this.demo)\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step3. 提供数据"}),"\n",(0,s.jsxs)(e.p,{children:["在提供数据的组件中，触发",(0,s.jsx)(e.code,{children:"$bus"}),"的自定义事件"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\nthis.$bus.$emit('Step2中自定义的时间名', this.demo)\r\n...\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step4. 解绑当前事件"}),"\n",(0,s.jsxs)(e.p,{children:["最好在接收消息的组件中通过",(0,s.jsx)(e.code,{children:"beforeDestroy"}),"钩子，用",(0,s.jsx)(e.code,{children:"$off"}),"解绑==当前组件所用到的事件=="]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"316-消息订阅与发布",children:["3.16 消息订阅与发布",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#316-消息订阅与发布",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["==推荐安装",(0,s.jsx)(e.code,{children:"pubsub-js"}),"库==：",(0,s.jsx)(e.code,{children:"npm -i pubsub-js"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"一种组件间通信的方式，适用于==任意组件间通信=="}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step1. 安装第三方库"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:"npm -i pubsub-js"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step2. 发布和订阅消息的组件引入pubsub-js"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:"import pubsub from 'pubsub-js'"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step3. 接收数据"}),"\n",(0,s.jsx)(e.p,{children:"在需要接收事件的组件中，==订阅消息==，订阅的回调留在当前组件中"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\nmethods: {\r\n    // 订阅的回调函数\r\n    demo(data) {...}\r\n}\r\n...    \r\nmounted() {\r\n    // 订阅消息\r\n    this.pid = pubsub.subscribe('消息名', this.demo)\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step4. 提供数据"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"pubsub.publish('消息名', 数据)\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step5. 取消订阅"}),"\n",(0,s.jsxs)(e.p,{children:["最好在接收消息的组件中通过",(0,s.jsx)(e.code,{children:"beforeDestroy"}),"钩子，用",(0,s.jsx)(e.code,{children:"pubsub.unsubscribe(pid)"}),"取消订阅。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"317-nexttick",children:["3.17 $nextTick",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#317-nexttick",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"一个生命周期钩子函数。在下一次DOM更新结束后执行其指定的回调"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用场景"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"当改变数据后，要基于更新后的新的DOM进行某些操作。该操作要在nextTike所指定的回调函数中执行"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"语法"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:"this.$nextTick(回调函数)"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"例子"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 在DOM更新后获取input框（ref的值为inputTitle）的焦点\r\nthis.$nextTick(function() {\r\n    this.$refs.inputTitle.focus();\r\n})\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"318-过渡与动画",children:["3.18 过渡与动画",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#318-过渡与动画",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"在插入、更新或移除DOM元素时，给元素添加样式类名"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"图示"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:"image-20220818162952056"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Step1. 准备好样式"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["元素进入的样式","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"v-enter： 进入的起点"}),"\n",(0,s.jsx)(e.li,{children:"v-enter-active：进入过程中"}),"\n",(0,s.jsx)(e.li,{children:"v-enter-to：进入的终点"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["元素离开的样式","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"v-leave：离开的起点"}),"\n",(0,s.jsx)(e.li,{children:"v-leave-active： 离开过程中"}),"\n",(0,s.jsx)(e.li,{children:"v-leave-to：离开的终点"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"如果用动画实现，还需要编写动画效果；如果用过度实现，不需编写动画效果"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["Step2. 用",(0,s.jsx)(e.code,{children:"<transition>"}),"包裹要过渡的元素"]}),"\n",(0,s.jsxs)(e.p,{children:["==如果有多个元素需要配置动画效果，需要使用",(0,s.jsx)(e.code,{children:"<transition-group>"}),"标签==。使用该标签时，","必须给子元素设置key属性！"]}),"\n",(0,s.jsxs)(e.p,{children:["如果配置了name属性，Step1中的样式的类名不在是v-XXX,而是name-XXX","，如："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'\x3c!-- \r\n	transition的name值为hello，style中的样式名为hello-XXX \r\n	appear表示页面刷新时执行进入动画\r\n--\x3e\r\n<template>\r\n  <div>\r\n    <transition name="hello" appear>\r\n        ...\r\n    </transition>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n...\r\n<\/script>\r\n\r\n<style scoped>\r\n...\r\n.hello-enter-active {\r\n    animation: hello 1s linear;\r\n}\r\n\r\n.hello-leave-active {\r\n    animation: hello 1s linear reverse;\r\n}\r\n...\r\n</style>\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"栗子1：借助==动画==实现"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div>\r\n    <h1>利用动画实现元素的显示与隐藏效果</h1>\r\n    <button @click="isShow = !isShow">显示/隐藏</button>\r\n    \x3c!-- 用<transition>包裹要过渡的元素，并配置`name`属性 --\x3e\r\n    <transition name="hello" appear>\r\n        <div class="demo" v-show="isShow">你好啊</div>\r\n    </transition>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \'Test\',\r\n    data() {\r\n        return {\r\n            isShow: true\r\n        }\r\n    }\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n.demo {\r\n    background-color: orange;\r\n    margin-top: 10px;\r\n    height: 50px;\r\n    color: white;\r\n    line-height: 50px;\r\n    padding-left: 10px;\r\n    border-radius: 10px;\r\n    font-size: 22px;\r\n}\r\n\r\n/** 编写动画 */\r\n@keyframes hello {\r\n    from {\r\n        transform: translateX(-100%);\r\n    }\r\n    to {\r\n        transform: translateX(0px);\r\n    }\r\n}\r\n\r\n/** 元素进入的样式 */\r\n.hello-enter-active {\r\n    animation: hello 1s linear;\r\n}\r\n    \r\n/** 元素离开的样式 */\r\n.hello-leave-active {\r\n    animation: hello 1s linear reverse;\r\n}\r\n\r\n</style>\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"栗子2：借助==过渡==实现"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div>\r\n    <h1>利用过渡实现元素的显示与隐藏效果</h1>\r\n    <button @click="isShow = !isShow">显示/隐藏</button>\r\n    \x3c!-- 用<transition>包裹要过渡的元素，并配置`name`属性 --\x3e\r\n    <transition name="hello" appear>\r\n        <div class="demo" v-show="isShow">你好啊</div>\r\n    </transition>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \'Test2\',\r\n    data() {\r\n        return {\r\n            isShow: true\r\n        }\r\n    }\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n.demo {\r\n    background-color: orange;\r\n    margin-top: 10px;\r\n    height: 50px;\r\n    color: white;\r\n    line-height: 50px;\r\n    padding-left: 10px;\r\n    border-radius: 10px;\r\n    font-size: 22px;\r\n}\r\n\r\n/**进入的起点、离开的终点 */\r\n.hello-enter, .hello-leave-to {\r\n    transform: translateX(-100%);\r\n}\r\n\r\n/** 进入的动画、离开的动画 */\r\n.hello-enter-active, .hello-leave-active {\r\n    transition: 1s linear;\r\n}\r\n\r\n/**进入的终点、离开的起点 */\r\n.hello-enter-to, .hello-leave{\r\n    transform: translateX(0);\r\n}\r\n\r\n</style>\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"栗子3：多个元素实现动画效果"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'...\r\n<transition-group name="hello" appear>\r\n    \x3c!-- 必须给div设置key属性 --\x3e\r\n    <div class="demo" v-show="isShow" key="1">你好啊</div>\r\n    <div class="demo" v-show="!isShow" key="2">你好啊2</div>\r\n</transition-group>\r\n...\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"栗子4：使用第三方库animate"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["使用方法：详见官网",(0,s.jsx)(e.a,{href:"https://animate.style/",target:"_blank",rel:"noopener noreferrer",children:"Animate.css | A cross-browser library of CSS animations."})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"安装依赖"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:"npm install animate.css\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"在组件中引入"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import 'animate.css';\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["配置",(0,s.jsx)(e.code,{children:"<transition>"}),"或",(0,s.jsx)(e.code,{children:"<transition-group>"}),"的name属性，并指定动画"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'...\r\n\x3c!--\r\n	name: animate的类名\r\n	enter-active-class：进入时的动画。都是animate库写好的，在官网找就行\r\n	leave-active-class：离开时的动画。同上\r\n--\x3e\r\n<transition-group \r\n	appear\r\n	name="animate__animated animate__bounce"\r\n    enter-active-class="animate__swing" \r\n    leave-active-class="animate__backOutUp"\r\n>\r\n    ...\r\n</transition-group>\r\n...\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"完整代码"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div>\r\n    <h1>第三方动画库<a href="https://animate.style/" target="blank">animate</a></h1>\r\n    <button @click="isShow = !isShow">显示/隐藏</button>\r\n    <transition-group \r\n        appear\r\n        name="animate__animated animate__bounce"\r\n        enter-active-class="animate__swing"\r\n        leave-active-class="animate__backOutUp"\r\n    >\r\n        <div class="demo" v-show="isShow" key="1">你好啊</div>\r\n        <div class="demo" v-show="!isShow" key="2">你好啊2</div>\r\n    </transition-group>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport \'animate.css\';\r\n\r\nexport default {\r\n    name: \'Test4\',\r\n    data() {\r\n        return {\r\n            isShow: true\r\n        }\r\n    }\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n.demo {\r\n    background-color: orange;\r\n    margin-top: 10px;\r\n    height: 50px;\r\n    color: white;\r\n    line-height: 50px;\r\n    padding-left: 10px;\r\n    border-radius: 10px;\r\n    font-size: 22px;\r\n}\r\n</style>\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"4vue中的ajax",children:["4.Vue中的ajax",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4vue中的ajax",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"41-vue脚手架配置代理",children:["4.1 vue脚手架配置代理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#41-vue脚手架配置代理",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"可以用来解决开发环境Ajax跨域问题。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"方法一"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"vue.config.js"}),"中添加如下配置："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'module.exports = defineConfig({\r\n  ...\r\n  devServer: {\r\n    proxy: "http://localhost:5000"\r\n  }\r\n})\n'})}),"\n",(0,s.jsx)(e.p,{children:"==说明：=="}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"优点：配置简单，请求资源时直接发给代理服务器(8080)即可"}),"\n",(0,s.jsx)(e.li,{children:"缺点：不能配置多个代理，不能灵活的控制请求是否走代理"}),"\n",(0,s.jsx)(e.li,{children:"工作方式：若按照上述配置代理，当请求了前端存在的资源，会优先返回前端资源。只有当请求了前端不存在的资源，才会将请求发给服务器"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"方法二"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"vue.config.js"}),"中添加如下配置："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"module.exports = defineConfig({\r\n  ...\r\n  devServer: {\r\n    proxy: {\r\n      '/api': { // 匹配所有以'/api'开头的路径\r\n        target: 'http://localhost:5000', // 转发路径\r\n        changeOrigin: true, // 该值为true时，服务器收到的请求头中的host为localhost:5000；为false时，host为localhost:8080。默认为true\r\n        pathRewrite: {'^/api': ''} // 使用正则，去掉路径中的'/api'\r\n      },\r\n      '/api2': { \r\n        target: 'http://localhost:5001', \r\n        changeOrigin: true, // \r\n        pathRewrite: {'^/api2': ''}\r\n      }\r\n    }\r\n  }\r\n})\r\n\n"})}),"\n",(0,s.jsx)(e.p,{children:"==说明：=="}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"优点： 可以配置多个代理，且可以灵活的控制是否走代理"}),"\n",(0,s.jsx)(e.li,{children:"缺点：配置略微繁琐，请求资源时必须加前缀"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"42-vue-resource",children:["4.2 vue-resource",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#42-vue-resource",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["vue插件库，用途和",(0,s.jsx)(e.code,{children:"axios"}),"一样，目前已经不推荐使用，官方已不维护。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"安装"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:"npm i vur-resource\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"引入和使用"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 在main.js中引入和使用\r\n\r\n// 引入\r\nimport vueResource from 'vue-resource'\r\n// 使用\r\nVue.use(vueResource)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["==说明：==一旦使用成功，Vue实例和组件实例中就会多一个",(0,s.jsx)(e.code,{children:"$http"}),"属性。此时则可以使用",(0,s.jsx)(e.code,{children:"$http"}),"发送请求，使用方法和",(0,s.jsx)(e.code,{children:"axios"}),"使用方法一样"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"43-slot插槽",children:["4.3 slot插槽",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#43-slot插槽",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["让父组件可以向子组件指定位置插入html结构，也是一种组件间通信方式，适用于","父组件===>子组件","。"]}),"\n",(0,s.jsxs)(e.p,{children:["备注：外部传递过来的插槽信息保留在",(0,s.jsx)(e.code,{children:"vm.$slots"}),"中"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"分类"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"默认插槽"}),"\n",(0,s.jsx)(e.li,{children:"具名插槽：顾名思义，给插槽取个名字，父组件使用时按照插槽名字将html结构插入到页面中"}),"\n",(0,s.jsxs)(e.li,{children:["作用域插槽：","数据在组件自身，但根据数据生成的结构需要组件的使用者来决定。"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"默认插槽"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"子组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div class="category">\r\n    <h2>{{title}}</h2>\r\n    <hr>\r\n    <slot>我是默认数据</slot>\r\n  </div>\r\n</template>\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"父组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div id="app">\r\n    <Category title="美食分类">\r\n      <img src="./assets/images/food.jpg" alt="">\r\n    </Category>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Test\r\nimport Category from \'./components/Category.vue\'\r\n\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    Category\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n#app {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\nimg {\r\n  width: 96%;\r\n  margin-left: 2%;\r\n}\r\n</style>\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"具名插槽"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"子组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div class="category">\r\n    <h2>{{title}}</h2>\r\n    <hr>\r\n    \x3c!-- 使用name属性为插槽取名字 --\x3e\r\n    <slot name="center">我是默认数据</slot>\r\n    <hr>\r\n    <slot name="bottom">我是默认数据</slot>\r\n  </div>\r\n</template>\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"父组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div id="app">\r\n    <Category title="美食分类">\r\n      \x3c!-- 根据插槽名字将html结构插入到指定位置 --\x3e\r\n      <img slot="center" src="./assets/images/food.jpg" alt="">\r\n      <h4 slot="bottom">环联夜市欢迎你</h4>\r\n    </Category>\r\n\r\n    <Category title="游戏分类">\r\n      <ul slot="center">\r\n          <li v-for="(game, gIndex) in games" :key="gIndex">{{game}}</li>\r\n      </ul>\r\n      <div class="gamesCategory" slot="bottom">\r\n        <a href="http://www.baidu.com">单机游戏</a>\r\n        <a href="http://www.baidu.com">网络游戏</a>\r\n      </div>\r\n    </Category>\r\n\r\n    <Category title="电影分类">\r\n      <video slot="center" controls src="http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"></video>\r\n      \x3c!-- 如果多个结构都需要查到同一个插槽，可以借助template标签。template标签除了可以借助 slot="center" 指定插槽名字外，还可以使用v-slot:bottom指定插槽 --\x3e\r\n      <template v-slot:bottom>\r\n        <ul>\r\n          <li v-for="(film, index) in films" :key="index">{{film}}</li>\r\n        </ul>\r\n        <div class="gamesCategory">\r\n          <a href="http://www.baidu.com">经典</a>\r\n          <a href="http://www.baidu.com">热门</a>\r\n          <a href="http://www.baidu.com">推荐</a>\r\n        </div>\r\n      </template>\r\n    </Category>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Test\r\nimport Category from \'./components/Category.vue\'\r\n\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    Category\r\n  },\r\n  data() {\r\n    return {\r\n      games: [\'王者荣耀\', \'绝地求生\', \'开心消消乐\', \'滑雪大冒险\'],\r\n      films: [\'你好李焕英\', \'夏洛特烦恼\', \'老炮儿\', \'你好，旧时光\']\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n#app, .gamesCategory {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\nimg, video {\r\n  width: 96%;\r\n  margin-left: 2%;\r\n}\r\nh4 {\r\n  text-align: center;\r\n}\r\n</style>\r\n\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"作用域插槽：games数据在Category组件中，但是使用数组遍历出来的结构由APP组件决定。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"子组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div class=\"category\">\r\n    <h2>{{title}}</h2>\r\n    <hr>\r\n    \x3c!-- 定义games传值 --\x3e\r\n    <slot :games=\"games\">我是默认数据</slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: ['title'],\r\n    data() {\r\n      return {\r\n        games: ['王者荣耀', '绝地求生', '开心消消乐', '滑雪大冒险'],\r\n      }\r\n    }\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n.category {\r\n   background-color: aqua;\r\n   width: 200px;\r\n   height:350px;\r\n}\r\nh2 {\r\n  text-align: center;\r\n}\r\n</style>\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"父组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div id="app">\r\n    <Category title="游戏分类">\r\n      \x3c!-- 父组件使用scope来接收子组件传来的数据。info作为形参，可以随便定义 --\x3e \r\n      <template scope="info">\r\n        <ul>\r\n            <li v-for="(game, gIndex) in info.games" :key="gIndex">{{game}}</li>\r\n        </ul>\r\n      </template>\r\n    </Category>\r\n\r\n    <Category title="游戏分类">\r\n      \x3c!-- scope接收的参数，也可以使用ES6语法中的结构赋值 --\x3e \r\n      <template scope="{games}">\r\n	  \x3c!-- scope也可以写成slot-scope，脚手架新旧API的问题，slot-scope 是新API --\x3e \r\n	  \x3c!-- <template slot-scope="{games}"> --\x3e\r\n        <ol>\r\n            <li v-for="(game, gIndex) in games" :key="gIndex">{{game}}</li>\r\n        </ol>   \r\n      </template>\r\n    </Category>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Test\r\nimport Category from \'./components/Category.vue\'\r\n\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    Category\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n#app, .gamesCategory {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\nimg, video {\r\n  width: 96%;\r\n  margin-left: 2%;\r\n}\r\nh4 {\r\n  text-align: center;\r\n}\r\n</style>\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"5vuex",children:["5.vuex",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5vuex",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"51-理解vuex",children:["5.1 理解vuex",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#51-理解vuex",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"vuex是什么"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"专门在Vue中实现集中式状态（数据）管理的一个Vue插件，对Vue应用中多个组件的共享状态进行集中式的管理（读写），也是一种组件间通信的方式，且适用于任意组件间通信。"}),"\n",(0,s.jsxs)(e.p,{children:["附：Github地址：",(0,s.jsx)(e.a,{href:"https://github.com/vuejs/vuex",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/vuejs/vuex"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:"image-20220823101949484"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用场景"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"多个组件依赖于同一个状态"}),"\n",(0,s.jsx)(e.li,{children:"来自不同组件的行为需要变更同一状态"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"52-原理图",children:["5.2 原理图",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#52-原理图",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:"image-20220823155818208"})}),"\n",(0,s.jsxs)(e.h2,{id:"53-搭建vuex环境",children:["5.3 搭建vuex环境",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#53-搭建vuex环境",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["创建",(0,s.jsx)(e.code,{children:"src/store/index.js"}),"文件"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 该文件用于创建vuex中最为核心的store\r\n\r\n// 引入Vue\r\nimport Vue from 'vue'\r\n// 引入Vuex\r\nimport Vuex from 'vuex'\r\n// 使用插件Vuex,随后创建vue实例时，才可传入store配置项\r\nVue.use(Vuex)\r\n\r\n// 准备actions，用于响应组件中的动作\r\nconst actions = {}\r\n\r\n// 准备mutations， 用于操作数据（state）\r\nconst mutations = {}\r\n\r\n// 准备state， 用于存储数据\r\nconst state = {}\r\n// 创建并暴露store（创建store必须是在Vue.use(Vuex)之后，不然报错）\r\nexport default new Vuex.Store({\r\n    actions,\r\n    mutations,\r\n    state\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"main.js"}),"中创建vm时传入",(0,s.jsx)(e.code,{children:"store"}),"配置项"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\n// 引入store\r\nimport store from './store/index'\r\n...\r\nconst vm = new Vue({\r\n  el: '#app',\r\n  render: h => h(App),\r\n  store // 传入store配置。因为key值和value值一样，此处可以使用简写模式\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"例子：进行求和操作"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Count"}),"组件"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["组件中读取vuex中的数据：",(0,s.jsx)(e.code,{children:"this.$store.state.sum"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["调用vuex API，修改数据：",(0,s.jsx)(e.code,{children:"this.$store.dispatch('actions中的方法名', 数据)"}),"或",(0,s.jsx)(e.code,{children:"this.$store.commit('mutations中方法名', 数据)"})]}),"\n",(0,s.jsx)(e.p,{children:"==如果没有网络请求，或者其他业务逻辑，组价也可以越过actions，直接调用commit API=="}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<template>\r\n  <div class="category">\r\n    <h2>求和结果是：{{$store.state.sum}}</h2>\r\n    <select v-model="n">\r\n      <option :value="1">1</option>\r\n      <option :value="2">2</option>\r\n      <option :value="3">3</option>\r\n    </select>\r\n    <button @click="increment">+</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n      return {\r\n        n: 1\r\n      }\r\n    },\r\n    methods: {\r\n      increment() {\r\n        // 调用store的dispatch API，将操作发送给actions\r\n        this.$store.dispatch(\'increment\', this.n)\r\n        // 如果没有网络请求，或者其他业务逻辑，组价也可以越过actions，直接调用commit API\r\n        // this.$store.commit(\'INCREMENT\', this.n)\r\n      }\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\nbutton {\r\n  margin-left: 5px\r\n}\r\n</style>\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:"src/store/index.js"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\n// 准备actions，用于响应组件中的动作\r\nconst actions = {\r\n    // 第一个参数叫上下文，是简写版的store\r\n    increment(context, value) {\r\n        // 调用store的commit API，将操作发送给mutations\r\n        // 一般为了做个区分，mutations中对应的方法习惯性大写\r\n        context.commit('INCREMENT', value)\r\n    }\r\n}\r\n\r\n// 准备mutations， 用于操作数据（state）\r\nconst mutations = {\r\n    INCREMENT(context, value) {\r\n        console.log('mutations----\x3eINCREMENT:', context, value)\r\n        context.sum += value\r\n    }\r\n}\r\n\r\n// 准备state， 用于存储数据\r\nconst state = {\r\n    sum: 0 // 求得的和\r\n}\r\n...\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"54-getters配置项",children:["5.4 getters配置项",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#54-getters配置项",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"当state中的数据需要加工再使用时，可以使用getters加工。"}),"\n",(0,s.jsx)(e.p,{children:"类似于vue中的计算属性computed"}),"\n",(0,s.jsx)(e.p,{children:"==逻辑当然也可以自己写。但是如果逻辑比较复杂，并且想要实现复用，推荐使用getters=="}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"src/store/index.js"}),"中追加",(0,s.jsx)(e.code,{children:"getters"}),"配置"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\n// 准备getters， 用于对state中的数据进行加工\r\nconst getters = {\r\n    bigSum(state) {\r\n        console.log('getters======', state)\r\n        return state.sum * 10\r\n    }\r\n}\r\n\r\n// 创建并暴露store\r\nexport default new Vuex.Store({\r\n    ...\r\n    getters\r\n})\r\n\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["组件中读取数据：",(0,s.jsx)(e.code,{children:"this.$store.getters.bigSum"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"55-四个map方法的使用",children:["5.5 四个map方法的使用",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#55-四个map方法的使用",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"mapState方法：将$store.state中的数据生成为Object对象（常写在组件的计算属性中，将Object对象返回为计算属性）"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["==语法==：",(0,s.jsx)(e.code,{children:"...mapState({'组件中属性名1': '$store.state中属性名1', 组件中属性名2: '$store.state中属性名2', ...})"}),"或者当组件中属性名和$store.state中属性名一致时，可以使用数组形式简写",(0,s.jsx)(e.code,{children:"...mapState(['属性名1', '属性名2', ...])"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div class=\"category\">\r\n    <h2>求和结果是：{{sum}}</h2>\r\n    <h2>我在{{school}}，学习{{subject}}</h2>\r\n    ...\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入mapState方法\r\nimport {mapState} from 'vuex'\r\nexport default {\r\n    ...\r\n    computed: {\r\n      // 借助mapState获取$store.state中的数据：school、subject、sum(对象写法)\r\n       ...mapState({'school': 'school', subject: 'subject', sum: 'sum'}),\r\n\r\n      // 借助mapState获取$store.state中的数据：school、subject、sum（数组写法）\r\n      ...mapState(['school', 'subject', 'sum']),\r\n\r\n    },\r\n}\r\n<\/script>\r\n...\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"mapGetters方法：将$store.getters中的方法生成为Object对象（常写在组件的计算属性中，将Object对象返回为计算属性）"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["==语法==：",(0,s.jsx)(e.code,{children:"...mapGetters({'组件中方法名1': '$store.getters中方法名1', 组件中方法名2: '$store.getters中方法名2', ...})"}),"或者当组件中方法名和$store.getters中方法名一致时，可以使用数组形式简写",(0,s.jsx)(e.code,{children:"...mapGetters(['方法名1', '方法名2', ...])"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div class=\"category\">\r\n   ...\r\n    <h2>放大10倍后的结果是：{{bigSum}}</h2>\r\n    ...\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入mapGetters方法\r\nimport {mapGetters} from 'vuex'\r\nexport default {\r\n    ...\r\n    computed: {\r\n      // 借助mapGetters获取$store.getters中的数据：bigSum(对象写法)\r\n       ...mapGetters({bigSum: 'bigSum'}),\r\n\r\n      // 借助mapGetters获取$store.getters中的数据：bigSum（数组写法）\r\n      ...mapGetters(['bigSum'])\r\n    }\r\n}\r\n<\/script>\r\n...\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"mapActions方法：生成与actions对话的方法，即包含$store.dispatch(XXX)的函数"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["==语法==：",(0,s.jsx)(e.code,{children:"...mapActions({'组件中方法名1': '$store.actions中方法名1', 组件中方法名2: '$store.actions中方法名2', ...})"}),"或者当组件中方法名和$store.actions中方法名一致时，可以使用数组形式简写",(0,s.jsx)(e.code,{children:"...mapActions(['方法名1', '方法名2', ...])"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div class=\"category\">\r\n    ...\r\n    \x3c!-- 注意：此时调用方法时必须传参 --\x3e\r\n    <button @click=\"increment(n)\">+</button>\r\n    <button @click=\"decrement(n)\">-</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入mapActions\r\nimport { mapActions } from 'vuex'\r\nexport default {\r\n    ...\r\n    methods: {\r\n      // 借助mapActions生成对应的方法，方法中会自动调用this.$store.dispatch API（对象写法）\r\n      ...mapActions({increment: 'increment', decrement: 'decrement'}),\r\n\r\n      // 借助mapActions生成对应的方法，方法中会自动调用this.$store.dispatch API（数组写法）\r\n      ...mapActions(['increment', 'decrement']),\r\n      ...\r\n    },\r\n    ...\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\nbutton {\r\n  margin-left: 5px\r\n}\r\n</style>\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"mapMutations方法：生成与mutations对话的方法，即包含$store.commit(XXX)的函数"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["==语法==：",(0,s.jsx)(e.code,{children:"...mapMutations({'组件中方法名1': '$store.mutations中方法名1', 组件中方法名2: '$store.mutations中方法名2', ...})"}),"或者当组件中方法名和$store.mutations中方法名一致时，可以使用数组形式简写",(0,s.jsx)(e.code,{children:"...mapMutations(['方法名1', '方法名2', ...])"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<template>\r\n  <div class=\"category\">\r\n    ...\r\n    <button @click=\"INCREMENT(n)\">+</button>\r\n    <button @click=\"DECREMENT(n)\">-</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入mapMutations\r\nimport { mapMutations } from 'vuex'\r\nexport default {\r\n    ...\r\n    methods: {\r\n      ...\r\n      // 借助mapActions生成对应的方法，方法中会自动调用this.$store.commit API（对象写法）\r\n      ...mapMutations({increment: 'INCREMENT', decrement: 'DECREMENT'}),\r\n\r\n      // 借助mapActions生成对应的方法，方法中会自动调用this.$store.commit API（对象写法）\r\n      // ...mapMutations(['INCREMENT', 'DECREMENT']),\r\n      ...\r\n    },\r\n    ...\r\n}\r\n<\/script>\r\n...\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"55-模块化编程namespace",children:["5.5 模块化编程+namespace",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#55-模块化编程namespace",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"让代码更好维护，让多种数据分类更加明确。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["修改",(0,s.jsx)(e.code,{children:"src/store/index.js"}),"文件："]}),"\n",(0,s.jsx)(e.p,{children:"==将不同模块的store相关配置分离开来，在创建store的时候使用modules分模块创建=="}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\n\r\n// Count组件相关功能\r\nconst countAbout =  {\r\n    namespaced: true, // 开启命名空间\r\n    actions: {...},\r\n    mutations: {...},\r\n    state: {...},\r\n    getters: {...}\r\n}\r\n// 人员组件相关功能\r\nconst personAbout =  {\r\n    namespaced: true, // 开启命名空间\r\n    actions: {...},\r\n    mutations: {...},\r\n    state: {...},\r\n    getters: {...}\r\n}\r\n// 创建并暴露store\r\nexport default new Vuex.Store({\r\n    modules: {\r\n        count, // 模块名\r\n        person // 模块名\r\n    }\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"开启命名空间后，组件读取state数据"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 方式一：自己直接读取（读取person模块中的personList属性）\r\nthis.$store.state.person.personList\r\n// 方式二：借助mapState读取（读取count模块中的school、subject、sum属性）\r\n ...mapState('count', ['school', 'subject', 'sum']),\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"开启命名空间后，组件读取getters数据"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 方式一：自己直接读取（读取person模块中的firstPersonName getters方法）\r\nthis.$store.getters['person/firstPersonName']\r\n// 方式二：借助mapGetters读取（读取count模块中的bigSum getters方法）\r\n...mapGetters('count', ['bigSum'])\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"开启命名空间后，组件调用dispatch API"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 方式一：自己直接调用（调用person模块中的addWang actions方法）\r\nthis.$store.dispatch('person/addWang', person)\r\n// 方式二：借助mapActions调用（调用count模块中的increment actions方法）\r\n...mapActions('count',['increment']),\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"开启命名空间后，组件调用commit API"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 方式一：自己直接（调用person模块中的ADD mutations方法）\r\nthis.$store.commit('person/ADD', person)\r\n// 方式二：借助mapMutations调用（调用count模块中的DECREMENT mutations方法）\r\n...mapMutations('count', {decrement: 'DECREMENT'}),\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"6vue-router",children:["6.vue-router",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6vue-router",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"61-相关概念",children:["6.1 相关概念",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#61-相关概念",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"vue-router"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"（router：路由器，由多个路由组成，用于集中管理不同的路由）"}),"\n",(0,s.jsx)(e.p,{children:"vue的一个插件库，专门用来实现==SPA应用=="}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"SPA"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"单页面Web应用（single page web application)"}),"\n",(0,s.jsxs)(e.li,{children:["整个应用","只有一个完成的页面"]}),"\n",(0,s.jsxs)(e.li,{children:["点击页面中的导航连接","不会刷新页面","，只会做页面的","局部更新"]}),"\n",(0,s.jsx)(e.li,{children:"数据需要通过ajax请求获取"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"路由"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["什么是路由：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"一个路由就是一组映射关系（key-value）"}),"\n",(0,s.jsx)(e.li,{children:"key为路径，value可能是function或者component"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["路由分类：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["后端路由","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"value是function，用于处理客户端提交的请求"}),"\n",(0,s.jsx)(e.li,{children:"工作过程：当服务器接收到一个请求时，根据请求路径找到匹配的函数来处理请求，并返回响应数据"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["前端路由","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"value是component，用于展示页面内容"}),"\n",(0,s.jsx)(e.li,{children:"工作过程：当浏览器的路径改变时，对应的组件会被渲染"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"62-基本路由",children:["6.2 基本路由",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#62-基本路由",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"安装vue-router"}),"\n",(0,s.jsx)(e.p,{children:"==目前最新版本的vue-router是4.X，只适用于vue3，和vue2适配的最新版本是3.X。所以安装时要根据vue的版本指定vue-router的版本号=="}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:"npm i vue-router@3\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"应用插件，并编写router配置"}),"\n",(0,s.jsxs)(e.p,{children:["新建",(0,s.jsx)(e.code,{children:"src/router/index.js"}),"文件，编写如下内容："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 引入vue-router\r\nimport VueRouter from 'vue-router'\r\n// 引入Vue\r\nimport Vue from \"vue\"\r\n// 使用VueRouter插件\r\nVue.use(VueRouter)\r\n// 引入Home组件\r\nimport Home from '../pages/Home.vue'\r\n// 创建router实例对象，去管理多组路由规则，并将其暴露出去\r\nexport default new VueRouter({\r\n    routes: [\r\n        {\r\n            path: '/about', // 路径\r\n            component: () => import('../pages/About.vue') // 组件（第一种写法：异步写法）\r\n        },\r\n        {\r\n            path: '/home', // 路径\r\n            component: Home // 组件\r\n        },\r\n    ]\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["修改",(0,s.jsx)(e.code,{children:"main.js"}),"配置"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\n// 引入router\r\nimport router from './router'\r\n...\r\n// 创建Vue实例对象vm\r\nconst vm = new Vue({\r\n  ...\r\n  router: router // 配置vue的router属性\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"页面中实现路由切换"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"特定标签：router-link"}),"\n",(0,s.jsx)(e.li,{children:"active-class：指定选中样式"}),"\n",(0,s.jsx)(e.li,{children:"to：跳转到的路径"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'<router-link class="myRouter" active-class="active" to="/about">About</router-link>\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"指定路由组件的展示位置"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<router-view></router-view>\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"几个注意事项"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["路由组件通常存放在",(0,s.jsx)(e.code,{children:"pages"}),"文件夹，一般组件通常存放在",(0,s.jsx)(e.code,{children:"components"}),"文件夹"]}),"\n",(0,s.jsx)(e.li,{children:"通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载"}),"\n",(0,s.jsxs)(e.li,{children:["每个组件都有自己的",(0,s.jsx)(e.code,{children:"$route"}),"属性，里面存放着自己的路由信息"]}),"\n",(0,s.jsxs)(e.li,{children:["整个应用只有一个router，可以通过组件的",(0,s.jsx)(e.code,{children:"$router"}),"属性获取到"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"63-嵌套多级路由",children:["6.3 嵌套（多级）路由",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#63-嵌套多级路由",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["配置路由规则，使用",(0,s.jsx)(e.code,{children:"children"}),"配置项"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"...\r\nexport default new VueRouter({\r\n    routes: [\r\n        ...\r\n        {\r\n            path: '/home',\r\n            component: Home,\r\n            children: [\r\n                {\r\n                    path: 'news', // 子路由path值不加‘/’\r\n                    component: News\r\n                },\r\n                {\r\n                    path: 'messages',\r\n                    component: Messages\r\n                },\r\n            ]\r\n        },\r\n    ]\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"跳转"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:' <router-link class="home_route" active-class="active" to="/home/messages">messages</router-link>\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"64-命名路由",children:["6.4 命名路由",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#64-命名路由",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"可以简化路由的跳转。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"用法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"给路由命名"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default new VueRouter({\r\n    routes: [\r\n        ...\r\n        {\r\n            name: 'home', // 路由名字\r\n            path: '/home',\r\n            component: Home,\r\n            children: [\r\n                ...\r\n                {\r\n                    name: 'messages', // 路由名字\r\n                    path: 'messages',\r\n                    component: Messages,\r\n                    children: [{\r\n                        name: 'detail', // 路由名字\r\n                        path: 'detail',\r\n                        component: Detail\r\n                    }]\r\n                },\r\n            ]\r\n        },\r\n    ]\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"简化跳转"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'\x3c!-- 简化前，要写完整的路径 --\x3e\r\n<router-link to="/home/messages/detail"></router-link>\r\n\x3c!-- 简化后，直接通过路由名字跳转 --\x3e\r\n<router-link to="{name: \'detail\'}"></router-link>\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"65-路由传参",children:["6.5 路由传参",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#65-路由传参",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"传参方式"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"query参数"}),"\n",(0,s.jsx)(e.li,{children:"params参数"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"query传参"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"传递参数"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"...\r\n\x3c!-- 跳转并携带query参数，to的字符串写法 --\x3e\r\n<router-link :to=\"`/home/messages/detail?id=${item.id}&info=${item.info}`\">{{item.info}}</router-link>\r\n\r\n\x3c!-- 跳转并携带query参数，to的对象写法 --\x3e\r\n<router-link \r\n	:to=\"{\r\n		name: 'detail', // 既可以使用name跳转，也可以使用path跳转\r\n		// path: '/home/messages/detail', \r\n        query: {\r\n        	id: item.id,\r\n            info: item.info\r\n        }\r\n     }\"\r\n>{{item.info}}</router-link>\r\n...\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"接收参数"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"this.$route.query.id\r\nthis.$route.query.info\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"params"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"路由配置，声明接收params参数"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default new VueRouter({\r\n    routes: [\r\n        ...\r\n        {\r\n            name: 'home', \r\n            path: '/home',\r\n            component: Home,\r\n            children: [\r\n                ...\r\n                {\r\n                    name: 'messages', \r\n                    path: 'messages',\r\n                    component: Messages,\r\n                    children: [{\r\n                        name: 'detail', \r\n                        path: 'detail/:id/:info', // 使用占位符，标记params参数名字\r\n                        component: Detail\r\n                    }]\r\n                },\r\n            ]\r\n        },\r\n    ]\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"传递参数"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'\x3c!-- 跳转并携带params参数，to的字符串写法 --\x3e\r\n<router-link :to="`/home/messages/detail/${item.id}/${item.info}`">{{item.info}}</router-link>\r\n\x3c!-- 跳转并携带params参数，to的对象写法 --\x3e\r\n<router-link \r\n	:to="{\r\n		name: \'detail\', // 此处只能使用name跳转，不能使用path\r\n        params: {\r\n        	id: item.id,\r\n            info: item.info\r\n        }\r\n     }"\r\n>{{item.info}}</router-link>\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"接收参数"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"this.$route.params.id\r\nthis.$route.params.info\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"66-路由的props配置",children:["6.6 路由的props配置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#66-路由的props配置",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"让路由组件更方便的接收到参数"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"第一种写法：值为对象。该对象中的所有key-value都会以props的形式传给Detail组件"}),"\n",(0,s.jsx)(e.p,{children:"==一般不这么写。此种写法只能传递固定参数。=="}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default new VueRouter({\r\n    routes: [\r\n        ...\r\n        {\r\n            name: 'home', \r\n            path: '/home',\r\n            component: Home,\r\n            children: [\r\n                ...\r\n                {\r\n                    name: 'messages', \r\n                    path: 'messages',\r\n                    component: Messages,\r\n                    children: [\r\n                        {\r\n                            name: 'detail', \r\n                            path: 'detail/:id:/info',\r\n                            component: Detail,\r\n                            // props的第一种写法：值为对象\r\n                            props: {id: '666', info: 'hello'}\r\n                        }\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n    ]\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"第二种写法：值为布尔值。若布尔值为true，就会把该路由组件收到的params参数，以props的形式传递给Detail组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default new VueRouter({\r\n    routes: [\r\n        ...\r\n        {\r\n            name: 'home', \r\n            path: '/home',\r\n            component: Home,\r\n            children: [\r\n                ...\r\n                {\r\n                    name: 'messages', \r\n                    path: 'messages',\r\n                    component: Messages,\r\n                    children: [\r\n                        {\r\n                            name: 'detail', \r\n                            path: 'detail/:id:/info',\r\n                            component: Detail,\r\n                            // props的第二种写法：值为布尔值\r\n                            props: true\r\n                        }\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n    ]\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"第三种写法：值为函数。既可以接收query参数，也可以接收params参数"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default new VueRouter({\r\n    routes: [\r\n        ...\r\n        {\r\n            name: 'home', \r\n            path: '/home',\r\n            component: Home,\r\n            children: [\r\n                ...\r\n                {\r\n                    name: 'messages', \r\n                    path: 'messages',\r\n                    component: Messages,\r\n                    children: [\r\n                        {\r\n                            name: 'detail',\r\n                            path: 'detail/:id/:info',\r\n                            component: Detail,\r\n                            // props的第三种写法：值为函数\r\n                            props($route) {\r\n                                return {\r\n                                    id: $route.params.id,\r\n                                    info: $route.params.info\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n    ]\r\n})\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"67-router-link的replace属性",children:["6.7 router-link的replace属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#67-router-link的replace属性",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"控制路由跳转时操作浏览器历史记录的模式"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"说明"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["浏览器的历史记录有两种写入方式，分别是",(0,s.jsx)(e.code,{children:"push"}),"和",(0,s.jsx)(e.code,{children:"replace"}),"， ",(0,s.jsx)(e.code,{children:"push"}),"是追加历史记录，",(0,s.jsx)(e.code,{children:"replace"}),"是替换==当前记录==。路由跳转时默认为",(0,s.jsx)(e.code,{children:"push"}),"方式"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["对",(0,s.jsx)(e.code,{children:"router-link"}),"标签使用",(0,s.jsx)(e.code,{children:"replace"}),"属性即可开启",(0,s.jsx)(e.code,{children:"replace"}),"模式"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"<router-link replace ...>Home</router-link>\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"68-编程式路由导航",children:["6.8 编程式路由导航",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#68-编程式路由导航",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["不借助",(0,s.jsx)(e.code,{children:"router-link"}),"实现路由跳转，让路由跳转更加灵活"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"==借助$router的API实现=="}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"push跳转"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"this.$router.push({\r\n    name: 'detail',\r\n    params: {\r\n        id: '001',\r\n        info: 'message001'\r\n    }\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"replace跳转"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"this.$router.replace({\r\n    name: 'detail',\r\n    params: {\r\n        id: '001',\r\n        info: 'message001'\r\n    }\r\n})\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"前进"}),"\n",(0,s.jsx)(e.p,{children:"==前进一步=="}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"this.$router.forward()\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"后退"}),"\n",(0,s.jsx)(e.p,{children:"==后退一步=="}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"this.$router.back()\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"按照参数前进或后退"}),"\n",(0,s.jsx)(e.p,{children:"==参数n为正，表示前进，参数为负，表示后退，步数为n的绝对值=="}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"this.$router.go(2) // 前进两步\r\nthis.$router.go(-1) // 后退一步\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"69-缓存路由组件",children:["6.9 缓存路由组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#69-缓存路由组件",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"让不展示的路由组件保持挂载，不被销毁"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"适用场景"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"路由组件中有输入框，切换到别的路由组件，再切回时，该路由组件输入框的内容仍旧为用户输入内容"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"具体编码"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"keep-alive：特定标签，包裹着要展示的内容"}),"\n",(0,s.jsx)(e.li,{children:"include：keep-alive的属性，用于配置哪些组件需要被缓存，其值为组件名"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:'\x3c!-- 缓存单个路由组件 --\x3e\r\n<keep-alive include="News">\r\n	<router-view></router-view>\r\n</keep-alive>\r\n\r\n\x3c!-- 缓存多个路由组件，第一种写法，字符串写法。注意，不可有空格，如include="News, Messages"是错误的 --\x3e\r\n<keep-alive include="News,Messages">\r\n	<router-view></router-view>\r\n</keep-alive>\r\n\r\n\x3c!-- 缓存多个路由组件，第二种写法，数组写法，使用v-bind指令。 --\x3e\r\n<keep-alive :include="[\'News\', \'Messages\']">\r\n	<router-view></router-view>\r\n</keep-alive>\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"610-两个新的生命周期钩子",children:["6.10 两个新的生命周期钩子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#610-两个新的生命周期钩子",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"路由组件所独有的两个钩子，用于捕获路由组件的激活装填"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"具体名字"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"activated：路由组件被激活时触发"}),"\n",(0,s.jsx)(e.li,{children:"deactivated： 路由组件失活时触发"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"611-路由守卫",children:["6.11 路由守卫",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#611-路由守卫",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"对路由进行权限控制"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"分类"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"全局守卫"}),"\n",(0,s.jsx)(e.li,{children:"独享守卫"}),"\n",(0,s.jsx)(e.li,{children:"组件内守卫"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"全局守卫"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// 创建router实例对象，去管理多组路由规则\r\nconst router = new VueRouter({\r\n    routes: [\r\n       ...\r\n        {\r\n            name: 'home', \r\n            path: '/home',\r\n            component: Home,\r\n            meta: { // 路由元配置。在该属性内可以自定义路由信息\r\n                title: '主页' // 配置组件title\r\n            },\r\n            children: [\r\n                {\r\n                    name: 'news', \r\n                    path: 'news', \r\n                    component: News,\r\n                    meta: {\r\n                        title: '新闻',\r\n                        isAuth: true // 配置组件是否需要鉴权\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n    ]\r\n})\r\n\r\n\r\n/**\r\n * 全局前置守卫，初始化时执行，每次路由切换前执行\r\n * @param to 将要跳转到的路由\r\n * @param from 当前路由\r\n * @param next  放行，即完成路由的跳转\r\n */\r\nrouter.beforeEach((to, from, next) => {\r\n    if(to.meta.isAuth) { // 判断当前路由组件是否需要鉴权\r\n        if(localStorage.getItem('userName') === 'tth') { // 鉴权\r\n            next(); // 放行\r\n        } else {\r\n            alert('无权限查看')\r\n        }\r\n    } else {\r\n        next()\r\n    }\r\n})\r\n\r\n/**\r\n * 全局后置守卫，初始化时执行，每次路由切换后执行\r\n * @param to 将要跳转到的路由\r\n * @param from 当前路由\r\n */\r\nrouter.afterEach((to, from) => {\r\n    document.title = to.meta.title ? to.meta.title : 'vue_test' // 修改网页title\r\n})\r\n\r\nexport default router\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"独享守卫"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["独享路由守卫",(0,s.jsx)(e.code,{children:"beforeEnter"}),"配置项，只针对某一个路由组件的路由守卫，且只有前置独享守卫，没有后置独享守卫"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"const router = new VueRouter({\r\n    routes: [\r\n        ...\r\n       {\r\n           name: 'news', // 路由名字\r\n           path: 'news', // 子路由path值不加‘/’\r\n           component: News,\r\n           meta: {\r\n               title: '新闻',\r\n               isAuth: true\r\n           },\r\n           beforeEnter: (to, from, next) => { // 独享路由守卫\r\n               if(to.meta.isAuth) { // 判断当前路由组件是否需要鉴权\r\n                   if(localStorage.getItem('userName') === 'tth') { // 鉴权\r\n                       next(); // 放行\r\n                   } else {\r\n                       alert('无权限查看')\r\n                   }\r\n               } else {\r\n                   next()\r\n               }\r\n           },\r\n\r\n       },\r\n       ...\r\n    ]\r\n})\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"组件内路由守卫"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"beforeRouteEnter：==通过路由守卫进入组件时==被调用"}),"\n",(0,s.jsx)(e.li,{children:"beforeRouteLeave：==通过路由组件离开组件时==被调用"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-vue",children:"...\r\n<script>\r\n    export default {\r\n        name: 'About',\r\n        // 通过路由守卫，进入该组件时被调用\r\n        beforeRouteEnter(to, from, next) {\r\n        },\r\n        // 通过路由守卫，离开该组件时被调用\r\n        beforeRouteLeave(to, from, next) {\r\n        }\r\n    }\r\n<\/script>\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"612-路由器的两种工作模式",children:["6.12 路由器的两种工作模式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#612-路由器的两种工作模式",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"路由器的两种工作模式"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"hash模式"}),"\n",(0,s.jsx)(e.li,{children:"history模式"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"hash模式"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"对于一个url来说，==#及其后边的内容就是hash值==，hash值不会包含在HTTP请求中，即==hash值不会带给服务器==。可以借助==window.location.hash==来获取hash值"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"特点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"地址中永远带着#，不美观"}),"\n",(0,s.jsx)(e.li,{children:"若以后将地址通过第三方手机APP分享，如果APP校验严格，则地址会被标记为不合法"}),"\n",(0,s.jsx)(e.li,{children:"兼容性比较好"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"const router = new VueRouter({\r\n    mode: 'hash', // 将路由器的工作模式设置为hash模式（默认模式）\r\n    ...\r\n})\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"history模式"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"特点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"地址干净、美观"}),"\n",(0,s.jsx)(e.li,{children:"兼容性比hash略差"}),"\n",(0,s.jsx)(e.li,{children:"应用部署上线需要后端支持，解决页面刷新服务端404错误"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"使用方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"const router = new VueRouter({\r\n    mode: 'hash', // 将路由器的工作模式设置为hash模式（默认模式）\r\n    ...\r\n})\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"7vue-ui组件库",children:["7.Vue UI组件库",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7vue-ui组件库",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"71-移动端",children:["7.1 移动端",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#71-移动端",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Vant：",(0,s.jsx)(e.a,{href:"https://vant-ui.github.io/vant/#/zh-CN",target:"_blank",rel:"noopener noreferrer",children:"https://vant-ui.github.io/vant/#/zh-CN"})]}),"\n",(0,s.jsxs)(e.li,{children:["Cube UI： ",(0,s.jsx)(e.a,{href:"https://didi.github.io/cube-ui/#/zh-CN",target:"_blank",rel:"noopener noreferrer",children:"https://didi.github.io/cube-ui/#/zh-CN"})]}),"\n",(0,s.jsxs)(e.li,{children:["Mint UI：",(0,s.jsx)(e.a,{href:"http://mint-ui.github.io/#!/zh-cn",target:"_blank",rel:"noopener noreferrer",children:"http://mint-ui.github.io/#!/zh-cn"})]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"72-pc端",children:["7.2 PC端",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#72-pc端",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Element UI：",(0,s.jsx)(e.a,{href:"https://element.eleme.cn/#/zh-CN",target:"_blank",rel:"noopener noreferrer",children:"https://element.eleme.cn/#/zh-CN"})]}),"\n",(0,s.jsxs)(e.li,{children:["iView UI：",(0,s.jsx)(e.a,{href:"https://www.iviewui.com/",target:"_blank",rel:"noopener noreferrer",children:"https://www.iviewui.com/"})]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"附零零散散小知识",children:["附：零零散散小知识",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#附零零散散小知识",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"组件通信--父传子",children:["①组件通信--父传子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件通信--父传子",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["方法一：使用",(0,s.jsx)(e.code,{children:"props"}),"属性"]}),"\n",(0,s.jsx)(e.li,{children:"方法二：使用==全局事件总线=="}),"\n",(0,s.jsx)(e.li,{children:"方法三：插槽"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"组件通信--子传父",children:["②组件通信--子传父",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件通信--子传父",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["方法一：使用",(0,s.jsx)(e.code,{children:"props"}),"属性，先传给子组件一个方法，在子组件中调用该方法"]}),"\n",(0,s.jsxs)(e.li,{children:["方法二：使用自定义事件","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["第一种写法：借助",(0,s.jsx)(e.code,{children:"v-on"}),"或",(0,s.jsx)(e.code,{children:"@"}),"指令"]}),"\n",(0,s.jsxs)(e.li,{children:["第二种写法：借助",(0,s.jsx)(e.code,{children:"$ref"}),"属性"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"方法三：使用==全局事件总线=="}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"组件通信--兄弟通信",children:["③组件通信--兄弟通信",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件通信--兄弟通信",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"方法一：使用==全局事件总线=="}),"\n",(0,s.jsx)(e.li,{children:"方法二：消息订阅与发布（vue中推荐使用方法一。因为消息订阅与发布需要引入第三方库）"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"函数中用了一个data中没有声明过的变量",children:["④函数中用了一个data中没有声明过的变量",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数中用了一个data中没有声明过的变量",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"image-20220825164049430"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"timer"}),"没有在",(0,s.jsx)(e.code,{children:"data"}),"中声明，直接使用，==不会报错，但是，此时",(0,s.jsx)(e.code,{children:"timer"}),"不是一个响应式的变量=="]}),"\n",(0,s.jsxs)(e.h2,{id:"生命周期钩子",children:["⑤生命周期钩子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#生命周期钩子",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"beforeCreate：此时==无法==通过vm访问到data中的数据、methods中的方法"}),"\n",(0,s.jsx)(e.li,{children:"created：此时==可以==通过vm访问到data中的数据、methods中的方法"}),"\n",(0,s.jsxs)(e.li,{children:["beforeMounte：此时","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"页面呈现的是==未经Vue编译==的DOM结构"}),"\n",(0,s.jsx)(e.li,{children:"所有对DOM的操作，==最终==都不奏效（关于最终的解释：过程中会奏效，但是页面渲染结束后，之前对DOM的操作会被覆盖掉）"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["mounted：此时","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"页面中呈现的是==经过Vue编辑==的DOM"}),"\n",(0,s.jsx)(e.li,{children:"对DOM的操作均有效（尽可能避免）"}),"\n",(0,s.jsx)(e.li,{children:"至此，初始化过程结束。一般在此进行：==开启定时器任务==、==发送网络请求==、==订阅消息==、==绑定自定义事件==等初始化操作"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["beforeUpdate：此时，==数据是新的，但页面是旧的==，即","页面尚未和数据保持同步","。"]}),"\n",(0,s.jsx)(e.li,{children:"updated：此时，==数据是新的，页面也是新的==，即页面和数据保持同步"}),"\n",(0,s.jsxs)(e.li,{children:["beforeDestroy：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"此时，vm中所有的data、methods、指令等，都处于==可用==状态，==马上==要执行销毁过程"}),"\n",(0,s.jsx)(e.li,{children:"一般在此进行：==关闭定时器==、==取消订阅任务==、==解绑自定义事件==等收尾工作"}),"\n",(0,s.jsxs)(e.li,{children:["该API的作用：完全销毁一个实例，清理它与其它实例的连接，解绑它的全部指令、自定义的事件监听器（","DOM原生的监听不会被清理","）"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"destroyed：此时，实例被完全销毁，一般来说，这个钩子函数用不到"}),"\n",(0,s.jsx)(e.li,{children:"nextTick：在下一次DOM更新结束后执行其指定的回调"}),"\n",(0,s.jsxs)(e.li,{children:["activated：路由组件被激活时触发。当路由组件被",(0,s.jsx)(e.code,{children:"<keep-alive>"}),"包裹时，可以在此==开启定时任务==（当然在mounted钩子中也可以）"]}),"\n",(0,s.jsxs)(e.li,{children:["deactivated： 路由组件失活时触发。当路由组件被",(0,s.jsx)(e.code,{children:"<keep-alive>"}),"包裹时，可以在此==关闭定时任务=="]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"-其他相关知识",children:["⑥ 其他相关知识",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#-其他相关知识",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"nodejs"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"ES6"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"TS"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"webpack"}),"\n"]}),"\n"]})]})}function b(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(f,{...n})}):f(n)}let N=b;b.__RSPRESS_PAGE_META={},b.__RSPRESS_PAGE_META["tang%2FVue%2F2.md"]={toc:[{text:"1.1 模块",id:"11-模块",depth:2},{text:"1.2 组件",id:"12-组件",depth:2},{text:"1.3 模块化",id:"13-模块化",depth:2},{text:"1.4 组件化",id:"14-组件化",depth:2},{text:"1.5 非单文件组件",id:"15-非单文件组件",depth:2},{text:"1.6 单文件组件",id:"16-单文件组件",depth:2},{text:"2.1 组件的基本使用",id:"21-组件的基本使用",depth:2},{text:"2.2 组件几个注意点",id:"22-组件几个注意点",depth:2},{text:"2.3 VueComponent构造函数",id:"23-vuecomponent构造函数",depth:2},{text:"2.4 一个重要的内置关系",id:"24-一个重要的内置关系",depth:2},{text:"2.5 单文件组件",id:"25-单文件组件",depth:2},{text:"3.1 初始化脚手架",id:"31-初始化脚手架",depth:2},{text:"3.2 vue项目各文件解释",id:"32-vue项目各文件解释",depth:2},{text:"3.3 main.js中的rander函数解释",id:"33-mainjs中的rander函数解释",depth:2},{text:"3.4 脚手架文件结构",id:"34-脚手架文件结构",depth:2},{text:"3.5 vue.config.js配置文件",id:"35-vueconfigjs配置文件",depth:2},{text:"3.6 ref属性",id:"36-ref属性",depth:2},{text:"3.7 props配置项",id:"37-props配置项",depth:2},{text:"3.8 mixin（混入/混合）",id:"38-mixin混入混合",depth:2},{text:"3.9 插件",id:"39-插件",depth:2},{text:"3.10 scoped样式",id:"310-scoped样式",depth:2},{text:"3.11 lang属性",id:"311-lang属性",depth:2},{text:"3.12 Todo-list案例",id:"312-todo-list案例",depth:2},{text:"3.13 webStorage",id:"313-webstorage",depth:2},{text:"3.14 Vue中的自定义事件",id:"314-vue中的自定义事件",depth:2},{text:"3.15 全局事件总线",id:"315-全局事件总线",depth:2},{text:"3.16 消息订阅与发布",id:"316-消息订阅与发布",depth:2},{text:"3.17 $nextTick",id:"317-nexttick",depth:2},{text:"3.18 过渡与动画",id:"318-过渡与动画",depth:2},{text:"4.1 vue脚手架配置代理",id:"41-vue脚手架配置代理",depth:2},{text:"4.2 vue-resource",id:"42-vue-resource",depth:2},{text:"4.3 slot插槽",id:"43-slot插槽",depth:2},{text:"5.1 理解vuex",id:"51-理解vuex",depth:2},{text:"5.2 原理图",id:"52-原理图",depth:2},{text:"5.3 搭建vuex环境",id:"53-搭建vuex环境",depth:2},{text:"5.4 getters配置项",id:"54-getters配置项",depth:2},{text:"5.5 四个map方法的使用",id:"55-四个map方法的使用",depth:2},{text:"5.5 模块化编程+namespace",id:"55-模块化编程namespace",depth:2},{text:"6.1 相关概念",id:"61-相关概念",depth:2},{text:"6.2 基本路由",id:"62-基本路由",depth:2},{text:"6.3 嵌套（多级）路由",id:"63-嵌套多级路由",depth:2},{text:"6.4 命名路由",id:"64-命名路由",depth:2},{text:"6.5 路由传参",id:"65-路由传参",depth:2},{text:"6.6 路由的props配置",id:"66-路由的props配置",depth:2},{text:"6.7 router-link的replace属性",id:"67-router-link的replace属性",depth:2},{text:"6.8 编程式路由导航",id:"68-编程式路由导航",depth:2},{text:"6.9 缓存路由组件",id:"69-缓存路由组件",depth:2},{text:"6.10 两个新的生命周期钩子",id:"610-两个新的生命周期钩子",depth:2},{text:"6.11 路由守卫",id:"611-路由守卫",depth:2},{text:"6.12 路由器的两种工作模式",id:"612-路由器的两种工作模式",depth:2},{text:"7.1 移动端",id:"71-移动端",depth:2},{text:"7.2 PC端",id:"72-pc端",depth:2},{text:"①组件通信--父传子",id:"组件通信--父传子",depth:2},{text:"②组件通信--子传父",id:"组件通信--子传父",depth:2},{text:"③组件通信--兄弟通信",id:"组件通信--兄弟通信",depth:2},{text:"④函数中用了一个data中没有声明过的变量",id:"函数中用了一个data中没有声明过的变量",depth:2},{text:"⑤生命周期钩子",id:"生命周期钩子",depth:2},{text:"⑥ 其他相关知识",id:"-其他相关知识",depth:2}],title:"附：零零散散小知识",frontmatter:{}}}}]);