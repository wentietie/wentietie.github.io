"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["9138"],{27906:function(n,e,s){s.r(e),s.d(e,{default:function(){return c}});var r=s(85893),d=s(50065);function t(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",p:"p",code:"code",pre:"pre",ol:"ol",li:"li"},(0,d.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"xmlhttprequestfetch和axios",children:["XMLHttpRequest,fetch和axios",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#xmlhttprequestfetch和axios",children:"#"})]}),"\n",(0,r.jsxs)(e.h2,{id:"xmlhttprequest",children:["XMLHttpRequest",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#xmlhttprequest",children:"#"})]}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"属性或方法"}),"\n",(0,r.jsx)(e.th,{children:"说明"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"onreadystatechange"}),"\n",(0,r.jsx)(e.td,{children:"方法，当readyState属性发生变化时触发"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"readyState"}),"\n",(0,r.jsx)(e.td,{children:"一个短整型数字，代表请求的状态码"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"response"}),"\n",(0,r.jsx)(e.td,{children:"返回响应体"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"responseText"}),"\n",(0,r.jsx)(e.td,{children:"返回DOMString，是一个响应文本，包含请求的响应。失败时是null"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"responseType"}),"\n",(0,r.jsx)(e.td,{children:"响应的类型"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"status"}),"\n",(0,r.jsx)(e.td,{children:"代表响应的状态，即浏览器状态码"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"statusText"}),"\n",(0,r.jsx)(e.td,{children:"响应状态文本"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"timeout"}),"\n",(0,r.jsx)(e.td,{children:"请求的最大请求时间"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"upload"}),"\n",(0,r.jsx)(e.td,{children:"代表上传进度"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"abort"}),"\n",(0,r.jsx)(e.td,{children:"方法，用于中止请求"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"open"}),"\n",(0,r.jsx)(e.td,{children:"方法，初始化请求。只能在js代码中使用，如果在native code中初始化，请使用openRequest（）"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"send"}),"\n",(0,r.jsx)(e.td,{children:"方法，发送请求"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"setRequestHeader"}),"\n",(0,r.jsx)(e.td,{children:"方法，设置请求头，必须在open和send之间进行设置"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{}),"\n",(0,r.jsx)(e.td,{}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"readyState说明"}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"值"}),"\n",(0,r.jsx)(e.th,{children:"状态"}),"\n",(0,r.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"0"})}),"\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"UNSENT"})}),"\n",(0,r.jsx)(e.td,{children:"代理被创建，但尚未调用 open() 方法。"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"1"})}),"\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"OPENED"})}),"\n",(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:"open()"})," 方法已经被调用。"]}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"2"})}),"\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"HEADERS_RECEIVED"})}),"\n",(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:"send()"})," 方法已经被调用，并且头部和状态已经可获得。"]}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"3"})}),"\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"LOADING"})}),"\n",(0,r.jsxs)(e.td,{children:["下载中； ",(0,r.jsx)(e.code,{children:"responseText"})," 属性已经包含部分数据。"]}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"4"})}),"\n",(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"DONE"})}),"\n",(0,r.jsx)(e.td,{children:"下载操作已完成。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"实现一个简单的ajax"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"function (config: {\r\n           	url: '',\r\n           	method: 'get',\r\n           	data: {},\r\n    		success,\r\n            fail\r\n           }) {\r\n    const xhr = new XMLHttpRequest()\r\n	xhr.open(method, url, true);\r\n    xhr.onreadystatechange = function() {\r\n        if(xhr.readyState === 4){\r\n            if(xhr.status === 200){\r\n               success(xhr.responseText)\r\n            }else{\r\n                fail(xhr.responseText)\r\n            }\r\n        }\r\n    }\r\n    xhr.send()\r\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"实现一个简单的fetch"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"function\r\n\n"})}),"\n",(0,r.jsx)(e.p,{children:"从url到页面渲染的全过程"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"DNS域名接续"}),"\n",(0,r.jsx)(e.p,{children:"DNS服务器解析域名，获取ip地址"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"三次握手"}),"\n",(0,r.jsx)(e.p,{children:"进行tcp连接"}),"\n",(0,r.jsx)(e.p,{children:"第一次：客户端给服务端发送一个SYN报文，并指定初始化序列号。服务端收到时会得到客户端的发送能力和服务端的接受能力正常的结论"}),"\n",(0,r.jsx)(e.p,{children:"第二次：服务端收到报文后回应答一个报文给客户端。客户端收到后，会得到服务端的发送能力，接受能力 客户端的接受能力正常。"}),"\n",(0,r.jsx)(e.p,{children:"第三次：客户端再次发送一个报文。服务端收到后确认客户端的接受能力正常"}),"\n",(0,r.jsx)(e.p,{children:"三次握手目的：确认客户端和服务端确认对方的发送和接受能力是否正常"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"浏览器发送http请求"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"服务器处理http请求"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"浏览器解析并渲染界面"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"解析html，构建DOM树"}),"\n",(0,r.jsx)(e.li,{children:"解析css，生成css规则树"}),"\n",(0,r.jsx)(e.li,{children:"合并DOM树和CSS规则，生成render树"}),"\n",(0,r.jsx)(e.li,{children:"布局render树，进行各元素的尺寸位置的计算"}),"\n",(0,r.jsx)(e.li,{children:"回值render树，回值页面像素信息"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"断开连接 4次挥手"}),"\n"]}),"\n"]})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(t,{...n})}):t(n)}let c=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["notes%2Fbrowser%2Fxmlhttprequest.md"]={toc:[{text:"XMLHttpRequest",id:"xmlhttprequest",depth:2}],title:"XMLHttpRequest,fetch和axios",frontmatter:{}}}}]);