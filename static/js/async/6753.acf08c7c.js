"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["6753"],{93560:function(e,n,r){r.r(n),r.d(n,{default:function(){return a}});var h=r(85893),i=r(50065);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ol:"ol",li:"li",h2:"h2",h3:"h3",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)(n.h1,{id:"单例模式",children:["单例模式",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单例模式",children:"#"})]}),"\n",(0,h.jsxs)(n.p,{children:[(0,h.jsx)(n.strong,{children:"核心思想"}),"："]}),"\n",(0,h.jsx)(n.p,{children:"一个类只有一个实例，并提供一个访问他的全局访问接口。"}),"\n",(0,h.jsx)(n.p,{children:(0,h.jsx)(n.strong,{children:"注意："})}),"\n",(0,h.jsxs)(n.ol,{children:["\n",(0,h.jsx)(n.li,{children:"单例类只能有一个实例。"}),"\n",(0,h.jsx)(n.li,{children:"单例类必须自己创建自己的唯一实例。"}),"\n",(0,h.jsx)(n.li,{children:"单例类必须给所有其他对象提供这一实例。"}),"\n"]}),"\n",(0,h.jsxs)(n.h2,{id:"介绍",children:["介绍",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"单例模式（Singleton Pattern）是\r\n最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供了一个全局访问点来访问该实例。"}),"\n",(0,h.jsxs)(n.h3,{id:"意图",children:["意图：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#意图",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"保证一个类仅有一个实例，并提供一个访问它的全局访问点。"}),"\n",(0,h.jsxs)(n.h3,{id:"主要解决",children:["主要解决：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#主要解决",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"一个全局使用的类频繁地创建与销毁。"}),"\n",(0,h.jsxs)(n.h3,{id:"何时使用",children:["何时使用：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#何时使用",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"当您想控制实例数目，节省系统资源的时候。"}),"\n",(0,h.jsxs)(n.h3,{id:"如何解决",children:["如何解决：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何解决",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"判断系统是否已经有这个单例，如果有则返回，如果没有则创建。"}),"\n",(0,h.jsxs)(n.h3,{id:"关键代码",children:["关键代码：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关键代码",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"构造函数是私有的。"}),"\n",(0,h.jsxs)(n.h3,{id:"应用实例",children:["应用实例：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#应用实例",children:"#"})]}),"\n",(0,h.jsxs)(n.ol,{children:["\n",(0,h.jsx)(n.li,{children:"一个班级只有一个班主任。"}),"\n",(0,h.jsx)(n.li,{children:"Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。"}),"\n",(0,h.jsx)(n.li,{children:"一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。"}),"\n"]}),"\n",(0,h.jsxs)(n.h3,{id:"优点",children:["优点：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#优点",children:"#"})]}),"\n",(0,h.jsxs)(n.ol,{children:["\n",(0,h.jsx)(n.li,{children:"在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。"}),"\n",(0,h.jsx)(n.li,{children:"避免对资源的多重占用（比如写文件操作）。"}),"\n"]}),"\n",(0,h.jsxs)(n.h3,{id:"缺点",children:["缺点：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#缺点",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。"}),"\n",(0,h.jsxs)(n.h3,{id:"使用场景",children:["使用场景：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用场景",children:"#"})]}),"\n",(0,h.jsxs)(n.ol,{children:["\n",(0,h.jsx)(n.li,{children:"要求生产唯一序列号。"}),"\n",(0,h.jsx)(n.li,{children:"WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。"}),"\n",(0,h.jsx)(n.li,{children:"创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。"}),"\n"]}),"\n",(0,h.jsxs)(n.h3,{id:"注意事项",children:["注意事项：",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。"}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-js",children:"class Singleton {\r\n    constructor() {\r\n        this._instance = null\r\n    }\r\n\r\n    static getInstance() {\r\n        if (this._instance) {\r\n            return this._instance\r\n        }\r\n    }\r\n}\n"})})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,h.jsx)(n,{...e,children:(0,h.jsx)(d,{...e})}):d(e)}let a=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["JavaScript%2Fdesign%2Fpart1.md"]={toc:[{text:"介绍",id:"介绍",depth:2},{text:"意图：",id:"意图",depth:3},{text:"主要解决：",id:"主要解决",depth:3},{text:"何时使用：",id:"何时使用",depth:3},{text:"如何解决：",id:"如何解决",depth:3},{text:"关键代码：",id:"关键代码",depth:3},{text:"应用实例：",id:"应用实例",depth:3},{text:"优点：",id:"优点",depth:3},{text:"缺点：",id:"缺点",depth:3},{text:"使用场景：",id:"使用场景",depth:3},{text:"注意事项：",id:"注意事项",depth:3}],title:"单例模式",frontmatter:{}}}}]);