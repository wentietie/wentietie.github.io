"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["7424"],{29598:function(n,e,l){l.r(e),l.d(e,{default:()=>t});var c=l("85893"),i=l("50065");let r=l.p+"static/image/07_img.6a8ded2c.png";function s(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",ul:"ul",li:"li",img:"img"},(0,i.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"7-异常处理",children:["7 异常处理",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7-异常处理",children:"#"})]}),"\n",(0,c.jsxs)(e.h2,{id:"71-概述",children:["7.1 概述",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#71-概述",children:"#"})]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"异常分类"}),"\n"]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["Error","：Java虚拟机无法解决的严重问题。如JVM系统内部错误、资源耗尽（如StackOverflowError栈溢出、OOM堆溢出）等严重情况。一般不编写针对性的代码进行处理。"]}),"\n",(0,c.jsxs)(e.li,{children:["Exception","：其它因编程错误或偶然意外的外在因素导致的一般性问题，可以使用针对性的代码进行处理，如：空指针访问、试图读取不存在的文件、网络连接中断、数组下标越界","\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["分类","\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"编译时异常"}),"\n",(0,c.jsx)(e.li,{children:"运行时异常"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"异常的体系结构"}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"java.lang.Throwable"}),"\n",(0,c.jsx)(e.p,{children:"​		|------ java.lang.Error：一般不编写针对性的代码处理"}),"\n",(0,c.jsx)(e.p,{children:"​		|------ java.lang.Exception：可以进行异常的处理"}),"\n",(0,c.jsx)(e.p,{children:"​				|------ 编译时异常（checked）"}),"\n",(0,c.jsx)(e.p,{children:"​							|------ IOException"}),"\n",(0,c.jsx)(e.p,{children:"​									|------ FileNotFoundException"}),"\n",(0,c.jsx)(e.p,{children:"​							|------ ClassNotFoundException"}),"\n",(0,c.jsx)(e.p,{children:"​				|------ 运行时异常（unchecked，RuntimeException）"}),"\n",(0,c.jsx)(e.p,{children:"​							|------ NullPointerException"}),"\n",(0,c.jsx)(e.p,{children:"​							|------ ArrayIndexOutOfBoundsException"}),"\n",(0,c.jsx)(e.p,{children:"​							|------ ClassCastException"}),"\n",(0,c.jsx)(e.p,{children:"​							|------ NumberFormatException"}),"\n",(0,c.jsx)(e.p,{children:"​							|------ InputMismatchException"}),"\n",(0,c.jsx)(e.p,{children:"​							..."}),"\n",(0,c.jsxs)(e.h2,{id:"72-异常处理",children:["7.2 异常处理",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#72-异常处理",children:"#"})]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"异常处理方式"}),"\n"]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"try-catch-finally"}),"\n",(0,c.jsx)(e.li,{children:"throws + 异常类型"}),"\n"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"try-catch-finally使用注意事项"}),"\n"]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"当catch捕获多个异常时，如果这些异常之间没有子父类关系，谁在上谁在下都可以。但是如果有子父类关系，子类在前父类在后"}),"\n",(0,c.jsx)(e.li,{children:"try-catch-finally处理编译时异常，使得程序在编译时不再报错，但是运行时仍可能报错"}),"\n",(0,c.jsx)(e.li,{children:"finally中声明的是一定会被执行的语句。即使catch中又出现异常了，或者是try和catch中有return语句等情况"}),"\n",(0,c.jsx)(e.li,{children:"如果try、catch、finally中都有return，最终返回的是finally中的内容"}),"\n"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"开发中如何选择使用try-catch-finally还是使用throws？"}),"\n"]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"如果父类中被重写的方法中没有使用throws的方式处理异常，那么子类重写的方法也不能使用throws，也就是说，如果子类重写的方法有异常，只能使用try-catch-finally的方式处理"}),"\n",(0,c.jsx)(e.li,{children:"执行的方法a中，先后又调用了另外几个方法，这几个方法是递进关系执行的。建议使用throws的方式进行处理a中调用的方法，执行的a方法则可以考虑使用try-catch-finally方式进行处理"}),"\n"]})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(s,{...n})}):s(n)}let t=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["tang%2Fjava2%2F07_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md"]={toc:[{text:"7.1 概述",id:"71-概述",depth:2},{text:"7.2 异常处理",id:"72-异常处理",depth:2}],title:"7 异常处理",frontmatter:{}}}}]);