"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["2881"],{99251:function(r,e,n){n.r(e),n.d(e,{default:function(){return s}});var a=n(85893),t=n(50065);function i(r){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",pre:"pre",code:"code",ul:"ul",li:"li",div:"div"},(0,t.ah)(),r.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"字符串的新增方法",children:["字符串的新增方法",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串的新增方法",children:"#"})]}),"\n",(0,a.jsxs)(e.h2,{id:"stringfromcodepoint",children:["String.fromCodePoint()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#stringfromcodepoint",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于0xFFFF的字符。ES6 提供了String.fromCodePoint()方法，可以识别大于0xFFFF的字符，弥补了String.fromCharCode()方法的不足。在作用上，正好与之后的codePointAt()方法相反。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"String.fromCodePoint(0x20BB7)\r\n// \"\uD842\uDFB7\"\r\nString.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\uD83D\uDE80y'\r\n// true\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"stringraw",children:["String.raw()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#stringraw",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"ES6 还为原生的 String 对象，提供了一个raw()方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。"}),"\n",(0,a.jsxs)(e.h2,{id:"codepointat",children:["codePointAt()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#codepointat",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。\r\nES6 提供了codePointAt()方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点"}),"\n",(0,a.jsxs)(e.h2,{id:"normalize",children:["normalize()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#normalize",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如Ǒ（\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如O（\\u004F）和ˇ（\\u030C）合成Ǒ（\\u004F\\u030C）。"}),"\n",(0,a.jsx)(e.p,{children:"这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。\r\nES6 提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。"}),"\n",(0,a.jsxs)(e.h2,{id:"includes-startswith-endswith",children:["includes(), startsWith(), endsWith()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#includes-startswith-endswith",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"includes()：返回布尔值，表示是否找到了参数字符串。"}),"\n",(0,a.jsx)(e.li,{children:"startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。"}),"\n",(0,a.jsx)(e.li,{children:"endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"let s = 'Hello world!';\r\ns.startsWith('Hello') // true\r\ns.endsWith('!') // true\r\ns.includes('o') // true\r\n\r\n//这三个方法都支持第二个参数，表示开始搜索的位置。\r\n\r\n\r\ns.startsWith('world', 6) // true\r\ns.endsWith('Hello', 5) // true\r\ns.includes('Hello', 6) // false\n"})}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。"})})]}),"\n",(0,a.jsxs)(e.h2,{id:"repeat",children:["repeat()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#repeat",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"repeat方法返回一个新字符串，表示将原字符串重复n次。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"'x'.repeat(3) // \"xxx\"\r\n'hello'.repeat(2) // \"hellohello\"\r\n'na'.repeat(0) // \"\"\r\n\r\n//参数如果是小数，会被取整。\r\n'na'.repeat(2.9) // \"nana\"\r\n\r\n//如果repeat的参数是负数或者Infinity，会报错\r\n'na'.repeat(Infinity)\r\n// RangeError\r\n'na'.repeat(-1)\r\n// RangeError\r\n\r\n//如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。\r\n\r\n//参数NaN等同于 0。\r\n'na'.repeat(NaN) // \"\"\r\n\r\n// 如果repeat的参数是字符串，则会先转换成数字。\r\n'na'.repeat('na') // \"\"\r\n'na'.repeat('3') // \"nanana\"\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"padstartpadend",children:["padStart()，padEnd()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#padstartpadend",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"'x'.padStart(5, 'ab') // 'ababx'\r\n'x'.padStart(4, 'ab') // 'abax'\r\n'x'.padEnd(5, 'ab') // 'xabab'\r\n'x'.padEnd(4, 'ab') // 'xaba'\r\n\r\n//如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。\r\n'xxx'.padStart(2, 'ab') // 'xxx'\r\n'xxx'.padEnd(2, 'ab') // 'xxx'\r\n\r\n\r\n// 如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。\r\n'abc'.padStart(10, '0123456789')\r\n// '0123456abc'\r\n\r\n//如果省略第二个参数，默认使用空格补全长度。\r\n'x'.padStart(4) // '   x'\r\n'x'.padEnd(4) // 'x  \n"})}),"\n",(0,a.jsxs)(e.h2,{id:"trimstarttrimend",children:["trimStart()，trimEnd()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#trimstarttrimend",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。它们的行为与trim()一致，trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:'const s = \'  abc  \';\r\ns.trim() // "abc"\r\ns.trimStart() // "abc  "\r\ns.trimEnd() // "  abc"\n'})}),"\n",(0,a.jsx)(e.p,{children:"浏览器还部署了额外的两个方法，trimLeft()是trimStart()的别名，trimRight()是trimEnd()的别名。"}),"\n",(0,a.jsxs)(e.h2,{id:"matchall",children:["matchAll()",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#matchall",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"matchAll()方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。"})]})}function d(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),r.components);return e?(0,a.jsx)(e,{...r,children:(0,a.jsx)(i,{...r})}):i(r)}let s=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["JavaScript%2Fes6%2Fes6-4.md"]={toc:[{text:"String.fromCodePoint()",id:"stringfromcodepoint",depth:2},{text:"String.raw()",id:"stringraw",depth:2},{text:"codePointAt()",id:"codepointat",depth:2},{text:"normalize()",id:"normalize",depth:2},{text:"includes(), startsWith(), endsWith()",id:"includes-startswith-endswith",depth:2},{text:"repeat()",id:"repeat",depth:2},{text:"padStart()，padEnd()",id:"padstartpadend",depth:2},{text:"trimStart()，trimEnd()",id:"trimstarttrimend",depth:2},{text:"matchAll()",id:"matchall",depth:2}],title:"字符串的新增方法",frontmatter:{}}}}]);