"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["5747"],{12391:function(n,e,r){r.r(e),r.d(e,{default:function(){return c}});var s=r(85893),l=r(50065);function a(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",ul:"ul",li:"li",code:"code",strong:"strong",pre:"pre",h3:"h3"},(0,l.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"15-java反射机制",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#15-java反射机制",children:"#"}),"15 Java反射机制"]}),"\n",(0,s.jsxs)(e.h2,{id:"151-java反射机制概述",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#151-java反射机制概述",children:"#"}),"15.1 Java反射机制概述"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"Reflection--反射"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["Reflection（反射）是被视为","动态语言","的关键，反射机制允许程序在执行期间借助于Reflection API获取任何类的内部信息，并能直接操作任意对象的内部属性及方法"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["加载完类之后，在堆内存的方法区就产生了一个Class类型的对象（一个类只能有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。","这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"类加载的方式"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["正常方式：",(0,s.jsx)(e.code,{children:"引入需要的“包类”名称"})," ---\x3e ",(0,s.jsx)(e.code,{children:"通过new实例化"})," ---\x3e ",(0,s.jsx)(e.code,{children:"取得实例化对象"})]}),"\n",(0,s.jsxs)(e.li,{children:["反射方式：",(0,s.jsx)(e.code,{children:"实例化对象"})," ---\x3e ",(0,s.jsx)(e.code,{children:"getClass()方法"})," ---\x3e ",(0,s.jsx)(e.code,{children:"得到完整的“包类”名称"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"反射的特征"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"动态性"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"静态语言 VS 动态语言"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["动态语言","：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["定义：是一类在运行时可以改变其结构的语言，例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或者是其他结构上的变化。通俗来说就是","在运行时代码可以根据某些条件改变自身结构","。"]}),"\n",(0,s.jsx)(e.li,{children:"举例：Object-C、C#、JavaScript、PHP、Python、Erlang"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["静态语言","：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["定义：","运行时结构不可变的语言"]}),"\n",(0,s.jsx)(e.li,{children:"举例：Java、C、C++"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["Java不是动态语言，但是Java可以称为准动态语","。即Java有一定的动态性，我们",(0,s.jsx)(e.strong,{children:"可以利用反射机制、字节码操作获得类似动态语言的特性"}),"。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"Java反射机制提供的功能"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"在运行时判断任意一个对象所属的类"}),"\n",(0,s.jsx)(e.li,{children:"在运行时构造任意一个类的对象"}),"\n",(0,s.jsx)(e.li,{children:"在运行时判断任意一个类所具有的成员变量和方法"}),"\n",(0,s.jsx)(e.li,{children:"在运行时获取泛型信息"}),"\n",(0,s.jsx)(e.li,{children:"在运行时调用任意一个对象的成员变量和方法"}),"\n",(0,s.jsx)(e.li,{children:"在运行时处理注解"}),"\n",(0,s.jsx)(e.li,{children:"生成动态代理"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"反射相关的主要API"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"java.lang.Class"}),"：代表一个类。用来表示一个通用的类，是一个用来描述类的类"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"java.lang.reflect.Method"}),"：代表类的方法"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"java.lang.reflect.Field"}),"：代表类的成员变量"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"java.lang.reflect.Constructor"}),"：代表类的构造器"]}),"\n",(0,s.jsx)(e.li,{children:"..."}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"疑问1：通过直接new的方式或反射的方式都可以调用公共结构，开发中到底使用哪个？"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"建议使用new的方式，但是不排除使用反射的方式"}),"\n",(0,s.jsx)(e.li,{children:"反射方式使用场景：当编译时不确定new哪个类的对象时"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"疑问2：反射机制与面向对象中的封装性是不是矛盾？如何看待这两个技术？"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"（封装性是私有的外部不能访问，反射是可以访问私有的属性和方法）"}),"\n","\n",(0,s.jsx)(e.p,{children:"封装性中私有的属性和方法等，外部不能访问，是指的没必要去访问，但是如果一定要访问的话，也是可以访问的。如果非要访问的话，就得使用反射技术了。"}),"\n",(0,s.jsxs)(e.h2,{id:"152-javalangclass",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#152-javalangclass",children:"#"}),"15.2 java.lang.Class"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"java.lang.Class类的理解与获取"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"类的加载过程："}),"\n",(0,s.jsxs)(e.p,{children:["程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾），接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。\r\n将字节码文件加载到内存中（或者说使用java.exe命令对字节码文件进行解释运行）的过程就称为","类的加载","。",(0,s.jsxs)(e.strong,{children:["加载到内存中的类，就称为","运行时类","，此运行时类，就作为Class的一个实例。"]})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"换句话说："}),"\n",(0,s.jsx)(e.p,{children:"Class的实例就对应着一个运行时类"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"加载到内存中的运行时类，会缓存一定的时间。在此时间内，可以通过不同的方式来获取此运行时类"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"获取Class实例的方式"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"通过运行时类的属性：类.class"}),"\n",(0,s.jsx)(e.li,{children:"通过运行时类的对象，调用getClass()"}),"\n",(0,s.jsx)(e.li,{children:"调用Class的静态方法：forName(String className)。其中className是类的完整的“包类”名"}),"\n",(0,s.jsx)(e.li,{children:"使用类的加载器：ClassLoader"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"获取Class实例方式的例子"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'/**\r\n * 获取Class的实例的方式\r\n */\r\n@Test\r\npublic void test() throws ClassNotFoundException {\r\n    // 方式1：通过运行时类的属性：类.class\r\n    Class<Person> clazz1 = Person.class;\r\n    System.out.println(clazz1);\r\n\r\n    // 方式2：通过运行时类的对象，调用getClass()\r\n    Person p1 = new Person();\r\n    Class clazz2 = p1.getClass();\r\n    System.out.println(clazz2);\r\n\r\n    // 方式3：调用Class的静态方法：forName(String className)。其中className是类的完整的“包类”名\r\n    Class<?> clazz3 = Class.forName("com.tth.learn.java.Person");\r\n    System.out.println(clazz3);\r\n\r\n    // 方式4：使用类的加载器：ClassLoader\r\n    ClassLoader classLoader = ReflectTest.class.getClassLoader();\r\n    Class<?> clazz4 = classLoader.loadClass("com.tth.learn.java.Person");\r\n    System.out.println(clazz4);\r\n\r\n    // 验证在一定时间内，获取的同一个类的运行时类，是同一个Class实例\r\n    System.out.println(clazz1 == clazz2); // true\r\n    System.out.println(clazz1 == clazz3); // true\r\n    System.out.println(clazz1 == clazz4); // true\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"哪些类型可以有Class对象？"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"class：外部类、成员（成员内部类。静态内部类），局部内部类，匿名内部类"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"interface：接口"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"[]：数组"}),"\n","\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:"@Test\r\npublic void test2() {\r\n    int[] arr1 = new int[10];\r\n    int[] arr2 = new int[100];\r\n    System.out.println(arr1.getClass() == arr2.getClass()); // true\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"enum：枚举"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"annotation：注解@interface"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"primitive type：基本数据类型"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"void"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"类的加载过程"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"当程序主动使用某个类时，如果该类还未被加载到内存中，系统会经过如下三个步骤对该类进行初始化："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["类的加载","：将class文件字节码内容加载到内存中，并将这些静态数据转成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器的参与。"]}),"\n",(0,s.jsxs)(e.li,{children:["{类的链接","：将java类的二进制字节码合并到JVM的运行过程中的过程。","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"验证：确保加载的类信息符合JVM规范。如：以cafe开头，没有安全方面的内容"}),"\n",(0,s.jsxs)(e.li,{children:["准备：正式为类的static变量分配内存并","设置类变量默认初始值","，这些内存都将在方法区中进行分配"]}),"\n",(0,s.jsx)(e.li,{children:"解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["类的初始化","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["执行","类构造器",(0,s.jsx)(e.code,{children:"<clinit>()"}),"方法的过程。执行","类构造器",(0,s.jsx)(e.code,{children:"<clinit>"}),"()是由编译期自动收集类中所有类变量的复制动作和静态代码块中的语句合并产生的","。（类构造器是构造类信息的，不是构造该类对象的构造器）"]}),"\n",(0,s.jsx)(e.li,{children:"当初始化一个类的时候，如果返现其父类还没初始化，则需要先触发其父类的初始化"}),"\n",(0,s.jsxs)(e.li,{children:["虚拟机会保证一个类的",(0,s.jsx)(e.code,{children:"<clinit>()"}),"在多线程环境中被正确加锁和同步"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"类加载器的作用"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["类加载器的作用：将class文件字节码内容加载到内存中，并将这些静态数据执行","转换成方法区的运行时数据结构","，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"JVM规范中定义了如下类型的类的加载器："}),"\n",(0,s.jsxs)(e.p,{children:["以下几个类加载器的加载原则：执行","自底向上检查是否已装载，自顶向下尝试加载类","。"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Bootstrap Classloader"}),"：执行","引导类加载器","。C++编写的，是JVM自带的类加载器，执行","负责Java平台的核心库","，用来装载核心类库。该加载器无法直接获取，自然也无法让Bootstrap Classloader加载自己定义的类。"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Extension Classloader"}),"：执行","扩展类加载器","。负责执行","jre/lib/ext目录下的jar包或者-D java.ext.dirs 指定目录下的jar包","装入工作库"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"System Classloader"}),"：执行","系统类加载器","。负责执行","java -classpath或者-D java.class.path 指定目录下的类与jar包","装入工作库，自定义的类也是通过System Classloader加载的"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"自定义类加载器"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"获取类的加载器"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:"@Test\r\npublic void test1() {\r\n    // 获取当前类的类加载器：对于自定义类，使用系统类加载器进行加载。\r\n    ClassLoader classLoader = ClassloaderTest.class.getClassLoader();\r\n    System.out.println(classLoader); // sun.misc.Launcher$AppClassLoader@18b4aac2（AppClassLoader是一个系统类加载器）\r\n\r\n    // 调用系统类加载器的getParent()：获取到的是扩展类加载器\r\n    ClassLoader classLoaderParent = classLoader.getParent();\r\n    System.out.println(classLoaderParent); // sun.misc.Launcher$ExtClassLoader@54bedef2\r\n\r\n    // 调用扩展类加载器的getParent()：无法获取引导类加载器\r\n    // 引导类加载器主要负责加载java核心类库，无法加载自定义类\r\n    ClassLoader classLoaderParentParent = classLoaderParent.getParent();\r\n    System.out.println(classLoaderParentParent); // null\r\n\r\n    // String是java的一个核心类库，是由引导类加载器加载的\r\n    ClassLoader classLoader1 = String.class.getClassLoader();\r\n    System.out.println(classLoader1); // null\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"使用FileInputStream和类加载器读取配置文件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void test2() throws IOException {\r\n    Properties pros = new Properties();\r\n    // 读取配置文件方式1：创建输入流，读取jdbc.properties。该文件是在当前module下\r\n    //        FileInputStream fis = new FileInputStream("jdbc.properties");\r\n    //        pros.load(fis);\r\n\r\n    // 读取配置文件方式2：使用Classloader。配置文件jdbc1.properties在当前module的src下\r\n    ClassLoader classLoader = ClassloaderTest.class.getClassLoader();\r\n    InputStream is = classLoader.getResourceAsStream("jdbc1.properties");\r\n    System.out.println(null == is);\r\n    pros.load(is);\r\n\r\n    String user = pros.getProperty("user");\r\n    String password = pros.getProperty("password");\r\n    System.out.println("user="+user+", password="+password);\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"153-创建运行时类的对象",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#153-创建运行时类的对象",children:"#"}),"15.3 创建运行时类的对象"]}),"\n",(0,s.jsxs)(e.h3,{id:"1531-class-newinstance的使用",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1531-class-newinstance的使用",children:"#"}),"15.3.1 Class newInstance()的使用"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"作用：创建对应的运行时类。内部调用了运行时类的空参构造器"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"使用newInstance()的要求："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"运行时类必须有空参构造器，否则会报InstantiationException异常"}),"\n",(0,s.jsx)(e.li,{children:"空参构造器的访问权限得够。可以为缺省、protected、public，通常设置为public。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"扩展：在JavaBean中要求提供一个public的空参构造器，原因："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"便于通过反射，创建运行时类的对象"}),"\n",(0,s.jsx)(e.li,{children:"便于子类继承此运行时类，默认调用super()时，保证父类有此构造器"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"举例："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:"@Test\r\npublic void test1() throws IllegalAccessException, InstantiationException {\r\n    Class<Person> clazz = Person.class;\r\n    Person person = clazz.newInstance();\r\n    System.out.println(person);\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"1532-体会反射的动态性",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1532-体会反射的动态性",children:"#"}),"15.3.2 体会反射的动态性"]}),"\n",(0,s.jsxs)(e.p,{children:["Reflection（反射）是被视为","动态语言","的关键，动态语言就是在","运行时","代码可以根据某些条件改变自身结构"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码中，在编译阶段是无法确定创建哪个对象的。只有在运行时获取到num的数值之后，才能确定创建的到底是哪个对象。这就提现了反射的动态性。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'/**\r\n * 体会反射的动态性\r\n */\r\n@Test\r\npublic void test2() {\r\n    for (int i = 0; i < 100; i++) {\r\n        int num = new Random().nextInt(3);// 随机生成0、1、2\r\n        String classpath = "";\r\n        switch (num) {\r\n            case 0:\r\n                classpath = "java.util.Date";\r\n                break;\r\n            case 1:\r\n                classpath = "java.lang.Object";\r\n                break;\r\n            case 2:\r\n                classpath = "com.tth.learn.java.Person";\r\n                break;\r\n        }\r\n\r\n        try {\r\n            Object obj = getInstance(classpath);\r\n            System.out.println(obj);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 获取类对象\r\n * @param classpath 类的完整类名\r\n * @return\r\n * @throws Exception\r\n */\r\nprivate Object getInstance(String classpath) throws Exception{\r\n    Class<?> clazz = Class.forName(classpath);\r\n    return clazz.newInstance();\r\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"154-获取运行时类的完整结构",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#154-获取运行时类的完整结构",children:"#"}),"15.4 获取运行时类的完整结构"]}),"\n",(0,s.jsxs)(e.h3,{id:"1541-获取运行时类的属性结构",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1541-获取运行时类的属性结构",children:"#"}),"15.4.1 获取运行时类的属性结构"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Field[] getFields()"}),"：获取当前运行时类及其父类中public修饰的属性"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Field[] getDeclaredFields()"}),"：获取当前运行时类中声明的所有属性，不包含父类中声明的属性"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void test1() {\r\n    Class<Person> clazz = Person.class;\r\n\r\n    // 获取属性结构\r\n    // getFields()：获取当前运行时类及其父类中public修饰的属性\r\n    Field[] fields = clazz.getFields();\r\n    for (Field f: fields) {\r\n        System.out.println(f);\r\n    }\r\n\r\n    System.out.println("*****************");\r\n    // getDeclaredFields()：获取当前运行时类中声明的所有属性，不包含父类中声明的属性\r\n    Field[] declaredFields = clazz.getDeclaredFields();\r\n    for (Field f: declaredFields) {\r\n        System.out.println(f);\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"扩展：获取属性的权限修饰符、数据类型、属性名称"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void test2() {\r\n    Class<Person> clazz = Person.class;\r\n    Field[] declaredFields = clazz.getDeclaredFields();\r\n    for (Field f: declaredFields) {\r\n        // 获取属性的权限修饰符\r\n        int modifiers = f.getModifiers();\r\n        System.out.print(Modifier.toString(modifiers) + "\\t");\r\n\r\n        // 获取属性的数据类型\r\n        Class<?> type = f.getType();\r\n        System.out.print(type.getName() + "\\t");\r\n\r\n        // 获取属性名\r\n        String name = f.getName();\r\n        System.out.println(name);\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1542-获取运行时类的方法结构",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1542-获取运行时类的方法结构",children:"#"}),"15.4.2 获取运行时类的方法结构"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getMethods()"}),"：获取当前运行时类及其父类中public修饰的方法"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getDeclaredMethods()"}),"：获取当前运行时类中声明的所有方法，不包含父类中的方法"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void test1() {\r\n    Class<Person> clazz = Person.class;\r\n    // getMethods()：获取当前运行时类及其父类中public修饰的方法\r\n    Method[] methods = clazz.getMethods();\r\n    for (Method m: methods) {\r\n        System.out.println(m);\r\n    }\r\n\r\n    System.out.println("********************");\r\n\r\n    // getDeclaredMethods()：获取当前运行时类中声明的所有方法，不包含父类中的方法\r\n    Method[] declaredMethods = clazz.getDeclaredMethods();\r\n    for (Method m: declaredMethods) {\r\n        System.out.println(m);\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"扩展：获取方法声明的注解、权限修饰符、返回值类型、形参列表、抛出的异常"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void test2() {\r\n    Class<Person> clazz = Person.class;\r\n    Method[] declaredMethods = clazz.getDeclaredMethods();\r\n\r\n    for (Method m: declaredMethods) {\r\n        // 获取方法声明的注解\r\n        Annotation[] annotations = m.getAnnotations();\r\n        for (Annotation a: annotations) {\r\n            System.out.print(a + "\\t");\r\n        }\r\n\r\n        // 获取方法的权限修饰符\r\n        int modifiers = m.getModifiers();\r\n        System.out.print(Modifier.toString(modifiers)+ "\\t");\r\n\r\n        // 获取方法的返回值类型\r\n        Class<?> returnType = m.getReturnType();\r\n        System.out.print(returnType + "\\t");\r\n\r\n        // 获取方法名\r\n        String name = m.getName();\r\n        System.out.print(name);\r\n        System.out.print("(");\r\n\r\n        // 获取形参列表\r\n        Class<?>[] parameterTypes = m.getParameterTypes();\r\n        if (parameterTypes != null && parameterTypes.length != 0) {\r\n            for (int i = 0; i < parameterTypes.length; i++) {\r\n                if (i == parameterTypes.length - 1) {\r\n                    System.out.print(parameterTypes[i].getName() + "args_" + i);\r\n                }else {\r\n                    System.out.print(parameterTypes[i].getName() + "args_" + i + ",");\r\n                }\r\n            }\r\n        }\r\n        System.out.print(")");\r\n\r\n        // 获取方法抛出的异常\r\n        Class<?>[] exceptionTypes = m.getExceptionTypes();\r\n        if (exceptionTypes != null && exceptionTypes.length != 0) {\r\n            System.out.print(" throws ");\r\n            for (int i = 0; i < exceptionTypes.length; i++) {\r\n                if (i == exceptionTypes.length - 1) {\r\n                    System.out.print(exceptionTypes[i].getName());\r\n                }else {\r\n                    System.out.print(exceptionTypes[i].getName() + ", ");\r\n                }\r\n            }\r\n        }\r\n        System.out.println();\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1543-获取当前运行时类的构造器",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1543-获取当前运行时类的构造器",children:"#"}),"15.4.3 获取当前运行时类的构造器"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getConstructors()"}),"：获取当前运行时类中声明为public的构造器，不包含父类构造器"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getDeclaredConstructors()"}),"：获取当前运行时类中的所有构造器，不包含父类构造器"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void test1() {\r\n    Class<Person> clazz = Person.class;\r\n    // getConstructors()：获取当前运行时类中声明为public的构造器，不包含父类构造器\r\n    Constructor<?>[] constructors = clazz.getConstructors();\r\n    for (Constructor c: constructors) {\r\n        System.out.println(c);\r\n    }\r\n\r\n    System.out.println("**************");\r\n\r\n    // getDeclaredConstructors()：获取当前运行时类中的所有构造器，不包含父类构造器\r\n    Constructor<?>[] declaredConstructors = clazz.getDeclaredConstructors();\r\n    for (Constructor c: declaredConstructors) {\r\n        System.out.println(c);\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1544-获取当前运行时类的父类",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1544-获取当前运行时类的父类",children:"#"}),"15.4.4 获取当前运行时类的父类"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getSuperclass()"}),"：获取当前运行时类的父类"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getGenericSuperclass()"}),"：获取当前运行时类带泛型的父类"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void test2() {\r\n    Class<Person> clazz = Person.class;\r\n    // getSuperclass()：获取当前运行时类的父类\r\n    Class<? super Person> superclass = clazz.getSuperclass();\r\n    System.out.println(superclass);\r\n\r\n    // getGenericSuperclass()：获取当前运行时类带泛型的父类\r\n    Type genericSuperclass = clazz.getGenericSuperclass();\r\n    System.out.println(genericSuperclass);\r\n    ParameterizedType paramType = (ParameterizedType) genericSuperclass;\r\n    // 获取泛型类型\r\n    Type[] actualTypeArguments = paramType.getActualTypeArguments();\r\n    for (int i = 0; i < actualTypeArguments.length; i++) {\r\n        if (i == actualTypeArguments.length - 1) {\r\n            System.out.println(actualTypeArguments[i]);\r\n        }else {\r\n            System.out.println(actualTypeArguments[i].getTypeName() + ", ");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1545-获取当前运行时类实现的接口",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1545-获取当前运行时类实现的接口",children:"#"}),"15.4.5 获取当前运行时类实现的接口"]}),"\n","\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getInterfaces()"}),"：获取当前运行时类的接口"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:"/**\r\n * 获取当前运行时类实现的接口\r\n */\r\n@Test\r\npublic void test3() {\r\n    Class<Person> clazz = Person.class;\r\n    // getInterfaces()：获取当前运行时类的接口\r\n    Class[] interfaces = clazz.getInterfaces();\r\n    for (Class c: interfaces) {\r\n        System.out.println(c);\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"1546-获取当前运行时类所在的包",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1546-获取当前运行时类所在的包",children:"#"}),"15.4.6 获取当前运行时类所在的包"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getPackage()"}),"：获取当前运行时类所在的包"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:"/**\r\n * 获取当前运行时类所在的包\r\n */\r\n@Test\r\npublic void test4() {\r\n    Class<Person> clazz = Person.class;\r\n    // getPackage()：获取当前运行时类所在的包\r\n    Package pack = clazz.getPackage();\r\n    System.out.println(pack);\r\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"1547-获取当前运行时类声明的注解",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1547-获取当前运行时类声明的注解",children:"#"}),"15.4.7 获取当前运行时类声明的注解"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getAnnotations()"}),"：获取当前运行时类声明的注解"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:"/**\r\n * 获取当前运行时类声明的注解\r\n */\r\n@Test\r\npublic void test5() {\r\n    Class<Person> clazz = Person.class;\r\n    // getAnnotations()：获取当前运行时类声明的注解\r\n    Annotation[] annotations = clazz.getAnnotations();\r\n    for (Annotation anno: annotations) {\r\n        System.out.println(anno);\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"155-调用运行时类的指定结构",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#155-调用运行时类的指定结构",children:"#"}),"15.5 调用运行时类的指定结构"]}),"\n",(0,s.jsxs)(e.h3,{id:"1551-调用运行时类的指定属性",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1551-调用运行时类的指定属性",children:"#"}),"15.5.1 调用运行时类的指定属性"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getField(String name)"}),"：获取指定属性。要求运行时类中属性声明为public。通常不采用此方法"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getDeclaredField(String name)"}),"：获取运行时类中的指定属性"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"setAccessible(boolean flag)"}),"：保证当前属性是可访问的"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"set(Object obj, Object value)"}),"：设置当前属性的值","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"obj：指明设置哪个对象的属性"}),"\n",(0,s.jsx)(e.li,{children:"value：此属性的值设置为多少"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"get(Object obj)"}),"：获取当前属性的值","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"obj 指明获取哪个对象"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void testField() throws Exception{\r\n    Class<Person> clazz = Person.class;\r\n\r\n    // 获取运行时类的对象\r\n    Person person = clazz.newInstance();\r\n	//  1.getDeclaredField(String name)：获取运行时类中的指定属性\r\n    Field name = clazz.getDeclaredField("name");\r\n    // 2.保证当前属性是可访问的\r\n    name.setAccessible(true);\r\n    // 3.设置指定对象此属性的值\r\n    name.set(person, "小米");\r\n    // 4.获取指定对象此属性的值\r\n    String str = (String) name.get(person);\r\n    System.out.println(str);\r\n    \r\n    System.out.println(person);\r\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1552-调用运行时类中指定的方法",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1552-调用运行时类中指定的方法",children:"#"}),"15.5.2 调用运行时类中指定的方法"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getDeclaredMethod(String name, Class<?>... parameterTypes)"}),"：获取运行时类的指定方法","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"name：方法名称"}),"\n",(0,s.jsx)(e.li,{children:"parameterTypes：方法的形参列表"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"setAccessible(boolean flag)"}),"：保证方法是可以访问的"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Object invoke(Object obj, Object... args)"}),"：执行方法，并获取返回值","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["obj：指明是哪个对象。当方法是静态方法时，Obj可以为",(0,s.jsx)(e.code,{children:" null"}),"，也可以为 ",(0,s.jsx)(e.code,{children:"运行时类.class"})]}),"\n",(0,s.jsx)(e.li,{children:"args ：给方法的形参赋值"}),"\n",(0,s.jsx)(e.li,{children:"返回值： invoke()的返回值即为运行时类中指定方法的返回值。如果运行时类中的方法没有返回值，invoke()的返回值为null"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void testMethod() throws Exception{\r\n    Class<Person> clazz = Person.class;\r\n\r\n    // 获取运行时类的对象\r\n    Person person = clazz.newInstance();\r\n\r\n    // 1.获取指定方法\r\n    /**\r\n     * getDeclaredMethod(String name, Class<?>... parameterTypes)：获取运行时类的指定方法\r\n     * @param name 方法名称\r\n     * @param parameterTypes 方法的形参列表\r\n     */\r\n    Method showNation = clazz.getDeclaredMethod("showNation", String.class);\r\n\r\n    // 2.保证当前方法是可访问的\r\n    showNation.setAccessible(true);\r\n\r\n    // 3.调用方法，并获取方法返回值\r\n    /**\r\n     * Object invoke(Object obj, Object... args)：执行方法，并获取返回值\r\n     * @param obj 指明是哪个对象。当方法是静态方法时，Obj可以为 null，也可以为 运行时类.class\r\n     * @param args 给方法的形参赋值\r\n     * @return invoke()的返回值即为运行时类中指定方法的返回值。如果运行时类中的方法没有返回值，invoke()的返回值为null\r\n     */\r\n    String nation = (String) showNation.invoke(person, "China");\r\n    System.out.println(nation);\r\n\r\n    System.out.println("***********************调用静态方法**********************************");\r\n    Method showDesc = clazz.getDeclaredMethod("showDesc");\r\n    showDesc.setAccessible(true);\r\n    showDesc.invoke(Person.class);\r\n    showDesc.invoke(null);\r\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1553-调用运行时类指定的构造器",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1553-调用运行时类指定的构造器",children:"#"}),"15.5.3 调用运行时类指定的构造器"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相关方法"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"getDeclaredConstructor(Class<?>... parameterTypes)"}),"：获取指定构造器"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"setAccessible(boolean flag)"}),"：保证构造器是可以访问的"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"newInstance(Object ... initargs)"}),"：调用构造器，创建运行时类对象","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"initargs：构造器形参列表"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'@Test\r\npublic void testConstructor() throws Exception{\r\n    Class<Person> clazz = Person.class;\r\n\r\n    // 1.获取指定构造器\r\n    /**\r\n     * getDeclaredConstructor(Class<?>... parameterTypes)：获取指定构造器\r\n     * @param parameterTypes：指明构造器的形参列表\r\n     */\r\n    Constructor<Person> constructor = clazz.getDeclaredConstructor(String.class);\r\n\r\n    // 2.保证构造器是可访问的\r\n    constructor.setAccessible(true);\r\n\r\n    // 3.调用构造器创建运行时类对象\r\n    Person person1 = constructor.newInstance("Tom");\r\n    System.out.println(person1);\r\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"156-反射的应用动态代理",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#156-反射的应用动态代理",children:"#"}),"15.6 反射的应用：动态代理"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"代理模式的原理"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"使用一个代理将对象包装起来，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时讲方法调用转到原始对象上。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"静态代理的缺陷"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["6.8小节中的代理机制的操作，属于静态代理，","特征","是代理类和被代理类都是在编译期间确定下来的，不利于程序的扩展。同时，每一个代理类只能为一个（或者一套）接口服务，这样一来程序开发中必然产生过多的代理。执行","最好是可以通过一个代理类完成全部的代理功能。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"动态代理"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"定义"}),"\n",(0,s.jsx)(e.p,{children:"动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"使用场景"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"调试"}),"\n",(0,s.jsx)(e.li,{children:"远程方法调用"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"相较于静态代理的优点"}),"\n",(0,s.jsx)(e.p,{children:"抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"静态代理的使用举例"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'/**\r\n * 静态代理类\r\n * @Author tth\r\n * @Date 2022/12/30 14:29\r\n */\r\npublic class StaticProxyTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        // 创建被代理类对象\r\n        NikeClothFactory nike = new NikeClothFactory();\r\n        // 创建代理类对象\r\n        ProxyClothFactory proxyClothFactory = new ProxyClothFactory(nike);\r\n        // 开始生产服装\r\n        proxyClothFactory.produceCloth();\r\n    }\r\n}\r\n\r\n/**\r\n * 服装工厂接口：定义生产衣服的接口\r\n */\r\ninterface ClothFactory {\r\n\r\n    void produceCloth();\r\n}\r\n\r\n/**\r\n * 代理类：服装代理加工厂\r\n */\r\nclass ProxyClothFactory implements ClothFactory {\r\n\r\n    private ClothFactory clothFactory;\r\n\r\n    public ProxyClothFactory(ClothFactory clothFactory) {\r\n        this.clothFactory = clothFactory;\r\n    }\r\n\r\n    @Override\r\n    public void produceCloth() {\r\n        System.out.println("服装代理加工厂开始进行一些准备工作");\r\n        clothFactory.produceCloth();\r\n        System.out.println("服装代理加工厂开始进行收尾工作");\r\n    }\r\n}\r\n\r\n/**\r\n * 被代理类\r\n */\r\nclass NikeClothFactory implements ClothFactory {\r\n    @Override\r\n    public void produceCloth() {\r\n        System.out.println("Nike服装加工厂生产一批运动服");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"动态代理的使用举例"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",meta:"",children:'/**\r\n * 动态代理举例\r\n * @Author tth\r\n * @Date 2022/12/30 14:42\r\n */\r\npublic class DynamicProxyTest {\r\n    @Test\r\n    public void test() {\r\n        // 创建被代理类\r\n        NikeClothFactory1 nike = new NikeClothFactory1();\r\n\r\n        // 创建代理类\r\n        ClothFactory1 clothFactory = (ClothFactory1) ProxyFactory.getProxyInstance(nike);\r\n\r\n        // 调用服装生产方法\r\n        clothFactory.produceCloth();\r\n    }\r\n}\r\n\r\n/**\r\n * 服装工厂接口：定义生产衣服的接口\r\n */\r\ninterface ClothFactory1 {\r\n\r\n    void produceCloth();\r\n}\r\n\r\n/**\r\n * 被代理类\r\n */\r\nclass NikeClothFactory1 implements ClothFactory1 {\r\n    @Override\r\n    public void produceCloth() {\r\n        System.out.println("Nike服装加工厂生产一批运动服");\r\n    }\r\n}\r\n\r\n/**\r\n * 要想实现动态代理，需要解决如下两个问题：\r\n *  1.如何根据被代理类创建一个代理类？\r\n *  2.如何在调用代理类a的方法时自动调用被代理类的a方法？\r\n */\r\n\r\n/**\r\n * 代理工厂类\r\n *  用来解决“根据被代理类创建代理类”的问题\r\n */\r\nclass ProxyFactory {\r\n\r\n    /**\r\n     * 根据被代理类对象创建代理对象\r\n     * @param obj 被代理类对象\r\n     * @return 代理类对象\r\n     */\r\n    public static Object getProxyInstance(Object obj) {\r\n        MyInvocationHandler handler = new MyInvocationHandler();\r\n        handler.bind(obj);\r\n        return Proxy.newProxyInstance(obj.getClass().getClassLoader(),\r\n                obj.getClass().getInterfaces(),\r\n                handler);\r\n    }\r\n}\r\n\r\n/**\r\n * 创建MyInvocationHandler实现InvocationHandler，并实现InvocationHandler的invoke()\r\n * 用来解决“在调用代理类a方法时动态的去调用被代理类的a方法”问题\r\n */\r\nclass MyInvocationHandler implements InvocationHandler {\r\n\r\n    // 被代理类对象\r\n    private Object obj;\r\n\r\n    /**\r\n     * 被绑定代理类对象（该功能也可以使用构造方法实现）\r\n     * @param obj\r\n     */\r\n    public void bind(Object obj) {\r\n        this.obj = obj;\r\n    }\r\n\r\n    /**\r\n     * 当通过代理类对象，调用方法a时，会自动的调用如下方法invoke()\r\n     * @param proxy 代理类对象\r\n     * @param method 代理类要调用的方法\r\n     * @param args 代理类要调用方法的参数\r\n     * @return\r\n     * @throws Throwable\r\n     */\r\n    @Override\r\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n        System.out.println(proxy.getClass().getName());\r\n        // method：代理类要调用的方法，同时，此方法也就作为了被代理类要调用的方法\r\n        // method.invoke()的返回值就作为当前类invoke()方法的返回值\r\n        return method.invoke(obj, args);\r\n    }\r\n}\n'})})]})}function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(a,n)})):a(n)}let c=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["tang%2Fjava2%2F15_Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.md"]={toc:[{id:"151-java反射机制概述",text:"15.1 Java反射机制概述",depth:2},{id:"152-javalangclass",text:"15.2 java.lang.Class",depth:2},{id:"153-创建运行时类的对象",text:"15.3 创建运行时类的对象",depth:2},{id:"1531-class-newinstance的使用",text:"15.3.1 Class newInstance()的使用",depth:3},{id:"1532-体会反射的动态性",text:"15.3.2 体会反射的动态性",depth:3},{id:"154-获取运行时类的完整结构",text:"15.4 获取运行时类的完整结构",depth:2},{id:"1541-获取运行时类的属性结构",text:"15.4.1 获取运行时类的属性结构",depth:3},{id:"1542-获取运行时类的方法结构",text:"15.4.2 获取运行时类的方法结构",depth:3},{id:"1543-获取当前运行时类的构造器",text:"15.4.3 获取当前运行时类的构造器",depth:3},{id:"1544-获取当前运行时类的父类",text:"15.4.4 获取当前运行时类的父类",depth:3},{id:"1545-获取当前运行时类实现的接口",text:"15.4.5 获取当前运行时类实现的接口",depth:3},{id:"1546-获取当前运行时类所在的包",text:"15.4.6 获取当前运行时类所在的包",depth:3},{id:"1547-获取当前运行时类声明的注解",text:"15.4.7 获取当前运行时类声明的注解",depth:3},{id:"155-调用运行时类的指定结构",text:"15.5 调用运行时类的指定结构",depth:2},{id:"1551-调用运行时类的指定属性",text:"15.5.1 调用运行时类的指定属性",depth:3},{id:"1552-调用运行时类中指定的方法",text:"15.5.2 调用运行时类中指定的方法",depth:3},{id:"1553-调用运行时类指定的构造器",text:"15.5.3 调用运行时类指定的构造器",depth:3},{id:"156-反射的应用动态代理",text:"15.6 反射的应用：动态代理",depth:2}],title:"15 Java反射机制",headingTitle:"15 Java反射机制",frontmatter:{}}}}]);