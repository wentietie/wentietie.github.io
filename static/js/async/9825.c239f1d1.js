"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["9825"],{99369:function(n,r,e){e.r(r),e.d(r,{default:()=>l});var a=e("85893"),s=e("50065");let i=e.p+"static/image/1651217604(1).7216b927.jpg";function d(n){let r=Object.assign({h1:"h1",a:"a",h2:"h2",div:"div",p:"p",h3:"h3",ol:"ol",li:"li",ul:"ul",strong:"strong",h4:"h4",pre:"pre",code:"code",img:"img"},(0,s.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.h1,{id:"第一部分-作用域和闭包",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#第一部分-作用域和闭包",children:"#"}),"第一部分 作用域和闭包"]}),"\n",(0,a.jsxs)(r.h2,{id:"11-编译原理",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#11-编译原理",children:"#"}),"1.1 编译原理"]}),"\n",(0,a.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,a.jsx)(r.div,{className:"rspress-directive-title",children:"尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门编译语言。 但与传统的编译语言不同，它不是提前编译的，编译结果也不能在分布式系统中进行移植。"}),(0,a.jsx)(r.div,{className:"rspress-directive-content",children:(0,a.jsx)(r.p,{})})]}),"\n",(0,a.jsxs)(r.h3,{id:"111-传统编译语言编译过程",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#111-传统编译语言编译过程",children:"#"}),"1.1.1 传统编译语言编译过程"]}),"\n",(0,a.jsx)(r.p,{children:"以JS语言举例"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:"分词/词法分析 这个过程会将书写的编程字符串分解成有意义的代码块，这些代码块被称为词法单元（token）。 例如：var a = 2;。这段程序通常被分解为var、a、=、2、;。空格是否被当作词法单元取决于空格在语言中是否有意义。\r\n:::tip 关于分词和词法分析的区别"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["本书中原文的描述中文翻译是：",(0,a.jsx)(r.strong,{children:"如果词法单元生成器在判断 a 是一个独立的词法单元还是其他词法单元的一部分时，调用的是有状态的解析规则，那么这个过程就被称为词法分析"}),"。"]}),"\n",(0,a.jsxs)(r.li,{children:["通过查询资料本人的理解为：",(0,a.jsx)(r.strong,{children:"词法分析是用来做分词的手段，词法分析的目的是分词"}),"。\r\n:::"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:"解析/语法分析 这个过程将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”(AST)\r\n抽象语法树类似一个对象，这个对象中存储了对分词的的描述。"}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:"代码生成 将 AST 转换为可执行代码的过程被称为代码生成。"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(r.h3,{id:"112-js编译",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#112-js编译",children:"#"}),"1.1.2 JS编译"]}),"\n",(0,a.jsx)(r.p,{children:"简单地说，任何 JavaScript 代码片段在执行前都要进行编译（通常就在执行前）。因此， JavaScript 编译器首先会对 var a = 2; 这段程序进行编译，然后做好执行它的准备，并且 通常马上就会执行它。"}),"\n",(0,a.jsxs)(r.h3,{id:"113理解作用域",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#113理解作用域",children:"#"}),"1.1.3理解作用域"]}),"\n",(0,a.jsxs)(r.h4,{id:"概念",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#概念",children:"#"}),"概念"]}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"引擎 从头到尾负责整个JS程序的编译及执行过程"}),"\n",(0,a.jsx)(r.li,{children:"编译器 负责语法分析及代码生成"}),"\n",(0,a.jsx)(r.li,{children:"作用域 负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。"}),"\n"]}),"\n",(0,a.jsxs)(r.h4,{id:"过程",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#过程",children:"#"}),"过程"]}),"\n",(0,a.jsx)(r.p,{children:"以“var a = 2;”为例"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["编译器过程","\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"遇到var a，编译器会查询作用域中是否存在变量a，如果有则忽略，没有则创建一个变量，并命名为a。这个过程被称为LHS查询。即赋值操作的左侧查询。"}),"\n",(0,a.jsx)(r.li,{children:"为引擎生成运行时所需要的代码，这些代码用来处理a = 2这个赋值操作。"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["引擎过程","\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"引擎会查询作用域中是否有a这个变量，如果有就直接使用这个变量，如果没有则向上一层作用域中查询。这个过程被称为RHS查询。即赋值操作的非左侧查询。"}),"\n",(0,a.jsx)(r.li,{children:"如果最后引擎没有找到a这个变量，则会抛出一个异常\r\n:::tip LHS和RHS LHS的意思是试图找到变量的容器本身，从而可以进行复制，而RHS的目的更强调“取到他的源值”。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"GO/AO过程"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"创建执行上下文"}),"\n",(0,a.jsx)(r.li,{children:"挂载变量（形参）声明 挂载函数声明"}),"\n",(0,a.jsx)(r.li,{children:"执行"}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",meta:"",children:"console.log(a);\r\n\r\n/**\r\n * 以这段代码为例\r\n * a 的引用是一个RHS引用，因为这里a 并没有被赋予给任何变量，\r\n * 而是需要取到a的值并将值传递给log方法。\r\n * 而对a = 2 这个a的引用则是LHS引用，\r\n * 因为实际上我们并不关心a的值是什么，我们只需要将2赋值给a\r\n */\r\n\r\n// 举例\r\nfunction foo(a) {\r\n    console.log(a); // 2 \r\n}\r\n\r\nfoo(2);\r\n/**\r\n *  首先对于方法foo 需要先声明一个变量foo，并将function赋值给foo（LHS）。\r\n *  所以foo(2) 的执行则是找到foo所对应的方法（RHS）并执行。\r\n *  而方法中形参的赋值a = 2是隐式的所以这个是需要一次LHS查询的。\r\n */\r\n\n"})}),"\n",(0,a.jsx)(r.p,{children:"结论：LHS 和 RHS 的含义是“赋值操作的目标是谁（LHS）”以及“谁是赋值操作的源头 （RHS）”。\r\n:::"}),"\n",(0,a.jsxs)(r.h4,{id:"作用域嵌套",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#作用域嵌套",children:"#"}),"作用域嵌套"]}),"\n",(0,a.jsx)(r.p,{children:"这一部分很好理解。就是当一个作用域中包含子作用域，那LHS和RHS在进行查询的时候，如果在当前作用域中没有查询到结果，会在外层嵌套作用域中继续查找。"}),"\n",(0,a.jsxs)(r.h2,{id:"12-词法作用域",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#12-词法作用域",children:"#"}),"1.2 词法作用域"]}),"\n",(0,a.jsxs)(r.h3,{id:"121-词法阶段",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#121-词法阶段",children:"#"}),"1.2.1 词法阶段"]}),"\n",(0,a.jsx)(r.p,{children:"词法作用域就是定义在词法阶段的作用域"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"function foo(a) {\r\n    var b = a * 2;\r\n\r\n    function bar(c) {\r\n        console.log(a, b, c);\r\n    }\r\n\r\n    bar(b * 3);\r\n}\r\n\r\nfoo(2); // 2, 4, 12\n"})}),"\n",(0,a.jsx)(r.p,{children:"在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们想象成几个逐级包含的气泡。"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.img,{alt:"1651217604(1)",src:i})}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"包含着整个全局作用域，其中只有一个标识符：foo。"}),"\n",(0,a.jsx)(r.li,{children:"包含着 foo 所创建的作用域，其中有三个标识符：a、bar 和 b。"}),"\n",(0,a.jsx)(r.li,{children:"包含着 bar 所创建的作用域，其中只有一个标识符：c。"}),"\n"]}),"\n",(0,a.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,a.jsx)(r.div,{className:"rspress-directive-title",children:"遮蔽效应"}),(0,a.jsxs)(r.div,{className:"rspress-directive-content",children:[(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的标识符，这叫作",(0,a.jsx)(r.strong,{children:"遮蔽效应"})]}),"\n",(0,a.jsx)(r.li,{children:"抛开遮蔽效应，作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。\r\n:::\r\n::: 注 全局变量会自动成为全局对象（比如浏览器中的 window 对象）的属性。可以通过形如window.a的方式去查找变量，绕开遮蔽效应\r\n:::"}),"\n"]}),(0,a.jsxs)(r.h3,{id:"122-欺骗词法",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#122-欺骗词法",children:"#"}),"1.2.2 欺骗词法"]}),(0,a.jsx)(r.p,{children:"eval方法和with方法。 eval会对js的性能产生影响，不建议使用。 另外一个不推荐使用 eval和with 的原因是会被严格模式所影响（限制）。with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用 eval也被禁止了。"}),(0,a.jsxs)(r.h2,{id:"13-函数作用域和块作用域",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#13-函数作用域和块作用域",children:"#"}),"1.3 函数作用域和块作用域"]}),(0,a.jsx)(r.p,{children:":::tip 这一部分感觉比较浅显，所以写的比较少"})]})]}),"\n",(0,a.jsxs)(r.h3,{id:"131-函数中的作用域",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#131-函数中的作用域",children:"#"}),"1.3.1 函数中的作用域"]}),"\n",(0,a.jsx)(r.p,{children:"函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）"}),"\n",(0,a.jsxs)(r.h4,{id:"隐藏内部实现",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#隐藏内部实现",children:"#"}),"隐藏内部实现"]}),"\n",(0,a.jsx)(r.p,{children:"方法内部内容私有化，可以有效地规避重名带来的冲突"}),"\n",(0,a.jsxs)(r.h4,{id:"函数作用域",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#函数作用域",children:"#"}),"函数作用域"]}),"\n",(0,a.jsx)(r.p,{children:"声明函数名本身就会对所在作用域进行污染，所以在某些时候可以用立即执行函数来包裹方法。"}),"\n",(0,a.jsx)(r.p,{children:"#1.3.2 块级作用域"}),"\n",(0,a.jsx)(r.p,{children:"with关键字省略。"}),"\n",(0,a.jsxs)(r.h4,{id:"trycatch",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#trycatch",children:"#"}),"try/catch"]}),"\n",(0,a.jsx)(r.p,{children:"catch会创建一个块级作用域，其中声明的变量只能在catch内部使用。当试图从别处引用时会抛出错误。"}),"\n",(0,a.jsxs)(r.h4,{id:"let-和-const",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#let-和-const",children:"#"}),"let 和 const"]}),"\n",(0,a.jsx)(r.p,{children:"ES6 引入了let 和 const 关键字，提供了除了var 之外的声明变量的方式。 let 和 const 关键字可以将变量绑定到所在的任意作用域中。 其中两者的区别是 let 可以重新赋值\r\n而const不可以。但是const声明的是对象或者数组，可以用来直接更改内部的属性。 比如const obj = {}; obj.name = 'wenatie'"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"var foo = true;\r\nif (foo) {\r\n    let bar = foo * 2;\r\n    const bar1 = bar\r\n    bar = something(bar);\r\n    console.log(bar);\r\n}\r\nconsole.log(bar); // ReferenceError\r\nconsole.log(bar1); // ReferenceError\n"})}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"垃圾收集 另一个块作用域非常有用的原因和闭包及回收内存垃圾的回收机制相关。"}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:'function process(data) {\r\n    // 在这里做点有趣的事情\r\n}\r\n\r\n// 在这个块中定义的内容完事可以销毁！\r\n{\r\n    let someReallyBigData = {};\r\n    process(someReallyBigData);\r\n}\r\nvar btn = document.getElementById("my_button");\r\nbtn.addEventListener("click", function click(evt) {\r\n    console.log("button clicked");\r\n}, /*capturingPhase=*/false);\r\n\r\n/**\r\n * click 函数的点击回调并不需要 someReallyBigData 变量。这意味着当 process(..)\r\n * 执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。\r\n * 但是，如果使用var，由于 click 函数形成了一个覆盖整个作用域的闭包，\r\n * JavaScript 引擎极有可能依然保存着这个结构\r\n */\n'})}),"\n",(0,a.jsxs)(r.ol,{start:"2",children:["\n",(0,a.jsx)(r.li,{children:"let的for循环"}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"for (let i = 0; i < 10; i++) {\r\n    console.log(i);\r\n}\r\nconsole.log(i); // ReferenceError\r\n/**\r\n * for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，\r\n * 事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。\r\n */\n"})}),"\n",(0,a.jsxs)(r.h2,{id:"14-提升",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#14-提升",children:"#"}),"1.4 提升"]}),"\n",(0,a.jsxs)(r.h3,{id:"141-先有鸡还是先有蛋",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#141-先有鸡还是先有蛋",children:"#"}),"1.4.1 先有鸡还是先有蛋"]}),"\n",(0,a.jsx)(r.p,{children:"直觉上会认为 JavaScript 代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确，有一种特殊情况会导致这个假设是错误的。"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"a = 2;\r\nvar a;\r\nconsole.log(a);\r\n/**\r\n * 很多初学者会认为是 undefined，因为 var a 声明在 a = 2 之后，\r\n * 他们自然而然地认为变量被重新赋值了，因此会被赋予默认值 undefined。\r\n * 事实上真正的输出结果是 2。\r\n */\r\n\r\n// 再来看另外一段代码\r\nconsole.log(a);\r\nvar a = 2;\r\n\r\n/**\r\n * 鉴于上一个代码片段所表现出来的某种非自上而下的行为特点，\r\n * 你可能会认为这个代码片段也会有同样的行为而输出 2。\r\n * 还有人可能会认为，由于变量 a 在使用前没有先进行声明，因此会抛出 ReferenceError 异常。\r\n * 不幸的是两种猜测都是不对的。输出来的会是 undefined。\r\n */\n"})}),"\n",(0,a.jsxs)(r.h3,{id:"142-变量提升",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#142-变量提升",children:"#"}),"1.4.2 变量提升"]}),"\n",(0,a.jsx)(r.p,{children:"包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"/**\r\n * 当你看到 var a = 2; 时，可能会认为这是一个声明。\r\n * 但 JavaScript 实际上会将其看成两个声明：var a; 和 a = 2;。\r\n * 第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。\r\n * 所以上边的代码会被处理成一下代码\r\n */\r\nvar a;\r\na = 2;\r\nconsole.log(a);\r\n\n"})}),"\n",(0,a.jsxs)(r.p,{children:["这个过程就好像变量和函数声明从它们在代码中出现的位置被“移动”到了当前作用域的最上面。这个过程就叫作",(0,a.jsx)(r.strong,{children:"提升"}),"。\r\n","\r\n函数也是同理。"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"foo(); //这里\r\n\r\nfunction foo() {\r\n    console.log(a); // undefined \r\n    var a = 2;\r\n}\r\n\r\n// 这段代码会被理解为一下形式\r\n\r\nfunction foo() {\r\n    var a;\r\n    console.log(a); // undefined \r\n    a = 2;\r\n}\r\n\r\nfoo();\r\n\r\n// 如下代码会报错是因为函数声明会被提升，但是函数表达式却不会被提升\r\nfoo(); // 不是 ReferenceError, 而是 TypeError! \r\nvar foo = function bar() {\r\n    // ... \r\n};\r\n\r\n// 另一种情况\r\nfoo(); // TypeError \r\nbar(); // ReferenceError \r\nvar foo = function bar() {\r\n    // ... \r\n};\r\n// 会理解为如下代码\r\nvar foo;\r\nfoo(); // TypeError：foo is not a function \r\nbar(); // ReferenceError：bar is not defined \r\nfoo = function () {\r\n    var bar = __self__\r\n}\r\n\n"})}),"\n",(0,a.jsx)(r.p,{children:":::tip not defined 和 undefined 的区别"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"not defined是没有定义"}),"\n",(0,a.jsx)(r.li,{children:"undefined是定义了没有赋值\r\n:::"}),"\n"]}),"\n",(0,a.jsxs)(r.h3,{id:"143-函数优先",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#143-函数优先",children:"#"}),"1.4.3 函数优先"]}),"\n",(0,a.jsx)(r.p,{children:"函数声明和变量声明都会被提升。但是一个值得注意的细节是函数会首先被提升，然后才是变量。"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"foo(); // 1 \r\nvar foo;\r\n\r\nfunction foo() {\r\n    console.log(1);\r\n}\r\n\r\nfoo = function () {\r\n    console.log(2);\r\n};\r\n\r\n// 会被理解为\r\nfunction foo() {\r\n    console.log(1);\r\n}\r\n\r\nfoo(); // 1 \r\nfoo = function () {\r\n    console.log(2);\r\n};\r\n//var foo 尽管出现在 function foo()... 的声明之前，但它是重复的声明，因此被忽略了\n"})}),"\n",(0,a.jsxs)(r.h2,{id:"15-作用域闭包",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#15-作用域闭包",children:"#"}),"1.5 作用域闭包"]}),"\n",(0,a.jsx)(r.p,{children:"当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",meta:"",children:"function foo() {\r\n    var a = 2;\r\n\r\n    function bar() {\r\n        console.log(a);\r\n    }\r\n\r\n    return bar;\r\n}\r\n\r\nvar baz = foo();\r\nbaz(); // 2\r\n// 这就是闭包的效果\n"})}),"\n",(0,a.jsx)(r.p,{children:"无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到闭包。也就是说我们常用的callback也是闭包"}),"\n",(0,a.jsxs)(r.h3,{id:"151-模块",children:[(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#151-模块",children:"#"}),"1.5.1 模块"]})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),n.components);return r?(0,a.jsx)(r,Object.assign({},n,{children:(0,a.jsx)(d,n)})):d(n)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["JavaScript%2Fyoudontknowjs%2Fpart1.md"]={toc:[{id:"11-编译原理",text:"1.1 编译原理",depth:2},{id:"111-传统编译语言编译过程",text:"1.1.1 传统编译语言编译过程",depth:3},{id:"112-js编译",text:"1.1.2 JS编译",depth:3},{id:"113理解作用域",text:"1.1.3理解作用域",depth:3},{id:"概念",text:"概念",depth:4},{id:"过程",text:"过程",depth:4},{id:"作用域嵌套",text:"作用域嵌套",depth:4},{id:"12-词法作用域",text:"1.2 词法作用域",depth:2},{id:"121-词法阶段",text:"1.2.1 词法阶段",depth:3},{id:"122-欺骗词法",text:"1.2.2 欺骗词法",depth:3},{id:"13-函数作用域和块作用域",text:"1.3 函数作用域和块作用域",depth:2},{id:"131-函数中的作用域",text:"1.3.1 函数中的作用域",depth:3},{id:"隐藏内部实现",text:"隐藏内部实现",depth:4},{id:"函数作用域",text:"函数作用域",depth:4},{id:"trycatch",text:"try/catch",depth:4},{id:"let-和-const",text:"let 和 const",depth:4},{id:"14-提升",text:"1.4 提升",depth:2},{id:"141-先有鸡还是先有蛋",text:"1.4.1 先有鸡还是先有蛋",depth:3},{id:"142-变量提升",text:"1.4.2 变量提升",depth:3},{id:"143-函数优先",text:"1.4.3 函数优先",depth:3},{id:"15-作用域闭包",text:"1.5 作用域闭包",depth:2},{id:"151-模块",text:"1.5.1 模块",depth:3}],title:"第一部分 作用域和闭包",headingTitle:"第一部分 作用域和闭包",frontmatter:{}}}}]);