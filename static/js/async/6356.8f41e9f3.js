"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["6356"],{49367:function(n,s,e){e.r(s),e.d(s,{default:function(){return i}});var d=e(85893),l=e(50065);function c(n){let s=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",ul:"ul",li:"li",code:"code",strong:"strong",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h1,{id:"7-运算符",children:[(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#7-运算符",children:"#"}),"7 运算符"]}),"\n",(0,d.jsxs)(s.h1,{id:"71-算术运算符",children:[(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#71-算术运算符",children:"#"}),"7.1 算术运算符"]}),"\n","\n",(0,d.jsxs)(s.blockquote,{children:["\n",(0,d.jsx)(s.p,{children:"加法与减法"}),"\n"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["整型 ",(0,d.jsx)(s.code,{children:"+(-)"})," 整型 = 整型"]}),"\n",(0,d.jsxs)(s.li,{children:["整型 ",(0,d.jsx)(s.code,{children:"+(-) "}),"浮点型 = 浮点型"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"+"}),"只表示数 值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL 中字符串拼接要使用字符串函数CONCAT()实现）"]}),"\n"]}),"\n",(0,d.jsxs)(s.blockquote,{children:["\n",(0,d.jsx)(s.p,{children:"乘法与除法"}),"\n"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["一个数 ",(0,d.jsx)(s.code,{children:"*(/)"})," 整数1 = 原数"]}),"\n",(0,d.jsxs)(s.li,{children:["一个数 ",(0,d.jsx)(s.code,{children:"*(/)"}),"浮点数1 = 浮点数，且数值与原数相等"]}),"\n",(0,d.jsxs)(s.li,{children:["一个数 ",(0,d.jsx)(s.code,{children:"/"})," 整数 = 浮点数"]}),"\n",(0,d.jsxs)(s.li,{children:["一个数 ",(0,d.jsx)(s.code,{children:"/"})," 另一个数 = 浮点数，且当除不尽时，保留到小数点后4位"]}),"\n",(0,d.jsxs)(s.li,{children:["一个数 ",(0,d.jsx)(s.code,{children:"/"})," 0 = null"]}),"\n"]}),"\n",(0,d.jsxs)(s.h1,{id:"72-比较运算符",children:[(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#72-比较运算符",children:"#"}),"7.2 比较运算符"]}),"\n",(0,d.jsxs)(s.p,{children:["比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的",(0,d.jsx)(s.strong,{children:"结果为真则返回1"}),"，比较的",(0,d.jsx)(s.strong,{children:"结果为假则返回0"}),"，其他情况则返回NULL。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"="}),"：判断等号两边的值、字符串或表达式是否相等"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["如果等号两遍都为",(0,d.jsx)(s.strong,{children:"字符串"}),"，则MySQL会按照字符串进行比较，其",(0,d.jsx)(s.strong,{children:"比较的是每个字符串中字符的ANSI编码是否相等"}),"。"]}),"\n",(0,d.jsxs)(s.li,{children:["如果等号两边都是",(0,d.jsx)(s.strong,{children:"整数"}),"，则MySQL会按照整数来比较两个值的大小。"]}),"\n",(0,d.jsx)(s.li,{children:"如果等号两边一个是整数，一个是字符串，则MySQL会将字符串转化为数字进行比较。"}),"\n",(0,d.jsx)(s.li,{children:"如果等号两边有一个为NULL，则比较结果为NULL"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"<=>"}),"：安全等于运算符（<=>）与等于运算符（=）的作用是相似的，",(0,d.jsx)(s.strong,{children:"唯一的区别"}),"是",(0,d.jsx)(s.code,{children:"<=>"}),"可 以用来",(0,d.jsx)(s.strong,{children:"对NULL进行判断"}),"。在两个操作数均为NULL时，其返回值为1；当一个操作数为NULL 时，其返回值为0。"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"<>"}),"或",(0,d.jsx)(s.code,{children:"!="}),"：不等于运算符。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL， 或两边都为NULL，则结果为NULL"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"IS NULL"}),"或",(0,d.jsx)(s.code,{children:"ISNULL(值)"}),"：判断一个值是否为null"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"IS NOT NULL"}),"：判断一个值是否不为null"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"LEAST(值1, 值2, ..., 值n)"}),"：返回最小值"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"GREATEST(值1, 值2, ..., 值n)"}),"：返回最大值"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"BETWEEN 值1 AND 值2"}),"：判断一个值是否在闭区间[值1, 值2]之间"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"IN(值1, 值2, ..., 值n)"}),"：判断一个值是否是（值1, 值2, ..., 值n）中的一个值"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"NOT IN(值1, 值2, ..., 值n)"}),"：判断一个值是否不是（值1, 值2, ..., 值n）中的任意一个值"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"LIKE"}),"：模糊匹配"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["常和如下通配符配合使用：","\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"%"}),"：匹配0个或多个字符"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"_"}),"：匹配单个字符"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"ESCAPE"}),'：指定一个字符去替代转义字符("',(0,d.jsx)(s.code,{children:"\\"}),'")']}),"\n",(0,d.jsxs)(s.p,{children:["在mysql中，如果表中某个字段存储了一些特殊符号（如%、_等），在使用",(0,d.jsx)(s.code,{children:"LIKE"}),"进行模糊查询时，需要对特殊字符进行转义。"]}),"\n",(0,d.jsxs)(s.p,{children:["对特殊字符的转义有两种方法：①使用转义字符",(0,d.jsx)(s.code,{children:"\\"})," ②使用关键字",(0,d.jsx)(s.code,{children:"ESCAPE"}),"。使用方法如下"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-mysql",meta:"",children:'### 查询名字带有%字符的用户---使用转义字符\'\\\'\r\n-- % 转义前，%全查\r\nSELECT * FROM escape_test WHERE NAME LIKE CONCAT("%", "%", "%");\r\n-- % 转义后 只匹配含有%的\r\nSELECT * FROM escape_test WHERE NAME LIKE CONCAT("%", "\\%", "%");\r\n\r\n\r\n### 使用关键字escape\r\n### 假设存在名字为 %a 和 %_ 两个的用户\r\nSELECT * FROM escape_test WHERE NAME LIKE "a%_" ESCAPE "a" ;    ### 查询到的结果包含 %a %_ \r\nSELECT * FROM escape_test WHERE NAME LIKE "a%a" ESCAPE "a" ;    ### 查询到的结果只有 %a \r\nSELECT * FROM escape_test WHERE NAME LIKE "a%a_" ESCAPE "a" ;   ### 查询到的结果只有：%_\n'})}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"REGEXP"}),"：使用正则表达式来匹配字符串，语法格式",(0,d.jsx)(s.code,{children:"字符串 regexp 正则表达式"})]}),"\n",(0,d.jsx)(s.p,{children:"常用通配符如下："}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"通配符"}),(0,d.jsx)(s.th,{children:"说明"}),(0,d.jsx)(s.th,{children:"例子"}),(0,d.jsx)(s.th,{children:"匹配值示例"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"^"})}),(0,d.jsxs)(s.td,{children:["匹配以该字符后面的字符",(0,d.jsx)(s.strong,{children:"开头"}),"的字符串"]}),(0,d.jsx)(s.td,{children:"^b"}),(0,d.jsxs)(s.td,{children:["b","ig， ","b","anana"]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"$"})}),(0,d.jsxs)(s.td,{children:["匹配以该字符前面的字符",(0,d.jsx)(s.strong,{children:"结尾"}),"的字符串"]}),(0,d.jsx)(s.td,{children:"st$"}),(0,d.jsxs)(s.td,{children:["te","st","， persi","st"]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"."})}),(0,d.jsxs)(s.td,{children:["匹配任何一个",(0,d.jsx)(s.strong,{children:"单字符"})]}),(0,d.jsx)(s.td,{children:"b.t"}),(0,d.jsxs)(s.td,{children:["b","i","t， b","a","t"]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"*"})}),(0,d.jsxs)(s.td,{children:["匹配",(0,d.jsx)(s.strong,{children:"零个或多个"}),"在它",(0,d.jsx)(s.strong,{children:"前面"}),"的字符。","如果前面没有字符，表示匹配任何数量的任何字符串"]}),(0,d.jsx)(s.td,{children:"f*n"}),(0,d.jsxs)(s.td,{children:["fn， f","a","n，f","aa","n，f","abc","n"]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"+"})}),(0,d.jsxs)(s.td,{children:["匹配",(0,d.jsx)(s.strong,{children:"1次或多次"}),"在它",(0,d.jsx)(s.strong,{children:"前面"}),"的字符"]}),(0,d.jsx)(s.td,{children:"ba+"}),(0,d.jsx)(s.td,{children:"ba，bay，bare，battle"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"<字符串>"})}),(0,d.jsxs)(s.td,{children:["匹配",(0,d.jsx)(s.strong,{children:"包含指定字符串"}),"的文本"]}),(0,d.jsx)(s.td,{children:"<fa>"}),(0,d.jsxs)(s.td,{children:["fa","n， a","fa","，aaa","fa","bbb"]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"[字符串集合]"})}),(0,d.jsxs)(s.td,{children:["匹配字符串集合中",(0,d.jsx)(s.strong,{children:"任意一个字符"}),"。","可以使用一 个",(0,d.jsx)(s.code,{children:"-"}),"表明命名字符的范围：",(0,d.jsx)(s.code,{children:"[a-z]"}),"匹配任何字母,",(0,d.jsx)(s.code,{children:"[0-9]"}),"匹配任何数字"]}),(0,d.jsx)(s.td,{children:"[xz]"}),(0,d.jsxs)(s.td,{children:["di","z","z","y，","x","-ray"]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"[^字符串集合]"})}),(0,d.jsxs)(s.td,{children:["匹配",(0,d.jsx)(s.strong,{children:"不包含字符串集合中任意字符"}),"的文本"]}),(0,d.jsx)(s.td,{children:"[^abc]"}),(0,d.jsx)(s.td,{children:"desk， k8s"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"字符串{n,}"})}),(0,d.jsxs)(s.td,{children:["匹配",(0,d.jsx)(s.strong,{children:"至少n次"}),"它",(0,d.jsx)(s.strong,{children:"前面的字符串"})]}),(0,d.jsx)(s.td,{children:"b{2}"}),(0,d.jsx)(s.td,{children:"bb，bbb，bbbb，bbbbbbb"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"字符串{n,m}"})}),(0,d.jsxs)(s.td,{children:["匹配**[n, m]次",(0,d.jsx)(s.strong,{children:"它"}),"前面的字符串**。","如果n为0，n可省"]}),(0,d.jsx)(s.td,{children:"b{2, 4}"}),(0,d.jsx)(s.td,{children:"bb，bbb，bbbb"})]})]})]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.h1,{id:"73-逻辑运算符",children:[(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#73-逻辑运算符",children:"#"}),"7.3 逻辑运算符"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"NOT"}),"或",(0,d.jsx)(s.code,{children:"!"}),"：逻辑非"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"当给定的值为0时返回1；"}),"\n",(0,d.jsx)(s.li,{children:"当给定的值为非0值时返回0；"}),"\n",(0,d.jsx)(s.li,{children:"当给定的值为NULL时，返回NULL"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"AND"}),"或",(0,d.jsx)(s.code,{children:"&&"}),"：逻辑与。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"当给定的所有值均为非0值，并且都不为NULL时，返回 1；"}),"\n",(0,d.jsx)(s.li,{children:"当给定的一个值或者多个值为0时则返回0；"}),"\n",(0,d.jsx)(s.li,{children:"否则返回NULL"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"OR"}),"或",(0,d.jsx)(s.code,{children:"||"}),"：逻辑或。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"当给定的值都不为NULL，并且任何一个值为非0值时，则返回1，否则返回0；"}),"\n",(0,d.jsx)(s.li,{children:"当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；"}),"\n",(0,d.jsx)(s.li,{children:"当两个值都为 NULL时，返回NULL"}),"\n"]}),"\n","\n"]}),"\n",(0,d.jsxs)(s.li,{children:["\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"XOR"}),"：逻辑异或。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"当给定的值中任意一个是null时，返回null"}),"\n",(0,d.jsx)(s.li,{children:"当两个非null的值都是0或者都不是0时，返回0"}),"\n",(0,d.jsx)(s.li,{children:"当一个值为0，另一个不为0时，返回1"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.h1,{id:"74-位运算符",children:[(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#74-位运算符",children:"#"}),"7.4 位运算符"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"&"}),"：按位与。将给定值对应的二进制数进行逻辑与运算（逻辑与：两个二进制位都是1时返回1，其他返回0）。"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"|"}),"：按位或。将给定值对应的二进制数进行逻辑或运算（逻辑或：两个二进制位全为0时返回0，其他返回1）。"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"^"}),"：按位异或。将给定值对应的二进制数进行逻辑异或运算（逻辑异或：两个二进制位数值相同时返回1，否则返回0）。"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"~"}),"：按位取反。将给定值对应的二进制数进行取反操作（取反：0变1，1变0）。"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:">>"}),"：按位右移，语法",(0,d.jsx)(s.code,{children:"数值 >> 位数"}),"。"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"<<"}),"：按位左移，语法",(0,d.jsx)(s.code,{children:"数值 << 位数"}),"。"]}),"\n"]})]})}function r(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,l.ah)(),n.components);return s?(0,d.jsx)(s,Object.assign({},n,{children:(0,d.jsx)(c,n)})):c(n)}let i=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["tang%2Fmysql%2F07_%E8%BF%90%E7%AE%97%E7%AC%A6.md"]={toc:[],title:"7 运算符",headingTitle:"7 运算符",frontmatter:{}}}}]);