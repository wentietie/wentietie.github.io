"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["2230"],{41627:function(e,r,n){n.r(r),n.d(r,{default:function(){return l}});var s=n(85893),i=n(50065);function o(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",strong:"strong",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"promise-对象",children:["Promise 对象",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promise-对象",children:"#"})]}),"\n",(0,s.jsxs)(r.h2,{id:"promise-的含义",children:["Promise 的含义",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promise-的含义",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 Promise 对象。"}),"\n",(0,s.jsx)(r.p,{children:"所谓 Promise ，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。"}),"\n",(0,s.jsx)(r.p,{children:"Promise 对象有以下两个特点。"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"对象的状态不受外界影响。 Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"一旦状态改变，就不会再变，任何时候都可以得到这个结果。 Promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled 和从 pending 变为 rejected 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"注意，为了行文方便，本章后面的 resolved 统一只指 fulfilled 状态，不包含 rejected 状态。"})}),"\n",(0,s.jsxs)(r.h2,{id:"基本用法",children:["基本用法",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"ES6 规定，Promise 对象是一个构造函数，用来生成Promise 实例。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"const promise = new Promise(function(resolve, reject) {\r\n  // ... some code\r\n  if (true){ /* 异步操作成功 */\r\n    resolve(value);\r\n  } else {\r\n    reject(error);\r\n  }\r\n});\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"promiseprototypethen",children:["Promise.prototype.then()",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseprototypethen",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Promise 实例具有then方法，也就是说， then 方法是定义在原型对象 Promise.prototype 上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过， then 方法的第一个参数是 resolved 状态的回调函数，第二个参数（可选）是 rejected 状态的回调函数。"}),"\n",(0,s.jsx)(r.p,{children:"then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:'getJSON("/post/1.json").then(\r\n  post => getJSON(post.commentURL)\r\n).then(\r\n  comments => console.log("resolved: ", comments),\r\n  err => console.log("rejected: ", err)\r\n);\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"promiseprototypecatch",children:["Promise.prototype.catch()",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseprototypecatch",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Promise.prototype.catch()方法是 .then(null, rejection)或 .then(undefined, rejection)的别名，用于指定发生错误时的回调函数。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"getJSON('/posts.json').then(function(posts) {\r\n  // ...\r\n}).catch(function(error) {\r\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\r\n  console.log('发生错误！', error);\r\n});\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。"})}),"\n",(0,s.jsxs)(r.h2,{id:"promiseprototypefinally",children:["Promise.prototype.finally()",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseprototypefinally",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"finally()方法用于指定不管Promise对象最后状态如何，都会执行的操作。该方法是 ES2018引入标准的。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"promise\r\n.then(result => {\r\n    //code\r\n})\r\n.catch(error => {\r\n    //code\r\n})\r\n.finally(() => {\r\n    //code\r\n});\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"promiseall",children:["Promise.all()",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseall",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Promise.all()方法用于将多个Promise 实例，包装成一个新的 Promise 实例。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"const databasePromise = connectDatabase();\r\nconst booksPromise = databasePromise\r\n    .then(findAllBooks);\r\nconst userPromise = databasePromise\r\n    .then(getCurrentUser);\r\nPromise.all([\r\n    booksPromise,\r\n    userPromise\r\n])\r\n    .then(([books, user]) => pickTopRecommendations(books, user));\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"promiserace",children:["Promise.race()",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promiserace",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Promise.race() 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。只要其中有一个实例率先改变状态， 状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给回调函数。"}),"\n",(0,s.jsxs)(r.h2,{id:"promiseallsettled",children:["Promise.allSettled()",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseallsettled",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Promise.allSettled() 方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是 fulfilled 还是 rejected ，包装实例才会结束。该方法由 ES2020 引入。"}),"\n",(0,s.jsxs)(r.h2,{id:"promiseany",children:["Promise.any()",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseany",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Promise.any()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态。该方法目前是一个第三阶段的提案 。\r\n:::warning 注\r\nPromise.any() 跟 Promise.race() 方法很像，只有一点不同，就是不会因为某个 Promise 变成 rejected 状态而结束。\r\n:::"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}let l=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["JavaScript%2Fes6%2Fes6-14.md"]={toc:[{text:"Promise 的含义",id:"promise-的含义",depth:2},{text:"基本用法",id:"基本用法",depth:2},{text:"Promise.prototype.then()",id:"promiseprototypethen",depth:2},{text:"Promise.prototype.catch()",id:"promiseprototypecatch",depth:2},{text:"Promise.prototype.finally()",id:"promiseprototypefinally",depth:2},{text:"Promise.all()",id:"promiseall",depth:2},{text:"Promise.race()",id:"promiserace",depth:2},{text:"Promise.allSettled()",id:"promiseallsettled",depth:2},{text:"Promise.any()",id:"promiseany",depth:2}],title:"Promise 对象",frontmatter:{}}}}]);