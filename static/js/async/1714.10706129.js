"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["1714"],{17525:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var t=r("85893"),s=r("50065");let i=r.p+"static/image/test_fun_result.c6896e8d.png",a=r.p+"static/image/project_directory.bcf66e5b.png";function c(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",h3:"h3",pre:"pre",code:"code",img:"img",strong:"strong",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"7-java-api-操作-es",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-java-api-操作-es",children:"#"}),"7 Java API 操作 es"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"官方文档"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.8/java-rest-high.html",rel:"noopener noreferrer",target:"_blank",children:"elasticsearch7.8 API 手册"})}),"\n",(0,t.jsxs)(n.h2,{id:"71-搭建elasticsearch项目",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#71-搭建elasticsearch项目",children:"#"}),"7.1 搭建Elasticsearch项目"]}),"\n",(0,t.jsxs)(n.h3,{id:"711-创建elasticsearch_demo工程",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#711-创建elasticsearch_demo工程",children:"#"}),"7.1.1 创建elasticsearch_demo工程"]}),"\n",(0,t.jsx)(n.p,{children:"使用SpringBoot创建elasticsearch_demo项目"}),"\n",(0,t.jsxs)(n.h3,{id:"712-编写pomxml文件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#712-编写pomxml文件",children:"#"}),"7.1.2 编写pom.xml文件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",meta:"",children:'<?xml version="1.0" encoding="UTF-8"?>\r\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.4.4</version>\r\n		<relativePath/> \x3c!-- lookup parent from repository --\x3e\r\n	</parent>\r\n	<groupId>com.tth.learn</groupId>\r\n	<artifactId>elasticsearch_demo</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>elasticsearch_demo</name>\r\n	<description>Elasticsearch Demo project for Spring Boot</description>\r\n	<properties>\r\n		<java.version>8</java.version>\r\n		<fastjson.version>1.2.83</fastjson.version>\r\n	</properties>\r\n	<dependencies>\r\n\r\n		\x3c!--elasticsearch依赖--\x3e\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>\r\n		</dependency>\r\n\r\n		\x3c!--测试依赖--\x3e\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n\r\n		\x3c!--配置注解执行器：当执行类中已经定义了对象和该对象的字段后，在配置文件中对该类赋值时，便会非常方便的弹出提示信息--\x3e\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-configuration-processor</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>com.alibaba</groupId>\r\n			<artifactId>fastjson</artifactId>\r\n			<version>${fastjson.version}</version>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.projectlombok</groupId>\r\n			<artifactId>lombok</artifactId>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"713-编写配置文件applicationproperties",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#713-编写配置文件applicationproperties",children:"#"}),"7.1.3 编写配置文件application.properties"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",meta:"",children:"elasticsearch.host=localhost\r\nelasticsearch.port=9200\r\nelasticsearch.scheme=http\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"714-创建elasticsearch配置类",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#714-创建elasticsearch配置类",children:"#"}),"7.1.4 创建Elasticsearch配置类"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'@Configuration\r\npublic class EsConfig extends AbstractElasticsearchConfiguration {\r\n    @Value(value = "${elasticsearch.host}")\r\n    private String host;\r\n\r\n    @Value(value = "${elasticsearch.port}")\r\n    private Integer port;\r\n\r\n    @Value(value = "${elasticsearch.scheme}")\r\n    private String scheme;\r\n\r\n\r\n    @Override\r\n    public RestHighLevelClient elasticsearchClient() {\r\n        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(new HttpHost(host, port, scheme)));\r\n        return client;\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"715-创建测试类",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#715-创建测试类",children:"#"}),"7.1.5 创建测试类"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\nclass ElasticsearchDemoApplicationTests {\r\n\r\n	@Qualifier("elasticsearchClient")\r\n	@Autowired\r\n	RestHighLevelClient restHighLevelClient;\r\n\r\n	@Test\r\n	void contextLoads() {\r\n		System.out.println(restHighLevelClient);\r\n	}\r\n\r\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"测试方法测试结果："}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:i})}),"\n",(0,t.jsxs)(n.h3,{id:"716-项目结构",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#716-项目结构",children:"#"}),"7.1.6 项目结构"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:a})}),"\n",(0,t.jsxs)(n.h2,{id:"72-索引操作",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#72-索引操作",children:"#"}),"7.2 索引操作"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.8/_index_apis.html",rel:"noopener noreferrer",target:"_blank",children:"索引操作API"})}),"\n",(0,t.jsxs)(n.h3,{id:"721-创建索引",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#721-创建索引",children:"#"}),"7.2.1 创建索引"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchIndexTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 创建索引\r\n     */\r\n    @Test\r\n    public void create() {\r\n        CreateIndexRequest request = new CreateIndexRequest("person");\r\n        request.mapping("{\\n" +\r\n                "    \\"properties\\": {\\n" +\r\n                "      \\"name\\": {\\n" +\r\n                "        \\"type\\": \\"keyword\\",\\n" +\r\n                "        \\"index\\": true,\\n" +\r\n                "        \\"store\\": true\\n" +\r\n                "      },\\n" +\r\n                "      \\"age\\": {\\n" +\r\n                "        \\"type\\": \\"integer\\",\\n" +\r\n                "        \\"index\\": true,\\n" +\r\n                "        \\"store\\": true\\n" +\r\n                "      },\\n" +\r\n                "      \\"remark\\": {\\n" +\r\n                "        \\"type\\": \\"text\\",\\n" +\r\n                "        \\"index\\": true,\\n" +\r\n                "        \\"store\\": true,\\n" +\r\n                "        \\"analyzer\\": \\"ik_max_word\\",\\n" +\r\n                "        \\"search_analyzer\\": \\"ik_smart\\"\\n" +\r\n                "      }\\n" +\r\n                "    }\\n" +\r\n                "  }", XContentType.JSON);\r\n        try {\r\n            CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);\r\n            System.out.println(createIndexResponse.isAcknowledged());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"722-查询索引",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#722-查询索引",children:"#"}),"7.2.2 查询索引"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchIndexTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 查询索引\r\n     */\r\n    @Test\r\n    public void get() {\r\n        GetIndexRequest request = new GetIndexRequest("person");\r\n        try {\r\n            GetIndexResponse response = restHighLevelClient.indices().get(request, RequestOptions.DEFAULT);\r\n            response.getMappings().forEach((s, mappingMetadata) -> {\r\n                System.out.println(mappingMetadata.getSourceAsMap());\r\n            });\r\n            System.out.println(response.getSettings());\r\n        } catch (Exception e) { // 注意：此处最好捕获Exception。如果捕获的是IOException，当查询的索引不存在时，无法捕获异常\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"723-删除索引",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#723-删除索引",children:"#"}),"7.2.3 删除索引"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchIndexTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 删除索引\r\n     */\r\n    @Test\r\n    public void del() {\r\n        DeleteIndexRequest request = new DeleteIndexRequest("person");\r\n        try {\r\n            AcknowledgedResponse response = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);\r\n            System.out.println(response.isAcknowledged());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"73-文档操作",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#73-文档操作",children:"#"}),"7.3 文档操作"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.8/java-rest-high-supported-apis.html",rel:"noopener noreferrer",target:"_blank",children:"文档操作API"})}),"\n",(0,t.jsxs)(n.h3,{id:"731-创建文档",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#731-创建文档",children:"#"}),"7.3.1 创建文档"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDocTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 创建文档\r\n     */\r\n    @Test\r\n    public void createDoc() {\r\n        // 带参初始化，参数为索引名称\r\n        IndexRequest request = new IndexRequest("student");\r\n        request.id("1");\r\n\r\n        Student student = new Student();\r\n        student.setName("小明");\r\n        student.setAge(5);\r\n        student.setRemark("辅助");\r\n        request.source(JSONObject.toJSONString(student), XContentType.JSON);\r\n\r\n        try {\r\n            IndexResponse response = restHighLevelClient.index(request, RequestOptions.DEFAULT);\r\n            System.out.println(response.getResult()); // 输出结果：CREATED\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"732-修改文档",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#732-修改文档",children:"#"}),"7.3.2 修改文档"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"修改文档时，只会修改传入的属性，未传入的属性保持不变"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDocTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 修改文档\r\n     */\r\n    @Test\r\n    public void updateDoc() {\r\n        // 带参初始化。参数分别为 索引名、数据的id\r\n        UpdateRequest request = new UpdateRequest("student", "1");\r\n        Student student = new Student();\r\n        student.setRemark("攻击型");\r\n        // 此处是为doc赋值，修改时只会修改本次设置的属性，对其他属性值无影响。\r\n        // 如本次只修改remark属性，原remark属性值会被覆盖，其他属性值不变\r\n        request.doc(JSONObject.toJSONString(student), XContentType.JSON);\r\n\r\n        try {\r\n            UpdateResponse response = restHighLevelClient.update(request, RequestOptions.DEFAULT);\r\n            System.out.println(response.getResult());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"733-查询文档",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#733-查询文档",children:"#"}),"7.3.3 查询文档"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDocTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 查询文档\r\n     */\r\n    @Test\r\n    public void getDoc() {\r\n        // 带参初始化，参数分别为：索引名、数据的主键\r\n        GetRequest request = new GetRequest("student", "1");\r\n        try {\r\n            GetResponse response = restHighLevelClient.get(request, RequestOptions.DEFAULT);\r\n            if (response.isExists()) {\r\n                long version = response.getVersion(); // 获取数据的版本号\r\n                String source = response.getSourceAsString(); // 获取数据的内容，以String格式返回，还可以使用map格式和byte[]格式返回\r\n                System.out.println(version);\r\n                System.out.println(source);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"734-查询文档中的数据",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#734-查询文档中的数据",children:"#"}),"7.3.4 查询文档中的数据"]}),"\n",(0,t.jsx)(n.p,{children:"仅获取指定id的数据内容，不返回索引信息"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDocTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    @Test\r\n    public void getDocSource() {\r\n        GetSourceRequest request = new GetSourceRequest("student", "1");\r\n        try {\r\n            GetSourceResponse response = restHighLevelClient.getSource(request, RequestOptions.DEFAULT);\r\n            System.out.println(response.getSource()); // 获取数据内容\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"735-删除文档",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#735-删除文档",children:"#"}),"7.3.5 删除文档"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDocTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 删除文档\r\n     */\r\n    @Test\r\n    public void deleteDoc() {\r\n        DeleteRequest request = new DeleteRequest("student", "11");\r\n        try {\r\n            DeleteResponse response = restHighLevelClient.delete(request, RequestOptions.DEFAULT);\r\n            System.out.println(response.getResult()); // 输出结果：DELETED\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"736-批量操作",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#736-批量操作",children:"#"}),"7.3.6 批量操作"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDocTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 文档的批量操作\r\n     */\r\n    @Test\r\n    public void bulkDoc() {\r\n        BulkRequest bulkRequest = new BulkRequest();\r\n        Student student = new Student();\r\n        for (int i = 1; i <= 10; i++) {\r\n            student.setAge(18 + i);\r\n            student.setName("张"+i+"白");\r\n            student.setRemark("我在家排行第"+(i));\r\n            // 循环添加10次“添加”操作\r\n            bulkRequest.add(new IndexRequest("student")\r\n                                .id(String.valueOf(10+i))\r\n                                .source(JSONObject.toJSONString(student), XContentType.JSON));\r\n        }\r\n\r\n        // 添加“更新”操作\r\n        Student studentUpt = new Student();\r\n        studentUpt.setRemark("攻击型");\r\n        bulkRequest.add(new UpdateRequest("student", "1").doc(JSONObject.toJSONString(studentUpt), XContentType.JSON));\r\n    \r\n        // 添加“删除”操作\r\n        bulkRequest.add(new DeleteRequest("student", "1"));\r\n\r\n        try {\r\n            BulkResponse responses = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);\r\n            for (BulkItemResponse itemResponse : responses.getItems()) {\r\n                System.out.println(itemResponse.isFailed()); // 输出false，表示请求成功\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"74-dsl查询",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#74-dsl查询",children:"#"}),"7.4 DSL查询"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.8/_search_apis.html",rel:"noopener noreferrer",target:"_blank",children:"DSL查询API"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"关键方法"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SearchRequest request = new SearchRequest()"}),"：创建request请求。参数为索引名，可不传，可传多个。如果不传参数，表示查询所有索引。"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()"}),"：用来存放request请求的参数。只能存放大部分参数，少部分不支持。"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"request.source(searchSourceBuilder)"}),"将参数设置到request请求中。"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"restHighLevelClient.search(request, RequestOptions.DEFAULT)"}),"：发送请求。其中",(0,t.jsx)(n.code,{children:"restHighLevelClient"}),"是高级客户端",(0,t.jsx)(n.code,{children:"RestHighLevelClient"}),"的实例。"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"示例代码"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"对所有索引使用match_all查询"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDSLTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n\r\n    /**\r\n     * 对所有索引进行查询\r\n     *  使用match_all查询\r\n     */\r\n    @Test\r\n    public void matchALL() {\r\n        // 没有参数，表示查询所有索引\r\n        SearchRequest request = new SearchRequest();\r\n        // SearchSourceBuilder 用来存放大多数的搜索参数\r\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\r\n        // 使用match_all查询\r\n        searchSourceBuilder.query(QueryBuilders.matchAllQuery());\r\n        // 将SearchSourceBuilder添加到request中\r\n        request.source(searchSourceBuilder);\r\n\r\n        try {\r\n            SearchResponse response = restHighLevelClient.search(request, RequestOptions.DEFAULT);\r\n            RestStatus status = response.status();\r\n            System.out.println(status);\r\n            TimeValue took = response.getTook();\r\n            System.out.println(took);\r\n            // 获取命中记录\r\n            SearchHit[] hits = response.getHits().getHits();\r\n            for (int i = 0; i < hits.length; i++) {\r\n                System.out.println(hits[i]);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"对my_index索引使用terms多关键字精确查询，并进行分页、对命中的title进行高亮显示"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",meta:"",children:'/**\r\n * springboot2.4.0之后spring-boot-starter-test去掉了Junit4，改为支持Junit5。\r\n * Junit5使用@ExtendWith(SpringExtension.class)表明运行环境，\r\n * 而Junit4使用@RunWith(SpringRunner.class)表明运行环境。\r\n */\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\npublic class ElasticsearchDSLTest {\r\n\r\n    @Qualifier("elasticsearchClient")\r\n    @Autowired\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n    /**\r\n     * 混合查询\r\n     *  terms多关键字精确查询、分页、高亮\r\n     */\r\n    @Test\r\n    public void mixedSearch() {\r\n        SearchRequest request = new SearchRequest("my_index");\r\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\r\n        // terms多关键字精确查询\r\n        searchSourceBuilder.query(QueryBuilders.termsQuery("title", "华为", "华为手机"));\r\n        // 分页\r\n        searchSourceBuilder.from(0);\r\n        searchSourceBuilder.size(1);\r\n        // 高亮\r\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\r\n        highlightBuilder.preTags("<b style=\'color: red\'>");\r\n        highlightBuilder.postTags("</b>");\r\n        highlightBuilder.field("title");\r\n        searchSourceBuilder.highlighter(highlightBuilder);\r\n        // 将参数信息传入request中\r\n        request.source(searchSourceBuilder);\r\n\r\n        try {\r\n            SearchResponse response = restHighLevelClient.search(request, RequestOptions.DEFAULT);\r\n            // 获取命中记录\r\n            SearchHit[] hits = response.getHits().getHits();\r\n            for (int i = 0; i < hits.length; i++) {\r\n                System.out.println(hits[i]);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\n'})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(c,e)})):c(e)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["tang%2FElasticsearch%2F07_Java%20API%20%E6%93%8D%E4%BD%9C%20Elasticsearch.md"]={toc:[{id:"71-搭建elasticsearch项目",text:"7.1 搭建Elasticsearch项目",depth:2},{id:"711-创建elasticsearch_demo工程",text:"7.1.1 创建elasticsearch_demo工程",depth:3},{id:"712-编写pomxml文件",text:"7.1.2 编写pom.xml文件",depth:3},{id:"713-编写配置文件applicationproperties",text:"7.1.3 编写配置文件application.properties",depth:3},{id:"714-创建elasticsearch配置类",text:"7.1.4 创建Elasticsearch配置类",depth:3},{id:"715-创建测试类",text:"7.1.5 创建测试类",depth:3},{id:"716-项目结构",text:"7.1.6 项目结构",depth:3},{id:"72-索引操作",text:"7.2 索引操作",depth:2},{id:"721-创建索引",text:"7.2.1 创建索引",depth:3},{id:"722-查询索引",text:"7.2.2 查询索引",depth:3},{id:"723-删除索引",text:"7.2.3 删除索引",depth:3},{id:"73-文档操作",text:"7.3 文档操作",depth:2},{id:"731-创建文档",text:"7.3.1 创建文档",depth:3},{id:"732-修改文档",text:"7.3.2 修改文档",depth:3},{id:"733-查询文档",text:"7.3.3 查询文档",depth:3},{id:"734-查询文档中的数据",text:"7.3.4 查询文档中的数据",depth:3},{id:"735-删除文档",text:"7.3.5 删除文档",depth:3},{id:"736-批量操作",text:"7.3.6 批量操作",depth:3},{id:"74-dsl查询",text:"7.4 DSL查询",depth:2}],title:"7 Java API 操作 es",headingTitle:"7 Java API 操作 es",frontmatter:{}}}}]);