"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["1028"],{18724:function(n,e,s){s.r(e),s.d(e,{default:()=>t});var d=s("85893"),r=s("50065");let c=s.p+"static/image/img1.4d3c6305.png",l=s.p+"static/image/img3.e33fccb9.png",i=s.p+"static/image/img2.38e88140.png";function h(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",blockquote:"blockquote",p:"p",pre:"pre",img:"img",strong:"strong",ul:"ul",li:"li"},(0,r.ah)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e.h1,{id:"8-mysql函数",children:["8 MySQL函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8-mysql函数",children:"#"})]}),"\n",(0,d.jsxs)(e.h2,{id:"81-单行函数",children:["8.1 单行函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#81-单行函数",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"811-数值函数",children:["8.1.1 数值函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#811-数值函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"SIGN(X) "})}),"\n",(0,d.jsx)(e.td,{children:"返回X的符号。正数返回1，负数返回-1，0返回0"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"CEIL(x)"}),"，",(0,d.jsx)(e.code,{children:"CEILING(x) "})]}),"\n",(0,d.jsx)(e.td,{children:"对x向上取整"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"FLOOR(x)"})}),"\n",(0,d.jsx)(e.td,{children:"对x向下取整"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"LEAST(e1,e2,e3…)"})}),"\n",(0,d.jsx)(e.td,{children:"返回列表中的最小值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"GREATEST(e1,e2,e3…) "})}),"\n",(0,d.jsx)(e.td,{children:"返回列表中的最大值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"RAND() "})}),"\n",(0,d.jsx)(e.td,{children:"返回0~1的随机数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"RAND(x)"})}),"\n",(0,d.jsx)(e.td,{children:"返回0~1的随机数。x是种子，相同的x值会产生相同的随机数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"ROUND(x) "})}),"\n",(0,d.jsx)(e.td,{children:"对x四舍五入，得到一个整数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"ROUND(x,y)"})}),"\n",(0,d.jsx)(e.td,{children:"对x进行四舍五入，并保留y位小数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"TRUNCATE(x,y) "})}),"\n",(0,d.jsx)(e.td,{children:"对x截断，保留y位小数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"SQRT(x)"})}),"\n",(0,d.jsx)(e.td,{children:"返回x的平方根。当X的值为负数时，返回NULL"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"POW(x,y)"}),"，",(0,d.jsx)(e.code,{children:"POWER(X,Y) "})]}),"\n",(0,d.jsx)(e.td,{children:"返回x的y次方"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"EXP(X) "})}),"\n",(0,d.jsx)(e.td,{children:"返回e的x次方"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CONV(x,f1,f2) "})}),"\n",(0,d.jsx)(e.td,{children:"将x由f1进制数转为f2进制数。f1指明当前x是什么进制，f2指明想转成什么进制"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"..."}),"\n",(0,d.jsx)(e.td,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"812-字符串函数",children:["8.1.2 字符串函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#812-字符串函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"CHAR_LENGTH(s) "}),",",(0,d.jsx)(e.code,{children:"与CHARACTER_LENGTH(s)"})]}),"\n",(0,d.jsx)(e.td,{children:"返回字符串s的字符数。"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"LENGTH(s)"})}),"\n",(0,d.jsx)(e.td,{children:"返回字符串s的字节数，和字符集有关"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CONCAT(s1,s2,......,sn) "})}),"\n",(0,d.jsx)(e.td,{children:"连接s1,s2,......,sn为一个字符串"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CONCAT_WS(x, s1,s2,......,sn)"})}),"\n",(0,d.jsx)(e.td,{children:"同CONCAT(s1,s2,...)函数，但是每个字符串之间要加上x"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"INSERT(str, idx, len, replacestr)"})}),"\n",(0,d.jsx)(e.td,{children:"将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"REPLACE(str, a, b)"})}),"\n",(0,d.jsx)(e.td,{children:"用字符串b替换字符串str中所有出现的字符串a"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"UPPER(s)"})," ，",(0,d.jsx)(e.code,{children:" UCASE(s)"})]}),"\n",(0,d.jsx)(e.td,{children:"将字符串s的所有字母转成大写字母"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:" LOWER(s)"})," ，",(0,d.jsx)(e.code,{children:"LCASE(s)"})]}),"\n",(0,d.jsx)(e.td,{children:"将字符串s的所有字母转成小写字母"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"LEFT(str,n)"}),"或",(0,d.jsx)(e.code,{children:"RIGHT(str,n)"})]}),"\n",(0,d.jsx)(e.td,{children:"返回字符串str最左边或最右边的n个字符"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"LPAD(str, len, pad)"}),"或",(0,d.jsx)(e.code,{children:"RPAD(str ,len, pad)"})]}),"\n",(0,d.jsx)(e.td,{children:"用字符串pad对str最左边或最右边进行填充，直到str的长度为len个字符"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"LTRIM(s)"}),"或",(0,d.jsx)(e.code,{children:"RTRIM(s) "})]}),"\n",(0,d.jsx)(e.td,{children:"去掉字符串s左侧或右的空格"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"TRIM(s)"})}),"\n",(0,d.jsx)(e.td,{children:"去掉字符串s开始与结尾的空格"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"TRIM(s1 FROM s)"})}),"\n",(0,d.jsx)(e.td,{children:"去掉字符串s开始与结尾的s1"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"TRIM(LEADING s1 FROM s)"})}),"\n",(0,d.jsx)(e.td,{children:"去掉字符串s开始处的s1"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"TRIM(TRAILING s1 FROM s)"})}),"\n",(0,d.jsx)(e.td,{children:"去掉字符串s结尾处的s1"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"REPEAT(str, n)"})}),"\n",(0,d.jsx)(e.td,{children:"返回str重复n次的结果"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"SPACE(n)"})}),"\n",(0,d.jsx)(e.td,{children:"返回n个空格"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"STRCMP(s1,s2)"})}),"\n",(0,d.jsx)(e.td,{children:"比较字符串s1,s2的ASCII码值的大小"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"SUBSTR(s,index,len)"}),",",(0,d.jsx)(e.code,{children:"SUBSTRING(s,n,len)"}),",",(0,d.jsx)(e.code,{children:"MID(s,n,len)"})]}),"\n",(0,d.jsx)(e.td,{children:"返回从字符串s的index位置其len个字符"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:" LOCATE(substr,str)"}),",",(0,d.jsx)(e.code,{children:"POSITION(substr IN str)"}),",",(0,d.jsx)(e.code,{children:"INSTR(str,substr)"})]}),"\n",(0,d.jsx)(e.td,{children:"返回字符串substr在字符串str中首次出现的位置。未找到，返回0"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"ELT(m,s1,s2,…,sn)"})}),"\n",(0,d.jsx)(e.td,{children:"返回指定位置的字符串。如 果m=n，则返回sn"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"FIELD(s,s1,s2,…,sn) "})}),"\n",(0,d.jsx)(e.td,{children:"返回字符串s在字符串列表中第一次出现的位置"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"FIND_IN_SET(s1,s2)"})}),"\n",(0,d.jsx)(e.td,{children:"返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分 隔的字符串。完全匹配不是模糊匹配"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"REVERSE(s) "})}),"\n",(0,d.jsx)(e.td,{children:"反转s"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"NULLIF(value1,value2)"})}),"\n",(0,d.jsx)(e.td,{children:"比较两个字符串，如果value1与value2相等，则返回NULL，否则返回 value1"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"813-日期和时间",children:["8.1.3 日期和时间",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#813-日期和时间",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"获取日期、时间"}),"\n"]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"CURDATE()"})," ，",(0,d.jsx)(e.code,{children:"CURRENT_DATE()"})]}),"\n",(0,d.jsx)(e.td,{children:"返回当前日期，只包含年、 月、日"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"CURTIME()"})," ，",(0,d.jsx)(e.code,{children:" CURRENT_TIME()"})]}),"\n",(0,d.jsx)(e.td,{children:"返回当前时间，只包含时、 分、秒"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"NOW()"}),",",(0,d.jsx)(e.code,{children:"SYSDATE()"}),",",(0,d.jsx)(e.code,{children:"CURRENT_TIMESTAMP()"}),", ",(0,d.jsx)(e.code,{children:"LOCALTIME()"}),", ",(0,d.jsx)(e.code,{children:"LOCALTIMESTAMP()"})]}),"\n",(0,d.jsx)(e.td,{children:"返回当前系统日期和时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"日期与时间戳的转换"}),"\n"]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"UNIX_TIMESTAMP()"})}),"\n",(0,d.jsx)(e.td,{children:"将当前时间以UNIX时间戳的形式返回"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"UNIX_TIMESTAMP(date)"})}),"\n",(0,d.jsx)(e.td,{children:"将时间date以UNIX时间戳的形式返回"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"FROM_UNIXTIME(timestamp)"})}),"\n",(0,d.jsx)(e.td,{children:"将UNIX时间戳转换为普通格式的时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"日期的操作函数"}),"\n"]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"EXTRACT(type FROM date)"})}),"\n",(0,d.jsx)(e.td,{children:"返回指定日期中特定的部分，type指定返回的值，其取值与含义见下图"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT now() curr, EXTRACT(MINUTE FROM NOW()) curr_minute, EXTRACT( WEEK FROM NOW()) curr_week, EXTRACT( QUARTER FROM NOW()) curr_quarter, EXTRACT( MINUTE_SECOND FROM NOW()) curr_minute_second;\r\n\r\n+---------------------+-------------+-----------+--------------+--------------------+\r\n| curr                | curr_minute | curr_week | curr_quarter | curr_minute_second |\r\n+---------------------+-------------+-----------+--------------+--------------------+\r\n| 2023-01-13 15:54:35 |          54 |         2 |            1 |               5435 |\r\n+---------------------+-------------+-----------+--------------+--------------------+\r\n1 row in set (0.00 sec)\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)("img",{src:i,alt:""})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"计算日期和时间的函数--第1组"}),"\n"]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"DATE_ADD(datetime, INTERVAL expr type)"})}),"\n",(0,d.jsx)(e.td,{children:"在当前日期或时间上增加expr对应的时间（时间格式由type指定）"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"DATE_SUB(datetime,INTERVAL expr type)"})}),"\n",(0,d.jsx)(e.td,{children:"在当前日期或时间上减去expr对应的时间（时间格式由type指定）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT NOW() `now`,\r\n    -> DATE_ADD(NOW(), INTERVAL 1 DAY) AS add_1_day,\r\n    -> DATE_ADD(NOW(),INTERVAL 1 SECOND) AS add_1_second,\r\n    -> DATE_ADD(NOW(),INTERVAL '1_1' MINUTE_SECOND) AS add_1_minute_1_second,\r\n    -> DATE_ADD(NOW(), INTERVAL -1 YEAR) AS sub_1_year #可以是负数，相当于减\r\n    -> ;\r\n    \r\n+---------------------+---------------------+---------------------+-----------------------+---------------------+\r\n| now                 | add_1_day           | add_1_second        | add_1_minute_1_second | sub_1_year          |\r\n+---------------------+---------------------+---------------------+-----------------------+---------------------+\r\n| 2023-01-13 16:11:58 | 2023-01-14 16:11:58 | 2023-01-13 16:11:59 | 2023-01-13 16:12:59   | 2022-01-13 16:11:58 |\r\n+---------------------+---------------------+---------------------+-----------------------+---------------------+\r\n1 row in set (0.00 sec)\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)("img",{src:l,alt:""})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"计算日期和时间的函数--第2组"}),"\n"]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"ADDTIME(time1,time2)"}),"或",(0,d.jsx)(e.code,{children:"SUBTIME(time1,time2) "})]}),"\n",(0,d.jsxs)(e.td,{children:["返回time1加上或减掉time2后的时间。当time2为一个数字时，代表的是 ",(0,d.jsx)(e.strong,{children:"秒"})," ，可以为负数"]}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"DATEDIFF(date1,date2)"})}),"\n",(0,d.jsx)(e.td,{children:"返回date1 - date2的日期间隔天数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:" TIMEDIFF(time1, time2)"})}),"\n",(0,d.jsx)(e.td,{children:"返回time1 - time2的时间间隔"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"FROM_DAYS(N)"})}),"\n",(0,d.jsx)(e.td,{children:"返回从0000年1月1日起，N天以后的日期"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:" TO_DAYS(date) "})}),"\n",(0,d.jsx)(e.td,{children:"返回日期date距离0000年1月1日的天数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"LAST_DAY(date)"})}),"\n",(0,d.jsx)(e.td,{children:"返回date所在月份的最后一天的日期"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"MAKEDATE(year,n) "})}),"\n",(0,d.jsx)(e.td,{children:"针对给定年份与所在年份中的天数返回一个日期"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"MAKETIME(hour,minute,second)"})}),"\n",(0,d.jsx)(e.td,{children:"将给定的小时、分钟和秒组合成时间并返回"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"PERIOD_ADD(time,n)"})}),"\n",(0,d.jsxs)(e.td,{children:["返回time加上n个月后的时间。",(0,d.jsx)(e.strong,{children:"其中time为YYMM或者YYYYMM"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT NOW() `now`,\r\n    -> ADDTIME(NOW(),20) add_20_second,\r\n    -> SUBTIME(NOW(),'1:1:3') sub_1h_1m_3s,\r\n    -> DATEDIFF(NOW(),'2021-10-01') diff_date,\r\n    -> TIMEDIFF(NOW(),'2021-10-25 22:10:10') diff_time\r\n    -> ;\r\n+---------------------+---------------------+---------------------+-----------+-----------+\r\n| now                 | add_20_second       | sub_1h_1m_3s        | diff_date | diff_time |\r\n+---------------------+---------------------+---------------------+-----------+-----------+\r\n| 2023-01-13 16:36:13 | 2023-01-13 16:36:33 | 2023-01-13 15:35:10 |       469 | 838:59:59 |\r\n+---------------------+---------------------+---------------------+-----------+-----------+\r\n1 row in set, 1 warning (0.00 sec)\r\n\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT NOW() `now`,\r\n    -> FROM_DAYS(368) 368_date,\r\n    -> TO_DAYS('0000-12-25') to_days,\r\n    -> LAST_DAY(NOW()) curr_month_last_day,\r\n    -> MAKEDATE(YEAR(NOW()),369) make_date,\r\n    -> MAKETIME(52,21,23) make_time\r\n    -> ;\r\n+---------------------+------------+---------+---------------------+------------+-----------+\r\n| now                 | 368_date   | to_days | curr_month_last_day | make_date  | make_time |\r\n+---------------------+------------+---------+---------------------+------------+-----------+\r\n| 2023-01-13 16:36:36 | 0001-01-03 |     359 | 2023-01-31          | 2024-01-04 | 52:21:23  |\r\n+---------------------+------------+---------+---------------------+------------+-----------+\r\n1 row in set (0.00 sec)\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT PERIOD_ADD(201703, 5) ;\r\n+-----------------------+\r\n| PERIOD_ADD(201703, 5) |\r\n+-----------------------+\r\n|                201708 |\r\n+-----------------------+\r\n1 row in set (0.00 sec)\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"日期的格式化与解析"}),"\n"]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"DATE_FORMAT(date,fmt)"})}),"\n",(0,d.jsx)(e.td,{children:"按照字符串fmt格式化日期date"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"TIME_FORMAT(time,fmt) "})}),"\n",(0,d.jsx)(e.td,{children:"按照字符串fmt格式化时间time"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"GET_FORMAT(date_type,format_type)"})}),"\n",(0,d.jsx)(e.td,{children:"返回日期字符串的显示格式"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"STR_TO_DATE(str, fmt)"})}),"\n",(0,d.jsx)(e.td,{children:"按照字符串fmt对str进行解析，解析为一个日期"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)("img",{src:c,alt:""})}),"\n",(0,d.jsxs)(e.h3,{id:"814-流程控制函数",children:["8.1.4 流程控制函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#814-流程控制函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"IF(value,value1,value2) "})}),"\n",(0,d.jsx)(e.td,{children:"如果value的值为TRUE，返回value1， 否则返回value2"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"IFNULL(value1, value2) "})}),"\n",(0,d.jsx)(e.td,{children:"如果value1不为NULL，返回value1，否 则返回value2"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 .... [ELSE resultn] END"})}),"\n",(0,d.jsx)(e.td,{children:"相当于Java的if...else if...else..."}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 .... [ELSE 值n] END"})}),"\n",(0,d.jsx)(e.td,{children:"相当于Java的switch...case..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"815-加密与解密函数",children:["8.1.5 加密与解密函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#815-加密与解密函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"PASSWORD(str) "})}),"\n",(0,d.jsxs)(e.td,{children:["用户密码加密。加密结果",(0,d.jsx)(e.strong,{children:"不可逆"})," ，常用于用户的密码加密 。","MySQL8.0中已移除该方法"]}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"MD5(str) "})}),"\n",(0,d.jsx)(e.td,{children:"MD5加密。若参数为 NULL，则会返回NULL"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"SHA(str) "})}),"\n",(0,d.jsx)(e.td,{children:"SHA加密。当参数为 NULL时，返回NULL。 SHA加密算法比MD5更加安全 。"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"ENCODE(value,password_seed)"})}),"\n",(0,d.jsxs)(e.td,{children:["返回使用password_seed作为加密密码",(0,d.jsx)(e.strong,{children:"加密"}),"value ","MySQL8.0中已移除该方法"]}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"DECODE(value,password_seed) "})}),"\n",(0,d.jsxs)(e.td,{children:["返回使用password_seed作为加密密码",(0,d.jsx)(e.strong,{children:"解密"}),"value","MySQL8.0中已移除该方法"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"816-mysql信息函数",children:["8.1.6 MySQL信息函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#816-mysql信息函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"VERSION() "})}),"\n",(0,d.jsx)(e.td,{children:"返回当前MySQL的版本号"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CONNECTION_ID() "})}),"\n",(0,d.jsx)(e.td,{children:"返回当前MySQL服务器的连接数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:" DATABASE()"}),"，",(0,d.jsx)(e.code,{children:"SCHEMA()"})]}),"\n",(0,d.jsx)(e.td,{children:"返回MySQL命令行当前所在的数据库"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"USER()"}),"，",(0,d.jsx)(e.code,{children:"CURRENT_USER()"}),"、",(0,d.jsx)(e.code,{children:"SYSTEM_USER()"}),"， ",(0,d.jsx)(e.code,{children:"SESSION_USER()"})]}),"\n",(0,d.jsx)(e.td,{children:"返回当前连接MySQL的用户名，返回结果格式为 “主机名@用户名”"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CHARSET(value) "})}),"\n",(0,d.jsx)(e.td,{children:"返回字符串value自变量的字符集"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"COLLATION(value)"})}),"\n",(0,d.jsx)(e.td,{children:"返回字符串value的比较规则"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT CHARSET('ABC'), COLLATION('ABC');\r\n\r\n+----------------+--------------------+\r\n| CHARSET('ABC') | COLLATION('ABC')   |\r\n+----------------+--------------------+\r\n| utf8mb4        | utf8mb4_0900_ai_ci |\r\n+----------------+--------------------+\r\n1 row in set (0.00 sec)\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"817-其他函数",children:["8.1.7 其他函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#817-其他函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数"}),"\n",(0,d.jsx)(e.th,{children:"用法"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"FORMAT(value,n)"})}),"\n",(0,d.jsxs)(e.td,{children:["返回对数字value进行格式化后的结果数据。n表示 ",(0,d.jsx)(e.strong,{children:"四舍五入"})," 后保留 到小数位数"]}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"INET_ATON(ipvalue)  "})}),"\n",(0,d.jsx)(e.td,{children:"将以点分隔的IP地址转化为一个数字"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"INET_NTOA(value) "})}),"\n",(0,d.jsx)(e.td,{children:"将数字形式的IP地址转化为以点分隔的IP地址"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"BENCHMARK(n,expr) "})}),"\n",(0,d.jsx)(e.td,{children:"将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费的时间"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"CONVERT(value USING char_code) "})}),"\n",(0,d.jsx)(e.td,{children:"将value所使用的字符编码修改为char_code"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"SELECT CHARSET('mysql'), CHARSET(CONVERT('mysql' USING 'utf8'));\r\n\r\n+------------------+----------------------------------------+\r\n| CHARSET('mysql') | CHARSET(CONVERT('mysql' USING 'utf8')) |\r\n+------------------+----------------------------------------+\r\n| utf8mb4          | utf8                                   |\r\n+------------------+----------------------------------------+\r\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n",(0,d.jsxs)(e.h2,{id:"82-聚合函数",children:["8.2 聚合函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#82-聚合函数",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"聚合函数类型"}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"AVG()"}),"：AVG(column)求column列的平均值。只能对",(0,d.jsx)(e.strong,{children:"数值型数据"}),"使用"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"SUM()"}),"：SUM(column)求column列的和。只能对",(0,d.jsx)(e.strong,{children:"数值型数据"}),"使用"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"MAX()"}),"：MAX(column)求column列的最大值。可以对",(0,d.jsx)(e.strong,{children:"任意数据类型"}),"的数据使用"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"MIN()"}),"：MIN(column)求column列的最小值。可以对",(0,d.jsx)(e.strong,{children:"任意数据类型"}),"的数据使用"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"COUNT()"}),"：返回表中记录总数。可以对",(0,d.jsx)(e.strong,{children:"任意数据类型"}),"的数据使用"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"用count(*)，count(1)，count(列名)谁好呢?"}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"答："}),"对于",(0,d.jsx)(e.strong,{children:"MyISAM引擎"}),"的表是没有区别的。这种引擎内部有一计数器在维护着行数。 ",(0,d.jsx)(e.strong,{children:"Innodb引擎"}),"的表用count(*),count(1)\r\n直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"能不能使用count(列名)替换count(*)?"}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"答："}),"不要使用 count(列名)来替代 count(*) 。**count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行\r\n**。"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"语法"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"SELECT column, 聚合函数(column)\r\nFROM table\r\n[WHERE condition]\r\n[GROUP BY group_by_expression]\r\n[ORDER BY column];\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"注意"}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"聚合函数不能嵌套使用"}),"\n",(0,d.jsx)(e.li,{children:"不能在where语句中使用聚合函数"}),"\n"]}),"\n",(0,d.jsxs)(e.h2,{id:"83-group-by",children:["8.3 GROUP BY",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#83-group-by",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"语法"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"SELECT column, group_function(column)\r\nFROM table\r\n[WHERE condition]\r\n[GROUP BY group_by_expression]\r\n[ORDER BY column];\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"注意事项"}),"\n"]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"GROUP BY中使用WITH ROLLUP"}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["使用 ",(0,d.jsx)(e.code,{children:"WITH ROLLUP"})," 关键字之后，在所有查询出的分组记录之后",(0,d.jsx)(e.strong,{children:"增加一条记录"}),"，该记录用来求全部数据的sum、avg、count等"]}),"\n",(0,d.jsxs)(e.li,{children:["当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即",(0,d.jsx)(e.strong,{children:"ROLLUP和ORDER BY是互相排斥 的"})]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT department_id, SUM(salary),AVG(salary),count(*)\r\n    -> FROM employee\r\n    -> GROUP BY department_id WITH ROLLUP;\r\n    \r\n+---------------+-------------+-------------+----------+\r\n| department_id | SUM(salary) | AVG(salary) | count(*) |\r\n+---------------+-------------+-------------+----------+\r\n|             1 |    19600.00 | 9800.000000 |        2 |\r\n|             2 |     3433.00 | 3433.000000 |        1 |\r\n|          NULL |    23033.00 | 7677.666667 |        3 |\r\n+---------------+-------------+-------------+----------+\r\n3 rows in set (0.00 sec)\n"})}),"\n",(0,d.jsxs)(e.h2,{id:"84-having",children:["8.4 HAVING",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#84-having",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"作用"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"过滤分组"}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"语法"}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"使用时，确保行已被分组"}),"\n",(0,d.jsx)(e.li,{children:"使用了聚合函数"}),"\n",(0,d.jsx)(e.li,{children:"和GROUP BY搭配使用，用在GROUP BY后order by前"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"SELECT column, group_function(column)\r\nFROM table\r\n[WHERE condition]\r\n[GROUP BY group_by_expression]\r\n[HAVING group_condition]\r\n[ORDER BY column];\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"例子"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"mysql> SELECT department_id, MAX(salary)\r\n    -> FROM employee\r\n    -> GROUP BY department_id\r\n    -> HAVING MAX(salary) > 2222\r\n    -> ORDER BY department_id desc;\r\n    \r\n    \r\n+---------------+-------------+\r\n| department_id | MAX(salary) |\r\n+---------------+-------------+\r\n|             2 |     3433.00 |\r\n|             1 |    10000.00 |\r\n+---------------+-------------+\r\n2 rows in set (0.00 sec)\n"})}),"\n",(0,d.jsxs)(e.h2,{id:"85-select执行过程",children:["8.5 SELECT执行过程",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#85-select执行过程",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"SELECT语句的结构"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-mysql",children:"SELECT ...,....,...\r\nFROM ...[, ..., ...]\r\n[INNER / LEFT / RIGHT] JOIN ... ON ...多表的连接条件\r\nWHERE 不包含组函数的过滤条件 [AND / OR 不包含组函数的过滤条件]\r\nGROUP BY ...,...\r\nHAVING 包含组函数的过滤条件\r\nORDER BY ..., ..., ... ASC / DESC\r\nLIMIT ...,...\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"SELECT语句的执行顺序"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"FROM （---\x3e ON ---\x3e JOIN ）---\x3e WHERE ---\x3e GROUP BY ---\x3e HAVING ---\x3e SELECT ---\x3e DISTINCT ---\x3e ORDER BY ---\x3e LIMIT"}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"SELECT执行原理"}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行FROM子句"}),"，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt1"}),"。如果是多表联查，还会经历如下几个步骤：","\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["先",(0,d.jsx)(e.strong,{children:"求两个表的笛卡尔积"}),"，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt1.1"})]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行ON语句"}),"，对表vt1的数据进行筛选，生成表",(0,d.jsx)(e.strong,{children:"vt1.2"})]}),"\n",(0,d.jsxs)(e.li,{children:["如果是外连接（左连接/右连接/全连接），则对表vt1.2",(0,d.jsx)(e.strong,{children:"添加外部行"}),"，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt1.3"})]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行WHERE语句"}),"，对FROM语句中生成的虚拟表进行筛选，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt2"})]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行GROUP BY语句"}),"，对表vt2中的数据进行分组，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt3"})]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行HAVING语句"}),"，对表vt3中的数据再次进行筛选，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt4"}),"。","\r\nHAVING语句中可以使用SELECT语句中的列以及列的别名"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行SELECT语句"}),"，在表vt4中选取需要的列，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt5"}),"。"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行DISTINCT语句"}),"，对表vt5中的数据去重，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt6"}),"。"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行ORDER BY语句"}),"，对表vt6中的数据进行排序，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt7"}),"。","ORDER\r\nBY语句中可以使用SELECT语句中的列以及列的别名"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"执行LIMIT语句"}),"，在表vt7中取出指定的行记录，生成虚拟表",(0,d.jsx)(e.strong,{children:"vt8"}),"。"]}),"\n"]})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(h,{...n})}):h(n)}let t=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["tang%2Fmysql%2F08_MySQL%E5%87%BD%E6%95%B0.md"]={toc:[{text:"8.1 单行函数",id:"81-单行函数",depth:2},{text:"8.1.1 数值函数",id:"811-数值函数",depth:3},{text:"8.1.2 字符串函数",id:"812-字符串函数",depth:3},{text:"8.1.3 日期和时间",id:"813-日期和时间",depth:3},{text:"8.1.4 流程控制函数",id:"814-流程控制函数",depth:3},{text:"8.1.5 加密与解密函数",id:"815-加密与解密函数",depth:3},{text:"8.1.6 MySQL信息函数",id:"816-mysql信息函数",depth:3},{text:"8.1.7 其他函数",id:"817-其他函数",depth:3},{text:"8.2 聚合函数",id:"82-聚合函数",depth:2},{text:"8.3 GROUP BY",id:"83-group-by",depth:2},{text:"8.4 HAVING",id:"84-having",depth:2},{text:"8.5 SELECT执行过程",id:"85-select执行过程",depth:2}],title:"8 MySQL函数",frontmatter:{}}}}]);