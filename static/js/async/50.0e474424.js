"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["50"],{93617:function(n,e,s){s.r(e),s.d(e,{default:function(){return t}});var r=s(85893),d=s(50065);function h(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",p:"p",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,d.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"10-cap定理",children:["10 CAP定理",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#10-cap定理",children:"#"})]}),"\n",(0,r.jsxs)(e.h2,{id:"101-概念",children:["10.1 概念",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#101-概念",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"CAP定理，又称布鲁尔定理"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"C(Consistency)：一致性。指数据在多个副本之间能够保持一致的特性，在同一时刻是否具有同样的值。\r\n一致性，可以分为强一致性和弱一致性。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"强一致性：在任意时刻，所有节点中的数据都保持一致性。"}),"\n",(0,r.jsx)(e.li,{children:"弱一致性：数据更新后，如果能容忍短时间内的访问只能访问到部分或者全部访问不到，就是弱一致性。最终一致性就属于弱一致性。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"A(Avaliablity)：可用性。指系统提供的服务必须一直处于可用状态。每次只要收到用户的请求，服务器就必须给出回应。在合理的时间内返回合理的相应（不是错误和超时的响应）。保证服务的可用性，就是搭建集群。"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"P(Partition tolerance)：在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，但是他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的分区。分区容错的意思是，区间通信可能失败。"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"102-cap取舍策略",children:["10.2 CAP取舍策略",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#102-cap取舍策略",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。"})}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"策略"}),"\n",(0,r.jsx)(e.th,{children:"分析结果"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"CA"}),"\n",(0,r.jsx)(e.td,{children:"满足一致性和可用性，放弃分区容错。说白了，就是一个整体应用，不是分布式应用"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"CP"}),"\n",(0,r.jsx)(e.td,{children:"满足一致性和分区容错性，放弃可用性。当系统被分区，为了保证一致性，必须放弃可用性，让系统停掉。如银行系统"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"AP"}),"\n",(0,r.jsx)(e.td,{children:"满足可用性和分区容错性，放弃一致性。当系统被分区，为了保证可用性，就必须让节点继续对外服务，这就意味着失去一致性。分布式系统中最常用策略。"}),"\n"]}),"\n"]}),"\n"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}let t=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["tang%2FElasticsearch%2F10_CAP%E5%AE%9A%E7%90%86.md"]={toc:[{text:"10.1 概念",id:"101-概念",depth:2},{text:"10.2 CAP取舍策略",id:"102-cap取舍策略",depth:2}],title:"10 CAP定理",frontmatter:{}}}}]);