"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([["9186"],{53392:function(e,s,n){n.r(s),n.d(s,{default:function(){return d}});var r=n(85893),i=n(50065);function a(e){let s=Object.assign({h1:"h1",a:"a",h2:"h2",code:"code",p:"p",h3:"h3",pre:"pre",div:"div"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"条件渲染和列表渲染",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#条件渲染和列表渲染",children:"#"}),"条件渲染和列表渲染"]}),"\n",(0,r.jsxs)(s.h2,{id:"条件渲染v-if",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#条件渲染v-if",children:"#"}),"条件渲染",(0,r.jsx)(s.code,{children:"v-if"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"v-if"})," 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。 使用逻辑和表达式中的if-else相同"]}),"\n",(0,r.jsxs)(s.h3,{id:"v-if",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#v-if",children:"#"}),"v-if"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-vue",meta:"",children:'<h1 v-if="awesome">Vue is awesome!</h1>\n'})}),"\n",(0,r.jsxs)(s.h3,{id:"v-else",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#v-else",children:"#"}),"v-else"]}),"\n",(0,r.jsx)(s.p,{children:"使用 v-else 为 v-if 添加一个“else 区块”。"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-vue",meta:"",children:'<button @click="awesome = !awesome">Toggle</button>\r\n\r\n<h1 v-if="awesome">Vue is awesome!</h1>\r\n<h1 v-else>Oh no \uD83D\uDE22</h1>\n'})}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsx)(s.p,{children:"\n一个 v-else 元素必须跟在一个 v-if 或者 v-else-if 元素后面，否则它将不会被识别。"})})]}),"\n",(0,r.jsxs)(s.h3,{id:"v-show",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#v-show",children:"#"}),"v-show"]}),"\n",(0,r.jsx)(s.p,{children:"另一个可以用来按条件显示一个元素的指令是 v-show。其用法与v-if相同."}),"\n",(0,r.jsxs)(s.p,{children:["不同之处在于 v-show 会在 DOM 渲染中保留该元素；v-show 仅切换了该元素上名为 display 的 CSS 属性。v-show 不支持在 ",(0,r.jsx)(s.code,{children:"<template>"})," 元素上使用，也不能和 v-else 搭配使用。"]}),"\n",(0,r.jsxs)(s.h2,{id:"v-for",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#v-for",children:"#"}),"v-for"]}),"\n",(0,r.jsx)(s.p,{children:"我们可以使用 v-for 指令基于一个数组来渲染一个列表。v-for 指令的值需要使用 item in items 形式的特殊语法，其中 items 是源数据的数组，而 item 是迭代项的别名."}),"\n",(0,r.jsx)(s.p,{children:"在 v-for 块中可以完整地访问父作用域内的属性和变量。v-for 也支持使用可选的第二个参数表示当前项的位置索引。"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-vue",meta:"",children:"<li v-for=\"(item, index) in items\">\r\n  {{ item.message }} - {{index}}\r\n</li>\r\n\r\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n"})}),"\n",(0,r.jsx)(s.p,{children:"v-for 变量的作用域和下面的 JavaScript 代码很类似："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",meta:"",children:"const parentMessage = 'Parent'\r\nconst items = [\r\n  /* ... */\r\n]\r\n\r\nitems.forEach((item, index) => {\r\n  // 可以访问外层的 `parentMessage`\r\n  // 而 `item` 和 `index` 只在这个作用域可用\r\n  console.log(parentMessage, item.message, index)\r\n})\r\n\n"})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.ah)(),e.components);return s?(0,r.jsx)(s,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}let d=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["formwork%2Fvue3%2Freactive%2Fpart3.md"]={toc:[{id:"条件渲染v-if",text:"条件渲染`v-if`",depth:2},{id:"v-if",text:"v-if",depth:3},{id:"v-else",text:"v-else",depth:3},{id:"v-show",text:"v-show",depth:3},{id:"v-for",text:"v-for",depth:2}],title:"条件渲染和列表渲染",headingTitle:"条件渲染和列表渲染",frontmatter:{}}}}]);